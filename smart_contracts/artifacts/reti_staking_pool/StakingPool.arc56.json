{
    "name": "StakingPool",
    "structs": {
        "PoolTokenPayoutRatio": [
            {
                "name": "poolPctOfWhole",
                "type": "uint64[24]"
            },
            {
                "name": "updatedForPayout",
                "type": "uint64"
            }
        ],
        "StakedInfo": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "balance",
                "type": "uint64"
            },
            {
                "name": "totalRewarded",
                "type": "uint64"
            },
            {
                "name": "rewardTokenBalance",
                "type": "uint64"
            },
            {
                "name": "entryRound",
                "type": "uint64"
            }
        ],
        "ValidatorPoolKey": [
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "poolId",
                "type": "uint64"
            },
            {
                "name": "poolAppId",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "updateApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "uint64",
                    "name": "creatingContractId"
                },
                {
                    "type": "uint64",
                    "name": "validatorId"
                },
                {
                    "type": "uint64",
                    "name": "poolId"
                },
                {
                    "type": "uint64",
                    "name": "minEntryStake"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "gas",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "initStorage",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addStake",
            "args": [
                {
                    "type": "address",
                    "name": "staker"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "removeStake",
            "args": [
                {
                    "type": "address",
                    "name": "staker"
                },
                {
                    "type": "uint64",
                    "name": "amountToUnstake"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claimTokens",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getStakerInfo",
            "args": [
                {
                    "type": "address",
                    "name": "staker"
                }
            ],
            "returns": {
                "type": "(address,uint64,uint64,uint64,uint64)",
                "struct": "StakedInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "payTokenReward",
            "args": [
                {
                    "type": "address",
                    "name": "staker"
                },
                {
                    "type": "uint64",
                    "name": "rewardToken"
                },
                {
                    "type": "uint64",
                    "name": "amountToSend"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateAlgodVer",
            "args": [
                {
                    "type": "byte[]",
                    "name": "algodVer"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "epochBalanceUpdate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "goOnline",
            "args": [
                {
                    "type": "byte[]",
                    "name": "votePK"
                },
                {
                    "type": "byte[]",
                    "name": "selectionPK"
                },
                {
                    "type": "byte[]",
                    "name": "stateProofPK"
                },
                {
                    "type": "uint64",
                    "name": "voteFirst"
                },
                {
                    "type": "uint64",
                    "name": "voteLast"
                },
                {
                    "type": "uint64",
                    "name": "voteKeyDilution"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "goOffline",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "linkToNFD",
            "args": [
                {
                    "type": "uint64",
                    "name": "nfdAppId"
                },
                {
                    "type": "byte[]",
                    "name": "nfdName"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "proxiedSetTokenPayoutRatio",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "struct": "ValidatorPoolKey",
                    "name": "poolKey"
                }
            ],
            "returns": {
                "type": "(uint64[24],uint64)",
                "struct": "PoolTokenPayoutRatio"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "StakingPool contract has a new instance deployed per staking pool added by any validator.  A single instance\nis initially immutably deployed, and the id of that instance is used as a construction parameter in the immutable\ninstance of the master ValidatorRegistry contract.  It then uses that StakingPool instance as a 'factory template'\nfor subsequent pool creations - using the on-chain bytecode of that deployed instance to create a new identical\ninstance.\n\nEach instance is explicitly 'linked' to the validator master via its creation parameters.  The validator master\ncontract only allows calls from staking pool contract instances that match data that only the validator master\nauthoritatively has (validator id X, pool Y - has to come from contract address of that pool).  Calls the pools\nvalidate coming from the validator are only allowed if it matches the validator id it was created with.",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 11,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "creatingValidatorContractAppId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3JlYXRvckFwcA=="
                },
                "validatorId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dmFsaWRhdG9ySWQ="
                },
                "poolId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cG9vbElk"
                },
                "numStakers": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bnVtU3Rha2Vycw=="
                },
                "totalAlgoStaked": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3Rha2Vk"
                },
                "minEntryStake": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWluRW50cnlTdGFrZQ=="
                },
                "lastPayout": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdFBheW91dA=="
                },
                "epochNumber": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZXBvY2hOdW1iZXI="
                },
                "algodVer": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YWxnb2RWZXI="
                },
                "roundsPerDay": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cm91bmRzUGVyRGF5"
                },
                "binRoundStart": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YmluUm91bmRTdGFydA=="
                },
                "stakeAccumulator": {
                    "keyType": "AVMString",
                    "valueType": "uint128",
                    "key": "c3Rha2VBY2N1bXVsYXRvcg=="
                },
                "rewardAccumulator": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmV3YXJkQWNjdW11bGF0b3I="
                },
                "weightedMovingAverage": {
                    "keyType": "AVMString",
                    "valueType": "uint128",
                    "key": "ZXdtYQ=="
                }
            },
            "local": {},
            "box": {
                "stakers": {
                    "keyType": "AVMString",
                    "valueType": "(address,uint64,uint64,uint64,uint64)[200]",
                    "key": "c3Rha2Vycw=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        127,
                        151,
                        160,
                        169,
                        178,
                        187,
                        196,
                        205,
                        285,
                        294,
                        303,
                        327,
                        336,
                        345
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        357
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        349
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        130,
                        154,
                        163,
                        172,
                        181,
                        190,
                        199,
                        208,
                        288,
                        297,
                        306,
                        330,
                        339,
                        360
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAQAxG0EAcIIPBEb3ZTMEWekKpgQxcsqdBIouMsQEw/VOVwRCG1q+BPWJLVYEXPuwVwRj8/KLBKfXlp4E78JgjQS4aANyBFHvOyEE44QRrgQMIkXhNhoAjg8A5gDcANMAygCyAKkAoABQAEcAPgA1ACwAIwAaAAIjQzEZFEQxGEQ2GgGIAOKABBUffHVMULAiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGESARBUffHUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsCJDMRkURDEYRCJDMRkURDEYRCJDMRkURDEYRIAMFR98dQAAAAAAAAAAsCJDMRkURDEYRCJDMRkURDEYRCJDMRkURDEYFEQiQzEZgQQSRDEYRCJDigEBgcABryMWUIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}
{
  "version": 3,
  "sources": [
    "/Users/joe/git/joe-p/tealscript_migration/smart_contracts/reti_staking_pool/stakingPool.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA0aE;;AAAA;AAAA;AAAA;;AAAA;AA1aF;;;AA0aE;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAxZF;;;AAAA;AAAA;;;AAwZE;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA7BA;;AAAA;AAAA;AAAA;;AAAA;AA9WF;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA8WE;;;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AA7UF;;;AA6UE;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AApTF;;;AAAA;;;AAAA;AAAA;;;AAAA;AAoTE;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AA9RF;;;AA8RE;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AApCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA5EA;;AAAA;AAAA;AAAA;;AAAA;AA9KF;;;AAAA;;;AAAA;AA8KE;;;AAAA;;AAtEA;;AAAA;AAAA;AAAA;;AAAA;AAxGF;;;AAwGE;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA7BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAlCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAjCF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAiCE;;;AAAA;;AAdA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAEI;AADF;;AAaF;;;AAME;;AAAA;;;AAES;;AAAA;AAAP;AACO;;AAAA;AAAP;AAKK;;AAAiB;;AAAjB;AAAP;AA9C0D;;;;;;;;;;;;AA+C1D;;AAAA;AA9CuC;;AA+CvC;;AAAA;AA9CkC;;AA+ClC;;AAAA;AA9CsC;AA+Cd;AAAxB;AA9C2C;AA+Cd;AAA7B;AA9CyC;;AA+CzC;;AAAA;AA9CsC;;AA+CP;;AAA/B;AA9CuC;;AA+Cd;AAAzB;AA5CwC;;AA0ed;;AAA1B;AA3bkC;;AAAgB;AA2bxB;;AA3biB;AAAhB;AA9Cc;;AA8CzC;AAAA;AA7CoD;;AA8CtB;;AAA9B;AA7C6C;;AA8Cd;AAA/B;AA7CyD;;AA8CtB;;AAAnC;;AAjBE;;AAAA;AACA;;AAAA;;;;AA8BJ;;;AAjE0E;AAkEnD;AAAA;;AAAd;AAAP;AAWqB;;;AAAA;AACA;AAAG;;AAAI;AAAJ;AAAxB;;;AACE;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAVoC;;AAUpC;AAAA;;AADqD;AAAL;AAAA;;;;;AA9EsB;AAkF/B;AAAzC;;AAlFwE;AAmFxE;;AAAA;;AAWF;;;;;;;AA9F0E;AA+FpD;AAAA;;AAApB;AAGW;;AAAkB;;AAAtB;AAAP;AACO;;AAAwB;;AAAxB;AAAP;AAGA;;;AAEkC;;AAAQ;;;AAAf;AACF;AAGJ;AAAG;;AAAuB;AAAvB;AAAxB;;;AAI0B;;AAAA;AAAA;AAAA;AAAA;;AAhH8C;AAgH9C;AAAA;AAAA;AAAA;AAAA;;AACV;;;AAAA;AAAA;;AAAV;;AAAA;AAAJ;;;AAIuB;;AAAA;AAAA;;AAAA;AAAU;;AAApB;AACgB;;AAAA;;AAAA;AACK;;AAAA;;AAAA;AAJE;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAnHkC;AA0HpE;;AAAA;;AAAA;AACA;;AAAA;;;;;;AAEE;;;AAAoB;;AAAmC;;AAAnC;;;;;AAApB;;;AACW;;AAAI;AAAJ;;;;;;;AAlBsC;;AAAK;AAAL;AAAA;;;;;AAsBnD;;AAAA;AAAA;AAAJ;AAAA;AAtIyC;AAAA;;AAAA;AAAA;AA4IlC;;AAAA;AAAP;AAIW;;AAFmB;AAAA;;AAAA;AAAA;AAGb;AAHa;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAQX;AAAa;AAAb;AAAnB;AAAA;AAlJwE;AAkJxE;AAAA;;AAAA;AAxJsC;AAAA;AAAA;AAAA;AAyJb;AAAzB;AAzJsC;AAyJtC;AAAA;AAxJ2C;AAAA;AAAA;AAAA;AAyJb;;AAA9B;AAzJ2C;AAyJ3C;AAAA;AAEA;;AAAA;AAcF;;;;;;;;AAUE;;;AAEqB;AAAG;;AAAA;AAAuB;AAAvB;AAAxB;AAI0B;AAAA;AAAA;AAAA;;AApL8C;AAoL9C;AAAA;AAAA;AAAA;AAAA;;AACV;;;AAAA;AAAA;;AAAV;;AAAA;AAAJ;;;;;;;AAEE;;AAAA;;;AAEoC;;AAAA;;AAAA;AAAA;;AAEnB;;AAAA;;AAAA;AAAV;AAAA;;AAAA;AAAA;;AAAA;AAAP;AAE2B;;AAAA;AAAA;AAAA;;AAAA;;AAlMY;AAAA;AAAA;AAAA;AAmMvC;AAAA;AAnMuC;AAmMvC;AAAA;AAIE;;;AAtMmC;AAAA;;AAAA;AAAA;AAsMf;;AAAA;AAApB;;;;AADF;AAMA;AAIgB;;;;;;;;;;;;;;;;;;;;AAJhB;;;AAAA;;;AAAA;AAQA;;AAAA;;;AArNkC;AAAA;AAAA;AAAA;AAuNP;AAAzB;AAvNgC;AAuNhC;AAAA;AAjNkE;AAyNlE;;AAPgC;;AAOhC;AAYF;AAN6B;;AAAA;AAAA;;AAAA;AACK;;AAAA;;AAAA;AACR;;AAAA;;AAAA;AALU;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AA5NgC;AAmOlE;;AAAA;;AAAA;AAEF;;;;;AArDmD;;AAAK;AAAL;AAAA;;;;;AAgEzD;;;;;;AAEqB;;AAEE;AAAG;;AAAA;AAAuB;AAAvB;AAAxB;AAI0B;AAAA;AAAA;AAAA;;AAxP8C;AAwP9C;AAAA;AAAA;AAAA;AAAA;;AACV;;;AAAA;AAAA;;AAAV;;AAAA;AAAJ;;;AACgB;;AAAA;;AAAA;AAAd;;;AACE;AAMmB;;AAAA;AAAA;;AAAA;AACM;;AAAA;;AAAA;AAEH;;AAAA;;AAAA;AALU;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAIZ;AAJY;AAAA;AAAA;AAAA;AAAA;AA/PkC;AAsQpE;;AAAA;;AAAA;AACA;AAnBmD;;AAAK;AAAL;AAAA;;;;;AAgCzD;;;;AACuB;AAAG;;AAAA;AAAuB;AAAvB;AAAxB;AAIM;AAAA;AAAA;AAAA;;AAzRkE;AAyRlE;AAAA;AAAA;AAAsB;;;AAAtB;;AAAA;AAAJ;;;AAzRsE;AA0R7D;;AAAA;AAAA;AAAP;;AAAA;AALmD;;AAAK;AAAL;AAAA;;;;;AAqBzD;;;AAEa;;AAAkB;;AAAtB;AAAP;AAnTkC;AAAA;;AAAA;AAAA;AAoTL;AAAtB;AAAP;AACA;;AAAA;AAGA;;;;;;;;;;;;;AAAA;;;;AAAA;;;AAAA;;AAkBF;;;AApUqC;;;;;;;;;;AAsUnC;;AAAA;;AAcA;;;AArVuC;AAAA;;AAAA;AAAA;AAsVb;AAA1B;AAtVuC;;AAsVvC;AAAA;AAvVsC;;AAwVP;;AAA/B;;AAeF;;;AAWE;AAEa;;AAAA;AAAA;;AAAA;AAAA;AACK;;AAAA;AAAA;;AAAA;AAAA;AACC;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAJnB;;;;AAwFS;;;;;;AAxFT;;AAyBA;AAAA;;;;AAAA;;;AAAA;;AAMF;;;AAGE;AAG8D;;;;;;AAA1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHpB;;;;AAAA;;;AAAA;;AAeF;;;AAxayC;AAAA;;AAAA;AAAA;AAyaG;;AAAA;AAAA;AAAnC;AAAP;AAxakC;AAAA;;AAAA;AAAA;AAyaL;AAAtB;AAAP;AACe;;AAAA;;AAAA;AAAW;AAAnB;AAAP;AAIkB;;;AAAA;AACS;;AAFpB;AAAA;AAAP;AArawC;AAAA;;AAAA;AAAA;AAqd7B;;AApd8B;AAAA;;AAAA;AAAA;AAodrB;;AAAA;AAAhB;AAAJ;;;AAndoD;AAAA;;AAAA;AAAA;AA0dT;AAArC;AAAJ;;;AAxduD;;AA0dlB;;;;;;;;;;;;;;;;;;AAAnC;AA9doC;;AA0ed;;AAA1B;AAhf2C;AAAA;AAAA;AAAA;AAgfjB;;AAPyB;AAAnB;AAAA;;AAAA;AAAA;AAjeoB;;AAielD;AAAA;AAhe2C;;AAieZ;AAA/B;AACkC;;AAAgB;AAreZ;AAAA;;AAAA;AAAA;AAqeK;AAAhB;AApeY;;AAoevC;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 64 200 1000000 30857"
    },
    "14": {
      "op": "bytecblock \"stakers\" \"staked\" \"numStakers\" 0x \"roundsPerDay\" 0x151f7c75 \"poolId\" \"minEntryStake\" \"epochNumber\" \"binRoundStart\" \"stakeAccumulator\" \"validatorId\" \"lastPayout\" 0x00000000000000000000000000000000 \"rewardAccumulator\" \"ewma\" base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)"
    },
    "253": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "255": {
      "op": "bz main_after_if_else@21",
      "stack_out": []
    },
    "258": {
      "op": "pushbytess 0x46f76533 0x59e90aa6 0x3172ca9d 0x8a2e32c4 0xc3f54e57 0x421b5abe 0xf5892d56 0x5cfbb057 0x63f3f28b 0xa7d7969e 0xefc2608d 0xb8680372 0x51ef3b21 0xe38411ae 0x0c2245e1 // method \"updateApplication()void\", method \"createApplication(uint64,uint64,uint64,uint64)void\", method \"gas()void\", method \"initStorage()void\", method \"addStake(address)uint64\", method \"removeStake(address,uint64)void\", method \"claimTokens()void\", method \"getStakerInfo(address)(address,uint64,uint64,uint64,uint64)\", method \"payTokenReward(address,uint64,uint64)void\", method \"updateAlgodVer(byte[])void\", method \"epochBalanceUpdate()void\", method \"goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void\", method \"goOffline()void\", method \"linkToNFD(uint64,byte[])void\", method \"proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)\"",
      "defined_out": [
        "Method(addStake(address)uint64)",
        "Method(claimTokens()void)",
        "Method(createApplication(uint64,uint64,uint64,uint64)void)",
        "Method(epochBalanceUpdate()void)",
        "Method(gas()void)",
        "Method(getStakerInfo(address)(address,uint64,uint64,uint64,uint64))",
        "Method(goOffline()void)",
        "Method(goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void)",
        "Method(initStorage()void)",
        "Method(linkToNFD(uint64,byte[])void)",
        "Method(payTokenReward(address,uint64,uint64)void)",
        "Method(proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64))",
        "Method(removeStake(address,uint64)void)",
        "Method(updateAlgodVer(byte[])void)",
        "Method(updateApplication()void)"
      ],
      "stack_out": [
        "Method(updateApplication()void)",
        "Method(createApplication(uint64,uint64,uint64,uint64)void)",
        "Method(gas()void)",
        "Method(initStorage()void)",
        "Method(addStake(address)uint64)",
        "Method(removeStake(address,uint64)void)",
        "Method(claimTokens()void)",
        "Method(getStakerInfo(address)(address,uint64,uint64,uint64,uint64))",
        "Method(payTokenReward(address,uint64,uint64)void)",
        "Method(updateAlgodVer(byte[])void)",
        "Method(epochBalanceUpdate()void)",
        "Method(goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void)",
        "Method(goOffline()void)",
        "Method(linkToNFD(uint64,byte[])void)",
        "Method(proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64))"
      ]
    },
    "335": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addStake(address)uint64)",
        "Method(claimTokens()void)",
        "Method(createApplication(uint64,uint64,uint64,uint64)void)",
        "Method(epochBalanceUpdate()void)",
        "Method(gas()void)",
        "Method(getStakerInfo(address)(address,uint64,uint64,uint64,uint64))",
        "Method(goOffline()void)",
        "Method(goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void)",
        "Method(initStorage()void)",
        "Method(linkToNFD(uint64,byte[])void)",
        "Method(payTokenReward(address,uint64,uint64)void)",
        "Method(proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64))",
        "Method(removeStake(address,uint64)void)",
        "Method(updateAlgodVer(byte[])void)",
        "Method(updateApplication()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(updateApplication()void)",
        "Method(createApplication(uint64,uint64,uint64,uint64)void)",
        "Method(gas()void)",
        "Method(initStorage()void)",
        "Method(addStake(address)uint64)",
        "Method(removeStake(address,uint64)void)",
        "Method(claimTokens()void)",
        "Method(getStakerInfo(address)(address,uint64,uint64,uint64,uint64))",
        "Method(payTokenReward(address,uint64,uint64)void)",
        "Method(updateAlgodVer(byte[])void)",
        "Method(epochBalanceUpdate()void)",
        "Method(goOnline(byte[],byte[],byte[],uint64,uint64,uint64)void)",
        "Method(goOffline()void)",
        "Method(linkToNFD(uint64,byte[])void)",
        "Method(proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64))",
        "tmp%2#0"
      ]
    },
    "338": {
      "op": "match main_updateApplication_route@3 main_createApplication_route@4 main_gas_route@5 main_initStorage_route@6 main_addStake_route@7 main_removeStake_route@8 main_claimTokens_route@9 main_getStakerInfo_route@10 main_payTokenReward_route@11 main_updateAlgodVer_route@12 main_epochBalanceUpdate_route@13 main_goOnline_route@14 main_goOffline_route@15 main_linkToNFD_route@16 main_proxiedSetTokenPayoutRatio_route@17",
      "stack_out": []
    },
    "370": {
      "block": "main_after_if_else@21",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "371": {
      "op": "return",
      "stack_out": []
    },
    "372": {
      "block": "main_proxiedSetTokenPayoutRatio_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "374": {
      "op": "!",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "375": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "376": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "378": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "379": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64,uint64)%0#0"
      ]
    },
    "382": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.proxiedSetTokenPayoutRatio",
      "op": "callsub proxiedSetTokenPayoutRatio",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "385": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "0x151f7c75"
      ]
    },
    "387": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%82#0"
      ]
    },
    "388": {
      "op": "concat",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "389": {
      "op": "log",
      "stack_out": []
    },
    "390": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "391": {
      "op": "return",
      "stack_out": []
    },
    "392": {
      "block": "main_linkToNFD_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "394": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "395": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "396": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "398": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "399": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "402": {
      "op": "btoi",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "403": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%4#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "reinterpret_Encoded(len+uint8[])%4#0"
      ]
    },
    "406": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.linkToNFD",
      "op": "callsub linkToNFD",
      "stack_out": []
    },
    "409": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "410": {
      "op": "return",
      "stack_out": []
    },
    "411": {
      "block": "main_goOffline_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "413": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "414": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "415": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "417": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "418": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.goOffline",
      "op": "callsub goOffline"
    },
    "421": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "422": {
      "op": "return",
      "stack_out": []
    },
    "423": {
      "block": "main_goOnline_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "425": {
      "op": "!",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "426": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "427": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "429": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "430": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "433": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "436": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "439": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%63#0",
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "tmp%64#0"
      ]
    },
    "442": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%3#0",
        "tmp%63#0",
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "tmp%64#0",
        "reinterpret_Encoded(len+uint8[])%3#0"
      ]
    },
    "445": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0"
      ]
    },
    "448": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint64)%7#0",
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0",
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "451": {
      "op": "btoi",
      "defined_out": [
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0",
        "tmp%66#0"
      ]
    },
    "452": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_Encoded(uint64)%8#0",
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0",
        "tmp%66#0",
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "455": {
      "op": "btoi",
      "defined_out": [
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0"
      ]
    },
    "456": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_Encoded(uint64)%9#0",
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0",
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "459": {
      "op": "btoi",
      "defined_out": [
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "tmp%64#0",
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0",
        "tmp%68#0"
      ]
    },
    "460": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.goOnline",
      "op": "callsub goOnline",
      "stack_out": []
    },
    "463": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "464": {
      "op": "return",
      "stack_out": []
    },
    "465": {
      "block": "main_epochBalanceUpdate_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "467": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "468": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "469": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "471": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "472": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.epochBalanceUpdate",
      "op": "callsub epochBalanceUpdate"
    },
    "475": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "476": {
      "op": "return",
      "stack_out": []
    },
    "477": {
      "block": "main_updateAlgodVer_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "479": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "480": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "481": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "483": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "484": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "487": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.updateAlgodVer",
      "op": "callsub updateAlgodVer",
      "stack_out": []
    },
    "490": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "491": {
      "op": "return",
      "stack_out": []
    },
    "492": {
      "block": "main_payTokenReward_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "494": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "495": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "496": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "498": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "499": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%3#0"
      ]
    },
    "502": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%5#0",
        "reinterpret_Encoded(uint8[32])%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%3#0",
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "505": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%3#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%3#0",
        "tmp%49#0"
      ]
    },
    "506": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%6#0",
        "reinterpret_Encoded(uint8[32])%3#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%3#0",
        "tmp%49#0",
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "509": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%3#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%3#0",
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "510": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.payTokenReward",
      "op": "callsub payTokenReward",
      "stack_out": []
    },
    "513": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "514": {
      "op": "return",
      "stack_out": []
    },
    "515": {
      "block": "main_getStakerInfo_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "517": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "518": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "519": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "521": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "522": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%2#0"
      ]
    },
    "525": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.getStakerInfo",
      "op": "callsub getStakerInfo",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "528": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "0x151f7c75"
      ]
    },
    "530": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%43#0"
      ]
    },
    "531": {
      "op": "concat",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "532": {
      "op": "log",
      "stack_out": []
    },
    "533": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "534": {
      "op": "return",
      "stack_out": []
    },
    "535": {
      "block": "main_claimTokens_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "537": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "538": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "539": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "541": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "542": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.claimTokens",
      "op": "callsub claimTokens"
    },
    "545": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "546": {
      "op": "return",
      "stack_out": []
    },
    "547": {
      "block": "main_removeStake_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "549": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "550": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "551": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "553": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "554": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%1#0"
      ]
    },
    "557": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint8[32])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%1#0",
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "560": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%1#0",
        "tmp%34#0"
      ]
    },
    "561": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.removeStake",
      "op": "callsub removeStake",
      "stack_out": []
    },
    "564": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "565": {
      "op": "return",
      "stack_out": []
    },
    "566": {
      "block": "main_addStake_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "568": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "569": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "570": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "572": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "573": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "576": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.addStake",
      "op": "callsub addStake",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "579": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "580": {
      "op": "bytec 5 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "582": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "583": {
      "op": "concat",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "584": {
      "op": "log",
      "stack_out": []
    },
    "585": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "586": {
      "op": "return",
      "stack_out": []
    },
    "587": {
      "block": "main_initStorage_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "589": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "590": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "591": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "593": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "594": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.initStorage",
      "op": "callsub initStorage"
    },
    "597": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "598": {
      "op": "return",
      "stack_out": []
    },
    "599": {
      "block": "main_gas_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "601": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "602": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "603": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "605": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "606": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "607": {
      "op": "return",
      "stack_out": []
    },
    "608": {
      "block": "main_createApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "610": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "611": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "612": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "614": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "615": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "616": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "619": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "620": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "623": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "624": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "627": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "628": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "631": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "632": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "635": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "636": {
      "op": "return",
      "stack_out": []
    },
    "637": {
      "block": "main_updateApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "639": {
      "op": "pushint 4 // UpdateApplication",
      "defined_out": [
        "UpdateApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "UpdateApplication"
      ]
    },
    "641": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "642": {
      "error": "OnCompletion is not UpdateApplication",
      "op": "assert // OnCompletion is not UpdateApplication",
      "stack_out": []
    },
    "643": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "645": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "646": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.updateApplication",
      "op": "callsub updateApplication"
    },
    "649": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "650": {
      "op": "return",
      "stack_out": []
    },
    "651": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.updateApplication",
      "params": {},
      "block": "updateApplication",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "652": {
      "error": "Temporary: contract is upgradeable but only during testing and only from a development account",
      "op": "assert // Temporary: contract is upgradeable but only during testing and only from a development account",
      "stack_out": []
    },
    "653": {
      "retsub": true,
      "op": "retsub"
    },
    "654": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.createApplication",
      "params": {
        "creatingContractId#0": "uint64",
        "validatorId#0": "uint64",
        "poolId#0": "uint64",
        "minEntryStake#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "657": {
      "op": "frame_dig -4",
      "defined_out": [
        "creatingContractId#0 (copy)"
      ],
      "stack_out": [
        "creatingContractId#0 (copy)"
      ]
    },
    "659": {
      "op": "bnz createApplication_else_body@2",
      "stack_out": []
    },
    "662": {
      "op": "frame_dig -3",
      "defined_out": [
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "validatorId#0 (copy)"
      ]
    },
    "664": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "665": {
      "op": "assert",
      "stack_out": []
    },
    "666": {
      "op": "frame_dig -2",
      "defined_out": [
        "poolId#0 (copy)"
      ],
      "stack_out": [
        "poolId#0 (copy)"
      ]
    },
    "668": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "669": {
      "op": "assert",
      "stack_out": []
    },
    "670": {
      "block": "createApplication_after_if_else@3",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "minEntryStake#0 (copy)"
      ],
      "stack_out": [
        "minEntryStake#0 (copy)"
      ]
    },
    "672": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "minEntryStake#0 (copy)"
      ],
      "stack_out": [
        "minEntryStake#0 (copy)",
        "1000000"
      ]
    },
    "674": {
      "op": ">=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "675": {
      "error": "staking pool must have minimum entry of 1 algo",
      "op": "assert // staking pool must have minimum entry of 1 algo",
      "stack_out": []
    },
    "676": {
      "op": "pushbytes \"creatorApp\"",
      "defined_out": [
        "\"creatorApp\""
      ],
      "stack_out": [
        "\"creatorApp\""
      ]
    },
    "688": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"creatorApp\"",
        "creatingContractId#0 (copy)"
      ],
      "stack_out": [
        "\"creatorApp\"",
        "creatingContractId#0 (copy)"
      ]
    },
    "690": {
      "op": "app_global_put",
      "stack_out": []
    },
    "691": {
      "op": "bytec 11 // \"validatorId\"",
      "defined_out": [
        "\"validatorId\""
      ],
      "stack_out": [
        "\"validatorId\""
      ]
    },
    "693": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"validatorId\"",
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "\"validatorId\"",
        "validatorId#0 (copy)"
      ]
    },
    "695": {
      "op": "app_global_put",
      "stack_out": []
    },
    "696": {
      "op": "bytec 6 // \"poolId\"",
      "defined_out": [
        "\"poolId\""
      ],
      "stack_out": [
        "\"poolId\""
      ]
    },
    "698": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"poolId\"",
        "poolId#0 (copy)"
      ],
      "stack_out": [
        "\"poolId\"",
        "poolId#0 (copy)"
      ]
    },
    "700": {
      "op": "app_global_put",
      "stack_out": []
    },
    "701": {
      "op": "bytec_2 // \"numStakers\"",
      "defined_out": [
        "\"numStakers\""
      ],
      "stack_out": [
        "\"numStakers\""
      ]
    },
    "702": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"numStakers\"",
        "0"
      ],
      "stack_out": [
        "\"numStakers\"",
        "0"
      ]
    },
    "703": {
      "op": "app_global_put",
      "stack_out": []
    },
    "704": {
      "op": "bytec_1 // \"staked\"",
      "defined_out": [
        "\"staked\""
      ],
      "stack_out": [
        "\"staked\""
      ]
    },
    "705": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"staked\"",
        "0"
      ]
    },
    "706": {
      "op": "app_global_put",
      "stack_out": []
    },
    "707": {
      "op": "bytec 7 // \"minEntryStake\"",
      "defined_out": [
        "\"minEntryStake\""
      ],
      "stack_out": [
        "\"minEntryStake\""
      ]
    },
    "709": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"minEntryStake\"",
        "minEntryStake#0 (copy)"
      ]
    },
    "711": {
      "op": "app_global_put",
      "stack_out": []
    },
    "712": {
      "op": "bytec 12 // \"lastPayout\"",
      "defined_out": [
        "\"lastPayout\""
      ],
      "stack_out": [
        "\"lastPayout\""
      ]
    },
    "714": {
      "op": "global Round",
      "defined_out": [
        "\"lastPayout\"",
        "tmp%6#0"
      ],
      "stack_out": [
        "\"lastPayout\"",
        "tmp%6#0"
      ]
    },
    "716": {
      "op": "app_global_put",
      "stack_out": []
    },
    "717": {
      "op": "bytec 8 // \"epochNumber\"",
      "defined_out": [
        "\"epochNumber\""
      ],
      "stack_out": [
        "\"epochNumber\""
      ]
    },
    "719": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"epochNumber\"",
        "0"
      ]
    },
    "720": {
      "op": "app_global_put",
      "stack_out": []
    },
    "721": {
      "op": "bytec 4 // \"roundsPerDay\"",
      "defined_out": [
        "\"roundsPerDay\""
      ],
      "stack_out": [
        "\"roundsPerDay\""
      ]
    },
    "723": {
      "op": "intc 5 // 30857",
      "defined_out": [
        "\"roundsPerDay\"",
        "30857"
      ],
      "stack_out": [
        "\"roundsPerDay\"",
        "30857"
      ]
    },
    "725": {
      "op": "app_global_put",
      "stack_out": []
    },
    "726": {
      "op": "global Round",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "728": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "729": {
      "op": "intc 5 // 30857",
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "30857"
      ]
    },
    "731": {
      "op": "%",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "732": {
      "op": "-",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "733": {
      "op": "bytec 9 // \"binRoundStart\"",
      "defined_out": [
        "\"binRoundStart\"",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "\"binRoundStart\""
      ]
    },
    "735": {
      "op": "swap",
      "stack_out": [
        "\"binRoundStart\"",
        "tmp%10#0"
      ]
    },
    "736": {
      "op": "app_global_put",
      "stack_out": []
    },
    "737": {
      "op": "bytec 10 // \"stakeAccumulator\"",
      "defined_out": [
        "\"stakeAccumulator\""
      ],
      "stack_out": [
        "\"stakeAccumulator\""
      ]
    },
    "739": {
      "op": "bytec 13 // 0x00000000000000000000000000000000",
      "defined_out": [
        "\"stakeAccumulator\"",
        "0x00000000000000000000000000000000"
      ],
      "stack_out": [
        "\"stakeAccumulator\"",
        "0x00000000000000000000000000000000"
      ]
    },
    "741": {
      "op": "app_global_put",
      "stack_out": []
    },
    "742": {
      "op": "bytec 14 // \"rewardAccumulator\"",
      "defined_out": [
        "\"rewardAccumulator\""
      ],
      "stack_out": [
        "\"rewardAccumulator\""
      ]
    },
    "744": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rewardAccumulator\"",
        "0"
      ]
    },
    "745": {
      "op": "app_global_put",
      "stack_out": []
    },
    "746": {
      "op": "bytec 15 // \"ewma\"",
      "defined_out": [
        "\"ewma\""
      ],
      "stack_out": [
        "\"ewma\""
      ]
    },
    "748": {
      "op": "bytec 13 // 0x00000000000000000000000000000000",
      "stack_out": [
        "\"ewma\"",
        "0x00000000000000000000000000000000"
      ]
    },
    "750": {
      "op": "app_global_put",
      "stack_out": []
    },
    "751": {
      "retsub": true,
      "op": "retsub"
    },
    "752": {
      "block": "createApplication_else_body@2",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "validatorId#0 (copy)"
      ]
    },
    "754": {
      "op": "assert",
      "stack_out": []
    },
    "755": {
      "op": "frame_dig -2",
      "defined_out": [
        "poolId#0 (copy)"
      ],
      "stack_out": [
        "poolId#0 (copy)"
      ]
    },
    "757": {
      "op": "assert",
      "stack_out": []
    },
    "758": {
      "op": "b createApplication_after_if_else@3"
    },
    "761": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.initStorage",
      "params": {},
      "block": "initStorage",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "764": {
      "op": "bytec_0 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "\"stakers\""
      ]
    },
    "765": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "766": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "768": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "769": {
      "error": "staking pool already initialized",
      "op": "assert // staking pool already initialized",
      "stack_out": []
    },
    "770": {
      "op": "pushint 12800 // 12800",
      "defined_out": [
        "12800"
      ],
      "stack_out": [
        "12800"
      ]
    },
    "773": {
      "op": "bzero",
      "defined_out": [
        "stakersArray#0"
      ],
      "stack_out": [
        "stakersArray#0"
      ]
    },
    "774": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "stakersArray#0"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0"
      ]
    },
    "775": {
      "block": "initStorage_while_top@1",
      "stack_in": [
        "stakersArray#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "i#0"
      ]
    },
    "777": {
      "op": "intc_3 // 200",
      "defined_out": [
        "200",
        "i#0"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "i#0",
        "200"
      ]
    },
    "778": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "779": {
      "op": "bz initStorage_after_while@3",
      "stack_out": [
        "stakersArray#0",
        "i#0"
      ]
    },
    "782": {
      "op": "frame_dig 1",
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "i#0"
      ]
    },
    "784": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "785": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "i#0",
        "i#0 (copy)",
        "64"
      ]
    },
    "786": {
      "op": "*",
      "defined_out": [
        "aggregate%write_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "i#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "787": {
      "op": "frame_dig 0",
      "defined_out": [
        "aggregate%write_offset%0#0",
        "i#0",
        "stakersArray#0"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "i#0",
        "aggregate%write_offset%0#0",
        "stakersArray#0"
      ]
    },
    "789": {
      "op": "swap",
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "i#0",
        "stakersArray#0",
        "aggregate%write_offset%0#0"
      ]
    },
    "790": {
      "op": "bytec 16 // base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "aggregate%write_offset%0#0",
        "i#0",
        "stakersArray#0"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "i#0",
        "stakersArray#0",
        "aggregate%write_offset%0#0",
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "792": {
      "op": "replace3",
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "i#0",
        "stakersArray#0"
      ]
    },
    "793": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "stakersArray#0"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "i#0"
      ]
    },
    "795": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0",
        "stakersArray#0"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "796": {
      "op": "+",
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "i#0"
      ]
    },
    "797": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0",
        "stakersArray#0"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0"
      ]
    },
    "799": {
      "op": "b initStorage_while_top@1"
    },
    "802": {
      "block": "initStorage_after_while@3",
      "stack_in": [
        "stakersArray#0",
        "i#0"
      ],
      "op": "bytec_0 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "\"stakers\""
      ]
    },
    "803": {
      "op": "intc_3 // 200",
      "defined_out": [
        "\"stakers\"",
        "200"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "\"stakers\"",
        "200"
      ]
    },
    "804": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "{box_create}"
      ]
    },
    "805": {
      "op": "pop",
      "stack_out": [
        "stakersArray#0",
        "i#0"
      ]
    },
    "806": {
      "op": "bytec_0 // \"stakers\"",
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "\"stakers\""
      ]
    },
    "807": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"stakers\"",
        "stakersArray#0"
      ],
      "stack_out": [
        "stakersArray#0",
        "i#0",
        "\"stakers\"",
        "stakersArray#0"
      ]
    },
    "809": {
      "op": "box_put",
      "stack_out": [
        "stakersArray#0",
        "i#0"
      ]
    },
    "810": {
      "retsub": true,
      "op": "retsub"
    },
    "811": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.addStake",
      "params": {
        "staker#0": "bytes"
      },
      "block": "addStake",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "814": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "815": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0"
      ]
    },
    "816": {
      "op": "bytec_3 // \"\"",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0"
      ]
    },
    "817": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11"
      ]
    },
    "818": {
      "op": "bytec_0 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "\"stakers\""
      ]
    },
    "819": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "820": {
      "op": "bury 1",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "maybe_exists%0#0"
      ]
    },
    "822": {
      "error": "staking pool must be initialized first",
      "op": "assert // staking pool must be initialized first",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11"
      ]
    },
    "823": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "tmp%0#0"
      ]
    },
    "825": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "827": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "tmp%2#0"
      ]
    },
    "828": {
      "error": "stake can only be added via the validator contract",
      "op": "assert // stake can only be added via the validator contract",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11"
      ]
    },
    "829": {
      "op": "frame_dig -1",
      "defined_out": [
        "staker#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "staker#0 (copy)"
      ]
    },
    "831": {
      "op": "global ZeroAddress",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "staker#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "staker#0 (copy)",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "833": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "tmp%3#0"
      ]
    },
    "834": {
      "op": "assert",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11"
      ]
    },
    "835": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.checkIfBinClosed",
      "op": "callsub checkIfBinClosed"
    },
    "838": {
      "op": "global Round",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "tmp%4#0"
      ]
    },
    "840": {
      "op": "pushint 320 // 320",
      "defined_out": [
        "320",
        "tmp%4#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "tmp%4#0",
        "320"
      ]
    },
    "843": {
      "op": "+",
      "defined_out": [
        "entryRound#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0"
      ]
    },
    "844": {
      "op": "intc_0 // 0"
    },
    "845": {
      "op": "dup",
      "defined_out": [
        "entryRound#0",
        "firstEmpty#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0"
      ]
    },
    "846": {
      "block": "addStake_while_top@1",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "i#0"
      ]
    },
    "848": {
      "op": "intc_3 // 200",
      "defined_out": [
        "200",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "i#0",
        "200"
      ]
    },
    "849": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "tmp%6#0"
      ]
    },
    "850": {
      "op": "bz addStake_after_while@10",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0"
      ]
    },
    "853": {
      "op": "frame_dig 6",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "i#0"
      ]
    },
    "855": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "i#0",
        "64"
      ]
    },
    "856": {
      "op": "*",
      "defined_out": [
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "box%element_offset%0#0"
      ]
    },
    "857": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "box%element_offset%0#0",
        "box%element_offset%0#0"
      ]
    },
    "858": {
      "op": "frame_bury 2",
      "defined_out": [
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "box%element_offset%0#0"
      ]
    },
    "860": {
      "op": "bytec_0 // \"stakers\"",
      "defined_out": [
        "\"stakers\"",
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "box%element_offset%0#0",
        "\"stakers\""
      ]
    },
    "861": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0"
      ]
    },
    "862": {
      "op": "intc_2 // 64",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0",
        "64"
      ]
    },
    "863": {
      "op": "box_extract",
      "defined_out": [
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "cmpStaker#0"
      ]
    },
    "864": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "cmpStaker#0",
        "cmpStaker#0"
      ]
    },
    "865": {
      "op": "frame_bury 1",
      "defined_out": [
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "cmpStaker#0"
      ]
    },
    "867": {
      "op": "extract 0 32",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "aggregate%extract%0#0"
      ]
    },
    "870": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "aggregate%extract%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "871": {
      "op": "frame_bury 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "aggregate%extract%0#0"
      ]
    },
    "873": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "staker#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "aggregate%extract%0#0",
        "staker#0 (copy)"
      ]
    },
    "875": {
      "op": "==",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "tmp%9#0"
      ]
    },
    "876": {
      "op": "bz addStake_after_if_else@6",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0"
      ]
    },
    "879": {
      "op": "frame_dig 1",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "cmpStaker#0"
      ]
    },
    "881": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "cmpStaker#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "cmpStaker#0",
        "cmpStaker#0 (copy)"
      ]
    },
    "882": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "cmpStaker#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "cmpStaker#0",
        "cmpStaker#0 (copy)",
        "32"
      ]
    },
    "884": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "values%3#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "cmpStaker#0",
        "values%3#0"
      ]
    },
    "885": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "values%3#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "cmpStaker#0",
        "values%3#0",
        "1000000"
      ]
    },
    "887": {
      "op": "+",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "cmpStaker#0",
        "tmp%10#0"
      ]
    },
    "888": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "cmpStaker#0",
        "tmp%10#0",
        "cmpStaker#0 (copy)"
      ]
    },
    "890": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "cmpStaker#0 (copy)",
        "i#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "cmpStaker#0",
        "tmp%10#0",
        "cmpStaker#0 (copy)",
        "40"
      ]
    },
    "892": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "tmp%10#0",
        "values%4#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "cmpStaker#0",
        "tmp%10#0",
        "values%4#0"
      ]
    },
    "893": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "tmp%10#0",
        "values%4#0",
        "cmpStaker#0"
      ]
    },
    "895": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "tmp%10#0",
        "values%4#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "tmp%10#0",
        "values%4#0",
        "cmpStaker#0",
        "48"
      ]
    },
    "897": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "tmp%10#0",
        "values%4#0",
        "values%5#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "tmp%10#0",
        "values%4#0",
        "values%5#0"
      ]
    },
    "898": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "values%4#0",
        "values%5#0",
        "tmp%10#0"
      ]
    },
    "900": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%val_as_bytes%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "values%4#0",
        "values%5#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "values%4#0",
        "values%5#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "901": {
      "op": "frame_dig 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "values%4#0",
        "values%5#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "903": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "values%4#0",
        "values%5#0",
        "aggregate%extract%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "904": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%1#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "values%4#0",
        "values%5#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "values%4#0",
        "values%5#0",
        "aggregate%head%1#0"
      ]
    },
    "905": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "values%5#0",
        "aggregate%head%1#0",
        "values%4#0"
      ]
    },
    "907": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "values%5#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "values%5#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "908": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%2#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "values%5#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "values%5#0",
        "aggregate%head%2#0"
      ]
    },
    "909": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "aggregate%head%2#0",
        "values%5#0"
      ]
    },
    "910": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%2#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "911": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%3#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "aggregate%head%3#0"
      ]
    },
    "912": {
      "op": "frame_dig 4",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%3#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "entryRound#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "aggregate%head%3#0",
        "entryRound#0"
      ]
    },
    "914": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%3#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "entryRound#0",
        "entryRound#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "aggregate%head%3#0",
        "entryRound#0 (copy)",
        "entryRound#0 (copy)"
      ]
    },
    "915": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "aggregate%head%3#0",
        "entryRound#0 (copy)"
      ]
    },
    "917": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%3#0",
        "aggregate%val_as_bytes%3#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "entryRound#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "aggregate%head%3#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "918": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "entryRound#0",
        "i#0",
        "updatedStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "updatedStaker#0"
      ]
    },
    "919": {
      "op": "bytec_0 // \"stakers\"",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "updatedStaker#0",
        "\"stakers\""
      ]
    },
    "920": {
      "op": "frame_dig 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "updatedStaker#0",
        "\"stakers\"",
        "box%element_offset%0#0"
      ]
    },
    "922": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "\"stakers\"",
        "box%element_offset%0#0",
        "updatedStaker#0"
      ]
    },
    "924": {
      "op": "box_replace",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0"
      ]
    },
    "925": {
      "op": "frame_bury 0"
    },
    "927": {
      "retsub": true,
      "op": "retsub"
    },
    "928": {
      "block": "addStake_after_if_else@6",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0"
      ]
    },
    "930": {
      "op": "dup",
      "defined_out": [
        "firstEmpty#0",
        "firstEmpty#11"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "firstEmpty#11"
      ]
    },
    "931": {
      "op": "frame_bury 3",
      "defined_out": [
        "firstEmpty#0",
        "firstEmpty#11"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0"
      ]
    },
    "933": {
      "op": "bnz addStake_after_if_else@9",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0"
      ]
    },
    "936": {
      "op": "frame_dig 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "firstEmpty#0",
        "firstEmpty#11"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "aggregate%extract%0#0"
      ]
    },
    "938": {
      "op": "global ZeroAddress",
      "defined_out": [
        "aggregate%extract%0#0",
        "firstEmpty#0",
        "firstEmpty#11",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "aggregate%extract%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "940": {
      "op": "==",
      "defined_out": [
        "aggregate%extract%0#0",
        "firstEmpty#0",
        "firstEmpty#11",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "tmp%13#0"
      ]
    },
    "941": {
      "op": "frame_dig 5",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "tmp%13#0",
        "firstEmpty#11"
      ]
    },
    "943": {
      "op": "frame_bury 3",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "tmp%13#0"
      ]
    },
    "945": {
      "op": "bz addStake_after_if_else@9",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0"
      ]
    },
    "948": {
      "op": "frame_dig 6",
      "defined_out": [
        "aggregate%extract%0#0",
        "firstEmpty#0",
        "firstEmpty#11",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "i#0"
      ]
    },
    "950": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "951": {
      "op": "+",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#11"
      ]
    },
    "952": {
      "op": "frame_bury 3",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0"
      ]
    },
    "954": {
      "block": "addStake_after_if_else@9",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0"
      ]
    },
    "956": {
      "op": "frame_bury 5",
      "defined_out": [
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0"
      ]
    },
    "958": {
      "op": "frame_dig 6",
      "defined_out": [
        "firstEmpty#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "i#0"
      ]
    },
    "960": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "firstEmpty#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "961": {
      "op": "+",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "i#0"
      ]
    },
    "962": {
      "op": "frame_bury 6",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0"
      ]
    },
    "964": {
      "op": "b addStake_while_top@1"
    },
    "967": {
      "block": "addStake_after_while@10",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0"
      ]
    },
    "969": {
      "op": "dup",
      "defined_out": [
        "firstEmpty#0",
        "firstEmpty#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "firstEmpty#0 (copy)"
      ]
    },
    "970": {
      "op": "!",
      "defined_out": [
        "firstEmpty#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "tmp%16#0"
      ]
    },
    "971": {
      "op": "!",
      "defined_out": [
        "firstEmpty#0",
        "not%tmp%16#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "not%tmp%16#0"
      ]
    },
    "972": {
      "error": "Staking pool full",
      "op": "assert // Staking pool full",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0"
      ]
    },
    "973": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "0"
      ]
    },
    "974": {
      "op": "bytec 7 // \"minEntryStake\"",
      "defined_out": [
        "\"minEntryStake\"",
        "0",
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "0",
        "\"minEntryStake\""
      ]
    },
    "976": {
      "op": "app_global_get_ex",
      "defined_out": [
        "firstEmpty#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "977": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "maybe_value%0#0"
      ]
    },
    "978": {
      "op": "intc 4 // 1000000",
      "defined_out": [
        "1000000",
        "firstEmpty#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "maybe_value%0#0",
        "1000000"
      ]
    },
    "980": {
      "op": "<=",
      "defined_out": [
        "firstEmpty#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "tmp%17#0"
      ]
    },
    "981": {
      "error": "must stake at least the minimum for this pool",
      "op": "assert // must stake at least the minimum for this pool",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0"
      ]
    },
    "982": {
      "op": "intc 4 // 1000000",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "1000000"
      ]
    },
    "984": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "985": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "firstEmpty#0",
        "staker#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "aggregate%val_as_bytes%4#0",
        "staker#0 (copy)"
      ]
    },
    "987": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "staker#0 (copy)",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "988": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%6#0",
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "aggregate%head%6#0"
      ]
    },
    "989": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "aggregate%head%6#0",
        "0"
      ]
    },
    "990": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%5#0",
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "991": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "aggregate%val_as_bytes%5#0",
        "aggregate%head%6#0"
      ]
    },
    "992": {
      "op": "dig 1",
      "defined_out": [
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%5#0",
        "aggregate%val_as_bytes%5#0 (copy)",
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "aggregate%val_as_bytes%5#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%5#0 (copy)"
      ]
    },
    "994": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%7#0",
        "aggregate%val_as_bytes%5#0",
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "aggregate%val_as_bytes%5#0",
        "aggregate%head%7#0"
      ]
    },
    "995": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "aggregate%head%7#0",
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "996": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%8#0",
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "aggregate%head%8#0"
      ]
    },
    "997": {
      "op": "frame_dig 4",
      "defined_out": [
        "aggregate%head%8#0",
        "entryRound#0",
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "aggregate%head%8#0",
        "entryRound#0"
      ]
    },
    "999": {
      "op": "dup",
      "defined_out": [
        "aggregate%head%8#0",
        "entryRound#0",
        "entryRound#0 (copy)",
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "firstEmpty#0",
        "aggregate%head%8#0",
        "entryRound#0 (copy)",
        "entryRound#0 (copy)"
      ]
    },
    "1000": {
      "op": "cover 3",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "firstEmpty#0",
        "aggregate%head%8#0",
        "entryRound#0 (copy)"
      ]
    },
    "1002": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%8#0",
        "aggregate%val_as_bytes%7#0",
        "entryRound#0",
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "firstEmpty#0",
        "aggregate%head%8#0",
        "aggregate%val_as_bytes%7#0"
      ]
    },
    "1003": {
      "op": "concat",
      "defined_out": [
        "entryRound#0",
        "firstEmpty#0",
        "newStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "firstEmpty#0",
        "newStaker#0"
      ]
    },
    "1004": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "newStaker#0",
        "firstEmpty#0"
      ]
    },
    "1005": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "entryRound#0",
        "firstEmpty#0",
        "newStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "newStaker#0",
        "firstEmpty#0",
        "1"
      ]
    },
    "1006": {
      "op": "-",
      "defined_out": [
        "entryRound#0",
        "firstEmpty#0",
        "index%0#0",
        "newStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "newStaker#0",
        "index%0#0"
      ]
    },
    "1007": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "entryRound#0",
        "firstEmpty#0",
        "index%0#0",
        "newStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "newStaker#0",
        "index%0#0",
        "64"
      ]
    },
    "1008": {
      "op": "*",
      "defined_out": [
        "box%element_offset%2#0",
        "entryRound#0",
        "firstEmpty#0",
        "newStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "newStaker#0",
        "box%element_offset%2#0"
      ]
    },
    "1009": {
      "op": "bytec_0 // \"stakers\"",
      "defined_out": [
        "\"stakers\"",
        "box%element_offset%2#0",
        "entryRound#0",
        "firstEmpty#0",
        "newStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "newStaker#0",
        "box%element_offset%2#0",
        "\"stakers\""
      ]
    },
    "1010": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "newStaker#0",
        "\"stakers\"",
        "box%element_offset%2#0"
      ]
    },
    "1011": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "\"stakers\"",
        "box%element_offset%2#0",
        "newStaker#0"
      ]
    },
    "1013": {
      "op": "box_replace",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0"
      ]
    },
    "1014": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "0"
      ]
    },
    "1015": {
      "op": "bytec_2 // \"numStakers\"",
      "defined_out": [
        "\"numStakers\"",
        "0",
        "entryRound#0",
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "0",
        "\"numStakers\""
      ]
    },
    "1016": {
      "op": "app_global_get_ex",
      "defined_out": [
        "entryRound#0",
        "firstEmpty#0",
        "maybe_exists%2#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "maybe_value%1#0",
        "maybe_exists%2#0"
      ]
    },
    "1017": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "maybe_value%1#0"
      ]
    },
    "1018": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "maybe_value%1#0",
        "1"
      ]
    },
    "1019": {
      "op": "+",
      "defined_out": [
        "entryRound#0",
        "firstEmpty#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "tmp%19#0"
      ]
    },
    "1020": {
      "op": "bytec_2 // \"numStakers\"",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "tmp%19#0",
        "\"numStakers\""
      ]
    },
    "1021": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "\"numStakers\"",
        "tmp%19#0"
      ]
    },
    "1022": {
      "op": "app_global_put",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0"
      ]
    },
    "1023": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "0"
      ]
    },
    "1024": {
      "op": "bytec_1 // \"staked\"",
      "defined_out": [
        "\"staked\"",
        "0",
        "entryRound#0",
        "firstEmpty#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "0",
        "\"staked\""
      ]
    },
    "1025": {
      "op": "app_global_get_ex",
      "defined_out": [
        "entryRound#0",
        "firstEmpty#0",
        "maybe_exists%3#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "maybe_value%2#0",
        "maybe_exists%3#0"
      ]
    },
    "1026": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "maybe_value%2#0"
      ]
    },
    "1027": {
      "op": "intc 4 // 1000000",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "maybe_value%2#0",
        "1000000"
      ]
    },
    "1029": {
      "op": "+",
      "defined_out": [
        "entryRound#0",
        "firstEmpty#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "tmp%20#0"
      ]
    },
    "1030": {
      "op": "bytec_1 // \"staked\"",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "tmp%20#0",
        "\"staked\""
      ]
    },
    "1031": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0",
        "\"staked\"",
        "tmp%20#0"
      ]
    },
    "1032": {
      "op": "app_global_put",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "firstEmpty#11",
        "entryRound#0",
        "firstEmpty#0",
        "i#0",
        "entryRound#0"
      ]
    },
    "1033": {
      "op": "frame_bury 0"
    },
    "1035": {
      "retsub": true,
      "op": "retsub"
    },
    "1036": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.removeStake",
      "params": {
        "staker#0": "bytes",
        "amountToUnstake#0": "uint64"
      },
      "block": "removeStake",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1039": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "1040": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0"
      ]
    },
    "1041": {
      "op": "bytec_3 // \"\"",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1"
      ]
    },
    "1042": {
      "op": "dupn 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0"
      ]
    },
    "1044": {
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.checkIfBinClosed",
      "op": "callsub checkIfBinClosed"
    },
    "1047": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1048": {
      "block": "removeStake_while_top@3",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "i#0"
      ]
    },
    "1050": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "1051": {
      "op": "intc_3 // 200",
      "defined_out": [
        "200",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "i#0",
        "i#0 (copy)",
        "200"
      ]
    },
    "1052": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "1053": {
      "error": "account not found",
      "op": "assert // account not found",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "i#0"
      ]
    },
    "1054": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "i#0",
        "64"
      ]
    },
    "1055": {
      "op": "*",
      "defined_out": [
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "box%element_offset%0#0"
      ]
    },
    "1056": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "box%element_offset%0#0",
        "box%element_offset%0#0"
      ]
    },
    "1057": {
      "op": "frame_bury 3",
      "defined_out": [
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "box%element_offset%0#0"
      ]
    },
    "1059": {
      "op": "bytec_0 // \"stakers\"",
      "defined_out": [
        "\"stakers\"",
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "box%element_offset%0#0",
        "\"stakers\""
      ]
    },
    "1060": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0"
      ]
    },
    "1061": {
      "op": "intc_2 // 64",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0",
        "64"
      ]
    },
    "1062": {
      "op": "box_extract",
      "defined_out": [
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0"
      ]
    },
    "1063": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0",
        "cmpStaker#0"
      ]
    },
    "1064": {
      "op": "frame_bury 1",
      "defined_out": [
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0"
      ]
    },
    "1066": {
      "op": "extract 0 32",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "aggregate%extract%0#0"
      ]
    },
    "1069": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "aggregate%extract%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1070": {
      "op": "frame_bury 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "aggregate%extract%0#0"
      ]
    },
    "1072": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "staker#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "aggregate%extract%0#0",
        "staker#0 (copy)"
      ]
    },
    "1074": {
      "op": "==",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "tmp%5#0"
      ]
    },
    "1075": {
      "op": "bz removeStake_after_if_else@18",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1078": {
      "op": "frame_dig -1",
      "defined_out": [
        "actualAmountToUnstake#1",
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "actualAmountToUnstake#1"
      ]
    },
    "1080": {
      "op": "frame_bury 2",
      "defined_out": [
        "actualAmountToUnstake#1",
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1082": {
      "op": "frame_dig -1",
      "defined_out": [
        "actualAmountToUnstake#1",
        "aggregate%extract%0#0",
        "amountToUnstake#0 (copy)",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "amountToUnstake#0 (copy)"
      ]
    },
    "1084": {
      "op": "bnz removeStake_after_if_else@9",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1087": {
      "op": "frame_dig 1",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0"
      ]
    },
    "1089": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "actualAmountToUnstake#1",
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0",
        "32"
      ]
    },
    "1091": {
      "op": "extract_uint64",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "actualAmountToUnstake#1"
      ]
    },
    "1092": {
      "op": "frame_bury 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1094": {
      "block": "removeStake_after_if_else@9",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "cmpStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0"
      ]
    },
    "1096": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "cmpStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0",
        "32"
      ]
    },
    "1098": {
      "op": "extract_uint64",
      "defined_out": [
        "cmpStaker#0",
        "values%3#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%3#0"
      ]
    },
    "1099": {
      "op": "dup",
      "defined_out": [
        "cmpStaker#0",
        "values%3#0",
        "values%3#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%3#0",
        "values%3#0 (copy)"
      ]
    },
    "1100": {
      "op": "frame_dig 2",
      "defined_out": [
        "actualAmountToUnstake#1",
        "cmpStaker#0",
        "values%3#0",
        "values%3#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%3#0",
        "values%3#0 (copy)",
        "actualAmountToUnstake#1"
      ]
    },
    "1102": {
      "op": "dup",
      "defined_out": [
        "actualAmountToUnstake#1",
        "actualAmountToUnstake#1 (copy)",
        "cmpStaker#0",
        "values%3#0",
        "values%3#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%3#0",
        "values%3#0 (copy)",
        "actualAmountToUnstake#1 (copy)",
        "actualAmountToUnstake#1 (copy)"
      ]
    },
    "1103": {
      "op": "cover 3",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "actualAmountToUnstake#1",
        "values%3#0",
        "values%3#0 (copy)",
        "actualAmountToUnstake#1 (copy)"
      ]
    },
    "1105": {
      "op": ">=",
      "defined_out": [
        "actualAmountToUnstake#1",
        "cmpStaker#0",
        "tmp%7#0",
        "values%3#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "actualAmountToUnstake#1",
        "values%3#0",
        "tmp%7#0"
      ]
    },
    "1106": {
      "error": "Insufficient balance",
      "op": "assert // Insufficient balance",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "actualAmountToUnstake#1",
        "values%3#0"
      ]
    },
    "1107": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "actualAmountToUnstake#1",
        "values%3#0",
        "actualAmountToUnstake#1 (copy)"
      ]
    },
    "1109": {
      "op": "-",
      "defined_out": [
        "actualAmountToUnstake#1",
        "cmpStaker#0",
        "newBalance#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "actualAmountToUnstake#1",
        "newBalance#0"
      ]
    },
    "1110": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "actualAmountToUnstake#1",
        "newBalance#0",
        "newBalance#0 (copy)"
      ]
    },
    "1111": {
      "op": "cover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "newBalance#0",
        "actualAmountToUnstake#1",
        "newBalance#0"
      ]
    },
    "1113": {
      "op": "frame_bury 4",
      "defined_out": [
        "actualAmountToUnstake#1",
        "cmpStaker#0",
        "newBalance#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "newBalance#0",
        "actualAmountToUnstake#1"
      ]
    },
    "1115": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "newBalance#0",
        "actualAmountToUnstake#1",
        "0"
      ]
    },
    "1116": {
      "op": "bytec_1 // \"staked\"",
      "defined_out": [
        "\"staked\"",
        "0",
        "actualAmountToUnstake#1",
        "cmpStaker#0",
        "newBalance#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "newBalance#0",
        "actualAmountToUnstake#1",
        "0",
        "\"staked\""
      ]
    },
    "1117": {
      "op": "app_global_get_ex",
      "defined_out": [
        "actualAmountToUnstake#1",
        "cmpStaker#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "newBalance#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "newBalance#0",
        "actualAmountToUnstake#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1118": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "newBalance#0",
        "actualAmountToUnstake#1",
        "maybe_value%0#0"
      ]
    },
    "1119": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "newBalance#0",
        "maybe_value%0#0",
        "actualAmountToUnstake#1"
      ]
    },
    "1120": {
      "op": "-",
      "defined_out": [
        "actualAmountToUnstake#1",
        "cmpStaker#0",
        "newBalance#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "newBalance#0",
        "tmp%9#0"
      ]
    },
    "1121": {
      "op": "bytec_1 // \"staked\"",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "newBalance#0",
        "tmp%9#0",
        "\"staked\""
      ]
    },
    "1122": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "newBalance#0",
        "\"staked\"",
        "tmp%9#0"
      ]
    },
    "1123": {
      "op": "app_global_put",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "newBalance#0"
      ]
    },
    "1124": {
      "op": "bz removeStake_bool_true@11",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1127": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "0"
      ]
    },
    "1128": {
      "op": "bytec 7 // \"minEntryStake\"",
      "defined_out": [
        "\"minEntryStake\"",
        "0",
        "actualAmountToUnstake#1",
        "cmpStaker#0",
        "newBalance#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "0",
        "\"minEntryStake\""
      ]
    },
    "1130": {
      "op": "app_global_get_ex",
      "defined_out": [
        "actualAmountToUnstake#1",
        "cmpStaker#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "newBalance#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1131": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "maybe_value%1#0"
      ]
    },
    "1132": {
      "op": "frame_dig 4",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "maybe_value%1#0",
        "newBalance#0"
      ]
    },
    "1134": {
      "op": "<=",
      "defined_out": [
        "actualAmountToUnstake#1",
        "cmpStaker#0",
        "newBalance#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "tmp%11#0"
      ]
    },
    "1135": {
      "op": "bz removeStake_bool_false@12",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1138": {
      "block": "removeStake_bool_true@11",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "or_result%0#0"
      ]
    },
    "1139": {
      "block": "removeStake_bool_merge@13",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "or_result%0#0"
      ],
      "error": "cannot reduce balance below minimum allowed stake unless all is removed",
      "op": "assert // cannot reduce balance below minimum allowed stake unless all is removed",
      "defined_out": [],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1140": {
      "op": "itxn_begin"
    },
    "1141": {
      "op": "pushbytes \"unstaked\"",
      "defined_out": [
        "\"unstaked\""
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "\"unstaked\""
      ]
    },
    "1151": {
      "op": "itxn_field Note",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1153": {
      "op": "frame_dig -2",
      "defined_out": [
        "staker#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "staker#0 (copy)"
      ]
    },
    "1155": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1157": {
      "op": "frame_dig 2",
      "defined_out": [
        "actualAmountToUnstake#1"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "actualAmountToUnstake#1"
      ]
    },
    "1159": {
      "op": "itxn_field Amount",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1161": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "actualAmountToUnstake#1"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "1"
      ]
    },
    "1162": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1164": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "actualAmountToUnstake#1"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "0"
      ]
    },
    "1165": {
      "op": "itxn_field Fee",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1167": {
      "op": "itxn_submit"
    },
    "1168": {
      "op": "frame_dig 4",
      "defined_out": [
        "actualAmountToUnstake#1",
        "newBalance#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "newBalance#0"
      ]
    },
    "1170": {
      "op": "bnz removeStake_else_body@16",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1173": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "0"
      ]
    },
    "1174": {
      "op": "bytec_2 // \"numStakers\"",
      "defined_out": [
        "\"numStakers\"",
        "0",
        "actualAmountToUnstake#1",
        "newBalance#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "0",
        "\"numStakers\""
      ]
    },
    "1175": {
      "op": "app_global_get_ex",
      "defined_out": [
        "actualAmountToUnstake#1",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "newBalance#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1176": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "maybe_value%2#0"
      ]
    },
    "1177": {
      "op": "intc_1 // 1",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "1178": {
      "op": "-",
      "defined_out": [
        "actualAmountToUnstake#1",
        "newBalance#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "tmp%13#0"
      ]
    },
    "1179": {
      "op": "bytec_2 // \"numStakers\"",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "tmp%13#0",
        "\"numStakers\""
      ]
    },
    "1180": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "\"numStakers\"",
        "tmp%13#0"
      ]
    },
    "1181": {
      "op": "app_global_put",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1182": {
      "op": "bytec_0 // \"stakers\"",
      "defined_out": [
        "\"stakers\"",
        "actualAmountToUnstake#1",
        "newBalance#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "\"stakers\""
      ]
    },
    "1183": {
      "op": "frame_dig 3",
      "defined_out": [
        "\"stakers\"",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0"
      ]
    },
    "1185": {
      "op": "bytec 16 // base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "\"stakers\"",
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0",
        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "1187": {
      "op": "box_replace",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1188": {
      "retsub": true,
      "op": "retsub"
    },
    "1189": {
      "block": "removeStake_else_body@16",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "cmpStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0"
      ]
    },
    "1191": {
      "op": "dup",
      "defined_out": [
        "cmpStaker#0",
        "cmpStaker#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0",
        "cmpStaker#0 (copy)"
      ]
    },
    "1192": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "cmpStaker#0",
        "cmpStaker#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0",
        "cmpStaker#0 (copy)",
        "40"
      ]
    },
    "1194": {
      "op": "extract_uint64",
      "defined_out": [
        "cmpStaker#0",
        "values%6#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0",
        "values%6#0"
      ]
    },
    "1195": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0",
        "values%6#0",
        "cmpStaker#0 (copy)"
      ]
    },
    "1197": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "cmpStaker#0",
        "cmpStaker#0 (copy)",
        "values%6#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0",
        "values%6#0",
        "cmpStaker#0 (copy)",
        "48"
      ]
    },
    "1199": {
      "op": "extract_uint64",
      "defined_out": [
        "cmpStaker#0",
        "values%6#0",
        "values%7#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "cmpStaker#0",
        "values%6#0",
        "values%7#0"
      ]
    },
    "1200": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%6#0",
        "values%7#0",
        "cmpStaker#0"
      ]
    },
    "1202": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "cmpStaker#0",
        "values%6#0",
        "values%7#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%6#0",
        "values%7#0",
        "cmpStaker#0",
        "56"
      ]
    },
    "1204": {
      "op": "extract_uint64",
      "defined_out": [
        "cmpStaker#0",
        "values%6#0",
        "values%7#0",
        "values%8#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%6#0",
        "values%7#0",
        "values%8#0"
      ]
    },
    "1205": {
      "op": "frame_dig 4",
      "defined_out": [
        "cmpStaker#0",
        "newBalance#0",
        "values%6#0",
        "values%7#0",
        "values%8#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%6#0",
        "values%7#0",
        "values%8#0",
        "newBalance#0"
      ]
    },
    "1207": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%4#0",
        "cmpStaker#0",
        "newBalance#0",
        "values%6#0",
        "values%7#0",
        "values%8#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%6#0",
        "values%7#0",
        "values%8#0",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "1208": {
      "op": "frame_dig 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%val_as_bytes%4#0",
        "cmpStaker#0",
        "newBalance#0",
        "values%6#0",
        "values%7#0",
        "values%8#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%6#0",
        "values%7#0",
        "values%8#0",
        "aggregate%val_as_bytes%4#0",
        "aggregate%extract%0#0"
      ]
    },
    "1210": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%6#0",
        "values%7#0",
        "values%8#0",
        "aggregate%extract%0#0",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "1211": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%6#0",
        "cmpStaker#0",
        "newBalance#0",
        "values%6#0",
        "values%7#0",
        "values%8#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%6#0",
        "values%7#0",
        "values%8#0",
        "aggregate%head%6#0"
      ]
    },
    "1212": {
      "op": "uncover 3",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%7#0",
        "values%8#0",
        "aggregate%head%6#0",
        "values%6#0"
      ]
    },
    "1214": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%5#0",
        "cmpStaker#0",
        "newBalance#0",
        "values%7#0",
        "values%8#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%7#0",
        "values%8#0",
        "aggregate%head%6#0",
        "aggregate%val_as_bytes%5#0"
      ]
    },
    "1215": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%7#0",
        "cmpStaker#0",
        "newBalance#0",
        "values%7#0",
        "values%8#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%7#0",
        "values%8#0",
        "aggregate%head%7#0"
      ]
    },
    "1216": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%8#0",
        "aggregate%head%7#0",
        "values%7#0"
      ]
    },
    "1218": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%7#0",
        "aggregate%val_as_bytes%6#0",
        "cmpStaker#0",
        "newBalance#0",
        "values%8#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%8#0",
        "aggregate%head%7#0",
        "aggregate%val_as_bytes%6#0"
      ]
    },
    "1219": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%8#0",
        "cmpStaker#0",
        "newBalance#0",
        "values%8#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "values%8#0",
        "aggregate%head%8#0"
      ]
    },
    "1220": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "aggregate%head%8#0",
        "values%8#0"
      ]
    },
    "1221": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%8#0",
        "aggregate%val_as_bytes%7#0",
        "cmpStaker#0",
        "newBalance#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "aggregate%head%8#0",
        "aggregate%val_as_bytes%7#0"
      ]
    },
    "1222": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "newBalance#0",
        "updatedStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "updatedStaker#0"
      ]
    },
    "1223": {
      "op": "bytec_0 // \"stakers\"",
      "defined_out": [
        "\"stakers\"",
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "newBalance#0",
        "updatedStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "updatedStaker#0",
        "\"stakers\""
      ]
    },
    "1224": {
      "op": "frame_dig 3",
      "defined_out": [
        "\"stakers\"",
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "newBalance#0",
        "updatedStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "updatedStaker#0",
        "\"stakers\"",
        "box%element_offset%0#0"
      ]
    },
    "1226": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0",
        "updatedStaker#0"
      ]
    },
    "1228": {
      "op": "box_replace",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1229": {
      "retsub": true,
      "op": "retsub"
    },
    "1230": {
      "block": "removeStake_bool_false@12",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "or_result%0#0"
      ]
    },
    "1231": {
      "op": "b removeStake_bool_merge@13"
    },
    "1234": {
      "block": "removeStake_after_if_else@18",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "i#0"
      ]
    },
    "1236": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1237": {
      "op": "+",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0",
        "i#0"
      ]
    },
    "1238": {
      "op": "frame_bury 5",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "actualAmountToUnstake#1",
        "box%element_offset%0#0",
        "newBalance#0",
        "i#0"
      ]
    },
    "1240": {
      "op": "b removeStake_while_top@3"
    },
    "1243": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.claimTokens",
      "params": {},
      "block": "claimTokens",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1246": {
      "op": "intc_0 // 0",
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "1247": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0"
      ]
    },
    "1248": {
      "op": "bytec_3 // \"\"",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0"
      ]
    },
    "1249": {
      "op": "txn Sender"
    },
    "1251": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0",
        "staker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0"
      ]
    },
    "1252": {
      "block": "claimTokens_while_top@1",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "i#0"
      ]
    },
    "1254": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "1255": {
      "op": "intc_3 // 200",
      "defined_out": [
        "200",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "i#0",
        "i#0 (copy)",
        "200"
      ]
    },
    "1256": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "1257": {
      "error": "account not found",
      "op": "assert // account not found",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "i#0"
      ]
    },
    "1258": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "i#0",
        "64"
      ]
    },
    "1259": {
      "op": "*",
      "defined_out": [
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "box%element_offset%0#0"
      ]
    },
    "1260": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "box%element_offset%0#0",
        "box%element_offset%0#0"
      ]
    },
    "1261": {
      "op": "frame_bury 2",
      "defined_out": [
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "box%element_offset%0#0"
      ]
    },
    "1263": {
      "op": "bytec_0 // \"stakers\"",
      "defined_out": [
        "\"stakers\"",
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "box%element_offset%0#0",
        "\"stakers\""
      ]
    },
    "1264": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0"
      ]
    },
    "1265": {
      "op": "intc_2 // 64",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0",
        "64"
      ]
    },
    "1266": {
      "op": "box_extract",
      "defined_out": [
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "cmpStaker#0"
      ]
    },
    "1267": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "cmpStaker#0",
        "cmpStaker#0"
      ]
    },
    "1268": {
      "op": "frame_bury 1",
      "defined_out": [
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "cmpStaker#0"
      ]
    },
    "1270": {
      "op": "extract 0 32",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "aggregate%extract%0#0"
      ]
    },
    "1273": {
      "op": "dup",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "aggregate%extract%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1274": {
      "op": "frame_bury 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "aggregate%extract%0#0"
      ]
    },
    "1276": {
      "op": "frame_dig 3",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "staker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "aggregate%extract%0#0",
        "staker#0"
      ]
    },
    "1278": {
      "op": "==",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "staker#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "tmp%4#0"
      ]
    },
    "1279": {
      "op": "bz claimTokens_after_if_else@8",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0"
      ]
    },
    "1282": {
      "op": "frame_dig 1",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "cmpStaker#0"
      ]
    },
    "1284": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "staker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "cmpStaker#0",
        "48"
      ]
    },
    "1286": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "i#0",
        "staker#0",
        "values%2#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%2#0"
      ]
    },
    "1287": {
      "op": "bnz claimTokens_after_if_else@7",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0"
      ]
    },
    "1290": {
      "retsub": true,
      "op": "retsub"
    },
    "1291": {
      "block": "claimTokens_after_if_else@7",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "cmpStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "cmpStaker#0"
      ]
    },
    "1293": {
      "op": "dup",
      "defined_out": [
        "cmpStaker#0",
        "cmpStaker#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "cmpStaker#0",
        "cmpStaker#0 (copy)"
      ]
    },
    "1294": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "cmpStaker#0",
        "cmpStaker#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "cmpStaker#0",
        "cmpStaker#0 (copy)",
        "32"
      ]
    },
    "1296": {
      "op": "extract_uint64",
      "defined_out": [
        "cmpStaker#0",
        "values%4#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "cmpStaker#0",
        "values%4#0"
      ]
    },
    "1297": {
      "op": "dig 1",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "cmpStaker#0",
        "values%4#0",
        "cmpStaker#0 (copy)"
      ]
    },
    "1299": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "cmpStaker#0",
        "cmpStaker#0 (copy)",
        "values%4#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "cmpStaker#0",
        "values%4#0",
        "cmpStaker#0 (copy)",
        "40"
      ]
    },
    "1301": {
      "op": "extract_uint64",
      "defined_out": [
        "cmpStaker#0",
        "values%4#0",
        "values%5#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "cmpStaker#0",
        "values%4#0",
        "values%5#0"
      ]
    },
    "1302": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%4#0",
        "values%5#0",
        "cmpStaker#0"
      ]
    },
    "1304": {
      "op": "pushint 56 // 56",
      "defined_out": [
        "56",
        "cmpStaker#0",
        "values%4#0",
        "values%5#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%4#0",
        "values%5#0",
        "cmpStaker#0",
        "56"
      ]
    },
    "1306": {
      "op": "extract_uint64",
      "defined_out": [
        "cmpStaker#0",
        "values%4#0",
        "values%5#0",
        "values%6#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%4#0",
        "values%5#0",
        "values%6#0"
      ]
    },
    "1307": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%5#0",
        "values%6#0",
        "values%4#0"
      ]
    },
    "1309": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "cmpStaker#0",
        "values%5#0",
        "values%6#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%5#0",
        "values%6#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1310": {
      "op": "frame_dig 0",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%val_as_bytes%0#0",
        "cmpStaker#0",
        "values%5#0",
        "values%6#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%5#0",
        "values%6#0",
        "aggregate%val_as_bytes%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1312": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%5#0",
        "values%6#0",
        "aggregate%extract%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1313": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%1#0",
        "cmpStaker#0",
        "values%5#0",
        "values%6#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%5#0",
        "values%6#0",
        "aggregate%head%1#0"
      ]
    },
    "1314": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%6#0",
        "aggregate%head%1#0",
        "values%5#0"
      ]
    },
    "1316": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0",
        "cmpStaker#0",
        "values%6#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%6#0",
        "aggregate%head%1#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1317": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%2#0",
        "cmpStaker#0",
        "values%6#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%6#0",
        "aggregate%head%2#0"
      ]
    },
    "1318": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%extract%0#0",
        "aggregate%head%2#0",
        "cmpStaker#0",
        "values%6#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%6#0",
        "aggregate%head%2#0",
        "0"
      ]
    },
    "1319": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%2#0",
        "cmpStaker#0",
        "values%6#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%6#0",
        "aggregate%head%2#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "1320": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%3#0",
        "cmpStaker#0",
        "values%6#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "values%6#0",
        "aggregate%head%3#0"
      ]
    },
    "1321": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "aggregate%head%3#0",
        "values%6#0"
      ]
    },
    "1322": {
      "op": "itob",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%head%3#0",
        "aggregate%val_as_bytes%3#0",
        "cmpStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "aggregate%head%3#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "1323": {
      "op": "concat",
      "defined_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "updatedStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "updatedStaker#0"
      ]
    },
    "1324": {
      "op": "bytec_0 // \"stakers\"",
      "defined_out": [
        "\"stakers\"",
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "updatedStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "updatedStaker#0",
        "\"stakers\""
      ]
    },
    "1325": {
      "op": "frame_dig 2",
      "defined_out": [
        "\"stakers\"",
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "cmpStaker#0",
        "updatedStaker#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "updatedStaker#0",
        "\"stakers\"",
        "box%element_offset%0#0"
      ]
    },
    "1327": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0",
        "updatedStaker#0"
      ]
    },
    "1329": {
      "op": "box_replace",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0"
      ]
    },
    "1330": {
      "retsub": true,
      "op": "retsub"
    },
    "1331": {
      "block": "claimTokens_after_if_else@8",
      "stack_in": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "i#0"
      ]
    },
    "1333": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1334": {
      "op": "+",
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0",
        "i#0"
      ]
    },
    "1335": {
      "op": "frame_bury 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "cmpStaker#0",
        "box%element_offset%0#0",
        "staker#0",
        "i#0"
      ]
    },
    "1337": {
      "op": "b claimTokens_while_top@1"
    },
    "1340": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.getStakerInfo",
      "params": {
        "staker#0": "bytes"
      },
      "block": "getStakerInfo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1343": {
      "op": "bytec_3 // \"\"",
      "stack_out": [
        "box%element_offset%0#0"
      ]
    },
    "1344": {
      "op": "intc_0 // 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0"
      ]
    },
    "1345": {
      "block": "getStakerInfo_while_top@1",
      "stack_in": [
        "box%element_offset%0#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "i#0"
      ]
    },
    "1347": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "1348": {
      "op": "intc_3 // 200",
      "defined_out": [
        "200",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "i#0",
        "i#0 (copy)",
        "200"
      ]
    },
    "1349": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "1350": {
      "error": "account not found",
      "op": "assert // account not found",
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "i#0"
      ]
    },
    "1351": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "i#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "i#0",
        "64"
      ]
    },
    "1352": {
      "op": "*",
      "defined_out": [
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "box%element_offset%0#0"
      ]
    },
    "1353": {
      "op": "dup",
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "box%element_offset%0#0",
        "box%element_offset%0#0"
      ]
    },
    "1354": {
      "op": "frame_bury 0",
      "defined_out": [
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "box%element_offset%0#0"
      ]
    },
    "1356": {
      "op": "bytec_0 // \"stakers\"",
      "defined_out": [
        "\"stakers\"",
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "box%element_offset%0#0",
        "\"stakers\""
      ]
    },
    "1357": {
      "op": "swap",
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0"
      ]
    },
    "1358": {
      "op": "intc_2 // 64",
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0",
        "64"
      ]
    },
    "1359": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%0#0",
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "box%box_extract%0#0"
      ]
    },
    "1360": {
      "op": "extract 0 32",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "aggregate%extract%0#0"
      ]
    },
    "1363": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%extract%0#0",
        "box%element_offset%0#0",
        "i#0",
        "staker#0 (copy)"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "aggregate%extract%0#0",
        "staker#0 (copy)"
      ]
    },
    "1365": {
      "op": "==",
      "defined_out": [
        "box%element_offset%0#0",
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "1366": {
      "op": "bz getStakerInfo_after_if_else@6",
      "stack_out": [
        "box%element_offset%0#0",
        "i#0"
      ]
    },
    "1369": {
      "op": "bytec_0 // \"stakers\"",
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "\"stakers\""
      ]
    },
    "1370": {
      "op": "frame_dig 0",
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0"
      ]
    },
    "1372": {
      "op": "intc_2 // 64",
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "\"stakers\"",
        "box%element_offset%0#0",
        "64"
      ]
    },
    "1373": {
      "op": "box_extract",
      "defined_out": [
        "box%box_extract%1#0",
        "box%element_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "box%box_extract%1#0"
      ]
    },
    "1374": {
      "op": "frame_bury 0"
    },
    "1376": {
      "retsub": true,
      "op": "retsub"
    },
    "1377": {
      "block": "getStakerInfo_after_if_else@6",
      "stack_in": [
        "box%element_offset%0#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "i#0"
      ]
    },
    "1379": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1380": {
      "op": "+",
      "stack_out": [
        "box%element_offset%0#0",
        "i#0",
        "i#0"
      ]
    },
    "1381": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "box%element_offset%0#0",
        "i#0"
      ]
    },
    "1383": {
      "op": "b getStakerInfo_while_top@1"
    },
    "1386": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.payTokenReward",
      "params": {
        "staker#0": "bytes",
        "rewardToken#0": "uint64",
        "amountToSend#0": "uint64"
      },
      "block": "payTokenReward",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1389": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1391": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1393": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1394": {
      "error": "this can only be called via the validator contract",
      "op": "assert // this can only be called via the validator contract",
      "stack_out": []
    },
    "1395": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1396": {
      "op": "bytec 6 // \"poolId\"",
      "defined_out": [
        "\"poolId\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"poolId\""
      ]
    },
    "1398": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1399": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1400": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1401": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1402": {
      "error": "must be pool 1 in order to be called to pay out token rewards",
      "op": "assert // must be pool 1 in order to be called to pay out token rewards",
      "stack_out": []
    },
    "1403": {
      "op": "frame_dig -2",
      "defined_out": [
        "rewardToken#0 (copy)"
      ],
      "stack_out": [
        "rewardToken#0 (copy)"
      ]
    },
    "1405": {
      "error": "can only claim token rewards from validator that has them",
      "op": "assert // can only claim token rewards from validator that has them",
      "stack_out": []
    },
    "1406": {
      "op": "itxn_begin"
    },
    "1407": {
      "op": "frame_dig -1",
      "defined_out": [
        "amountToSend#0 (copy)"
      ],
      "stack_out": [
        "amountToSend#0 (copy)"
      ]
    },
    "1409": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "1411": {
      "op": "frame_dig -3",
      "defined_out": [
        "staker#0 (copy)"
      ],
      "stack_out": [
        "staker#0 (copy)"
      ]
    },
    "1413": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1415": {
      "op": "frame_dig -2",
      "stack_out": [
        "rewardToken#0 (copy)"
      ]
    },
    "1417": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "1419": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1421": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1423": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1424": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1426": {
      "op": "itxn_submit"
    },
    "1427": {
      "retsub": true,
      "op": "retsub"
    },
    "1428": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.updateAlgodVer",
      "params": {
        "algodVer#0": "bytes"
      },
      "block": "updateAlgodVer",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1431": {
      "op": "pushbytes \"algodVer\"",
      "defined_out": [
        "\"algodVer\""
      ],
      "stack_out": [
        "\"algodVer\""
      ]
    },
    "1441": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"algodVer\"",
        "algodVer#0 (copy)"
      ],
      "stack_out": [
        "\"algodVer\"",
        "algodVer#0 (copy)"
      ]
    },
    "1443": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1444": {
      "retsub": true,
      "op": "retsub"
    },
    "1445": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.epochBalanceUpdate",
      "params": {},
      "block": "epochBalanceUpdate",
      "stack_in": [],
      "callsub": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.checkIfBinClosed",
      "op": "callsub checkIfBinClosed"
    },
    "1448": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1449": {
      "op": "bytec 8 // \"epochNumber\"",
      "defined_out": [
        "\"epochNumber\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"epochNumber\""
      ]
    },
    "1451": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1452": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1453": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1454": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1455": {
      "op": "bytec 8 // \"epochNumber\"",
      "stack_out": [
        "tmp%0#0",
        "\"epochNumber\""
      ]
    },
    "1457": {
      "op": "swap",
      "stack_out": [
        "\"epochNumber\"",
        "tmp%0#0"
      ]
    },
    "1458": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1459": {
      "op": "bytec 12 // \"lastPayout\"",
      "defined_out": [
        "\"lastPayout\""
      ],
      "stack_out": [
        "\"lastPayout\""
      ]
    },
    "1461": {
      "op": "global Round",
      "defined_out": [
        "\"lastPayout\"",
        "tmp%1#0"
      ],
      "stack_out": [
        "\"lastPayout\"",
        "tmp%1#0"
      ]
    },
    "1463": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1464": {
      "retsub": true,
      "op": "retsub"
    },
    "1465": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.goOnline",
      "params": {
        "votePK#0": "bytes",
        "selectionPK#0": "bytes",
        "stateProofPK#0": "bytes",
        "voteFirst#0": "uint64",
        "voteLast#0": "uint64",
        "voteKeyDilution#0": "uint64"
      },
      "block": "goOnline",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "1468": {
      "op": "itxn_begin"
    },
    "1469": {
      "op": "frame_dig -6",
      "defined_out": [
        "votePK#0 (copy)"
      ],
      "stack_out": [
        "votePK#0 (copy)"
      ]
    },
    "1471": {
      "op": "len",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1472": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "32"
      ]
    },
    "1474": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1475": {
      "error": "Length must be 32",
      "op": "assert // Length must be 32",
      "stack_out": []
    },
    "1476": {
      "op": "frame_dig -5",
      "defined_out": [
        "selectionPK#0 (copy)"
      ],
      "stack_out": [
        "selectionPK#0 (copy)"
      ]
    },
    "1478": {
      "op": "len",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1479": {
      "op": "pushint 32 // 32",
      "stack_out": [
        "tmp%4#0",
        "32"
      ]
    },
    "1481": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1482": {
      "error": "Length must be 32",
      "op": "assert // Length must be 32",
      "stack_out": []
    },
    "1483": {
      "op": "frame_dig -4",
      "defined_out": [
        "stateProofPK#0 (copy)"
      ],
      "stack_out": [
        "stateProofPK#0 (copy)"
      ]
    },
    "1485": {
      "op": "len",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1486": {
      "op": "intc_2 // 64",
      "defined_out": [
        "64",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "64"
      ]
    },
    "1487": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1488": {
      "error": "Length must be 64",
      "op": "assert // Length must be 64",
      "stack_out": []
    },
    "1489": {
      "op": "frame_dig -1",
      "defined_out": [
        "voteKeyDilution#0 (copy)"
      ],
      "stack_out": [
        "voteKeyDilution#0 (copy)"
      ]
    },
    "1491": {
      "op": "itxn_field VoteKeyDilution",
      "stack_out": []
    },
    "1493": {
      "op": "frame_dig -2",
      "defined_out": [
        "voteLast#0 (copy)"
      ],
      "stack_out": [
        "voteLast#0 (copy)"
      ]
    },
    "1495": {
      "op": "itxn_field VoteLast",
      "stack_out": []
    },
    "1497": {
      "op": "frame_dig -3",
      "defined_out": [
        "voteFirst#0 (copy)"
      ],
      "stack_out": [
        "voteFirst#0 (copy)"
      ]
    },
    "1499": {
      "op": "itxn_field VoteFirst",
      "stack_out": []
    },
    "1501": {
      "op": "frame_dig -4",
      "stack_out": [
        "stateProofPK#0 (copy)"
      ]
    },
    "1503": {
      "op": "itxn_field StateProofPK",
      "stack_out": []
    },
    "1505": {
      "op": "frame_dig -5",
      "stack_out": [
        "selectionPK#0 (copy)"
      ]
    },
    "1507": {
      "op": "itxn_field SelectionPK",
      "stack_out": []
    },
    "1509": {
      "op": "frame_dig -6",
      "stack_out": [
        "votePK#0 (copy)"
      ]
    },
    "1511": {
      "op": "itxn_field VotePK",
      "stack_out": []
    },
    "1513": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "1515": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1517": {
      "op": "pushint 2000000 // 2000000",
      "defined_out": [
        "2000000"
      ],
      "stack_out": [
        "2000000"
      ]
    },
    "1521": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1523": {
      "op": "itxn_submit"
    },
    "1524": {
      "retsub": true,
      "op": "retsub"
    },
    "1525": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.goOffline",
      "params": {},
      "block": "goOffline",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "1526": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "1528": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1530": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1531": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1533": {
      "op": "itxn_submit"
    },
    "1534": {
      "retsub": true,
      "op": "retsub"
    },
    "1535": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.linkToNFD",
      "params": {
        "nfdAppId#0": "uint64",
        "nfdName#0": "bytes"
      },
      "block": "linkToNFD",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1538": {
      "op": "itxn_begin"
    },
    "1539": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1541": {
      "op": "frame_dig -2",
      "defined_out": [
        "nfdAppId#0 (copy)",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "nfdAppId#0 (copy)"
      ]
    },
    "1543": {
      "op": "itxn_field Applications",
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1545": {
      "op": "pushbytes \"verify_nfd_addr\"",
      "defined_out": [
        "\"verify_nfd_addr\"",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "\"verify_nfd_addr\""
      ]
    },
    "1562": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1564": {
      "op": "frame_dig -1",
      "defined_out": [
        "nfdName#0 (copy)",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "nfdName#0 (copy)"
      ]
    },
    "1566": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1568": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "1570": {
      "op": "frame_dig -2",
      "stack_out": [
        "nfdAppId#0 (copy)"
      ]
    },
    "1572": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "1574": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6"
      ],
      "stack_out": [
        "6"
      ]
    },
    "1576": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1578": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1579": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1581": {
      "op": "itxn_submit"
    },
    "1582": {
      "retsub": true,
      "op": "retsub"
    },
    "1583": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.proxiedSetTokenPayoutRatio",
      "params": {
        "poolKey#0": "bytes"
      },
      "block": "proxiedSetTokenPayoutRatio",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1586": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1587": {
      "op": "bytec 11 // \"validatorId\"",
      "defined_out": [
        "\"validatorId\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"validatorId\""
      ]
    },
    "1589": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1590": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1591": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "poolKey#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "poolKey#0 (copy)"
      ]
    },
    "1593": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "poolKey#0 (copy)",
        "0"
      ]
    },
    "1594": {
      "op": "extract_uint64",
      "defined_out": [
        "maybe_value%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "values%0#0"
      ]
    },
    "1595": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1596": {
      "error": "caller must be part of same validator set!",
      "op": "assert // caller must be part of same validator set!",
      "stack_out": []
    },
    "1597": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1598": {
      "op": "bytec 6 // \"poolId\"",
      "defined_out": [
        "\"poolId\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"poolId\""
      ]
    },
    "1600": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1601": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1602": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "1603": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1604": {
      "error": "callee must be pool 1",
      "op": "assert // callee must be pool 1",
      "stack_out": []
    },
    "1605": {
      "op": "frame_dig -1",
      "stack_out": [
        "poolKey#0 (copy)"
      ]
    },
    "1607": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "poolKey#0 (copy)"
      ],
      "stack_out": [
        "poolKey#0 (copy)",
        "8"
      ]
    },
    "1609": {
      "op": "extract_uint64",
      "defined_out": [
        "values%1#0"
      ],
      "stack_out": [
        "values%1#0"
      ]
    },
    "1610": {
      "op": "intc_1 // 1",
      "stack_out": [
        "values%1#0",
        "1"
      ]
    },
    "1611": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1612": {
      "error": "caller must NOT be pool 1",
      "op": "assert // caller must NOT be pool 1",
      "stack_out": []
    },
    "1613": {
      "op": "pushint 192 // 192",
      "defined_out": [
        "192"
      ],
      "stack_out": [
        "192"
      ]
    },
    "1616": {
      "op": "bzero",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1617": {
      "op": "global Round",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1619": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1620": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "1621": {
      "retsub": true,
      "op": "retsub"
    },
    "1622": {
      "subroutine": "smart_contracts/reti_staking_pool/stakingPool.algo.ts::StakingPool.checkIfBinClosed",
      "params": {},
      "block": "checkIfBinClosed",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1623": {
      "op": "bytec 4 // \"roundsPerDay\"",
      "defined_out": [
        "\"roundsPerDay\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"roundsPerDay\""
      ]
    },
    "1625": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentBinSize#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "currentBinSize#0",
        "maybe_exists%0#0"
      ]
    },
    "1626": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentBinSize#0"
      ]
    },
    "1627": {
      "op": "global Round",
      "defined_out": [
        "currentBinSize#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "currentBinSize#0",
        "tmp%0#0"
      ]
    },
    "1629": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentBinSize#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1630": {
      "op": "bytec 9 // \"binRoundStart\"",
      "defined_out": [
        "\"binRoundStart\"",
        "0",
        "currentBinSize#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "currentBinSize#0",
        "tmp%0#0",
        "0",
        "\"binRoundStart\""
      ]
    },
    "1632": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentBinSize#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "currentBinSize#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1633": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentBinSize#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1634": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "currentBinSize#0"
      ]
    },
    "1636": {
      "op": "+",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1637": {
      "op": ">=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1638": {
      "op": "bz checkIfBinClosed_after_if_else@6",
      "stack_out": []
    },
    "1641": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1642": {
      "op": "bytec 10 // \"stakeAccumulator\"",
      "defined_out": [
        "\"stakeAccumulator\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"stakeAccumulator\""
      ]
    },
    "1644": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1645": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1646": {
      "op": "bytec_3 // 0x",
      "defined_out": [
        "0x",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "0x"
      ]
    },
    "1647": {
      "op": "b>",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1648": {
      "op": "bz checkIfBinClosed_after_if_else@5",
      "stack_out": []
    },
    "1651": {
      "op": "bytec 15 // \"ewma\"",
      "defined_out": [
        "\"ewma\""
      ],
      "stack_out": [
        "\"ewma\""
      ]
    },
    "1653": {
      "op": "pushbytes 0x000000000000000000000000000003e8",
      "defined_out": [
        "\"ewma\"",
        "0x000000000000000000000000000003e8"
      ],
      "stack_out": [
        "\"ewma\"",
        "0x000000000000000000000000000003e8"
      ]
    },
    "1671": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1672": {
      "block": "checkIfBinClosed_after_if_else@5",
      "stack_in": [],
      "op": "bytec 4 // \"roundsPerDay\"",
      "defined_out": [
        "\"roundsPerDay\""
      ],
      "stack_out": [
        "\"roundsPerDay\""
      ]
    },
    "1674": {
      "op": "intc 5 // 30857",
      "defined_out": [
        "\"roundsPerDay\"",
        "30857"
      ],
      "stack_out": [
        "\"roundsPerDay\"",
        "30857"
      ]
    },
    "1676": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1677": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1678": {
      "op": "bytec_1 // \"staked\"",
      "defined_out": [
        "\"staked\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"staked\""
      ]
    },
    "1679": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1680": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1681": {
      "op": "intc 5 // 30857",
      "stack_out": [
        "maybe_value%3#0",
        "30857"
      ]
    },
    "1683": {
      "op": "*",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1684": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1685": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "16"
      ]
    },
    "1687": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "aggregate%bzero%0#0"
      ]
    },
    "1688": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "1689": {
      "op": "bytec 10 // \"stakeAccumulator\"",
      "defined_out": [
        "\"stakeAccumulator\"",
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "\"stakeAccumulator\""
      ]
    },
    "1691": {
      "op": "swap",
      "stack_out": [
        "\"stakeAccumulator\"",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "1692": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1693": {
      "op": "bytec 14 // \"rewardAccumulator\"",
      "defined_out": [
        "\"rewardAccumulator\""
      ],
      "stack_out": [
        "\"rewardAccumulator\""
      ]
    },
    "1695": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rewardAccumulator\"",
        "0"
      ]
    },
    "1696": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1697": {
      "op": "global Round",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1699": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1700": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "0"
      ]
    },
    "1701": {
      "op": "bytec 4 // \"roundsPerDay\"",
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "0",
        "\"roundsPerDay\""
      ]
    },
    "1703": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1704": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "maybe_value%5#0"
      ]
    },
    "1705": {
      "op": "%",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "1706": {
      "op": "-",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1707": {
      "op": "bytec 9 // \"binRoundStart\"",
      "defined_out": [
        "\"binRoundStart\"",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "\"binRoundStart\""
      ]
    },
    "1709": {
      "op": "swap",
      "stack_out": [
        "\"binRoundStart\"",
        "tmp%12#0"
      ]
    },
    "1710": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1711": {
      "block": "checkIfBinClosed_after_if_else@6",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    }
  }
}
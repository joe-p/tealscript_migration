{
  "version": 3,
  "sources": [
    "/Users/joe/git/joe-p/tealscript_migration/smart_contracts/arc58/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAgCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA8KE;;AAAA;AAAA;AAAA;;AAAA;AA9KF;;;AAAA;;;AA8KE;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAxJF;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAwJE;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAjJF;;;AAAA;AAAA;;;AAiJE;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAhIF;;;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAgIE;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AA5HF;;;AAAA;;;AA4HE;;;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AArGF;;;AAAA;AAqGE;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AA5EF;;;AAAA;;;AAAA;AAAA;AA4EE;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAvDF;;;AAAA;AAAA;;;AAAA;;;AAuDE;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAlDF;;;AAkDE;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAxCF;;;AAAA;;;AAwCE;;;AAAA;;AA/BA;;;AACoB;AAED;;AAAY;;AAAW;;AAAX;AAA7B;;;AAGU;;AAAA;;AAAkC;AAZnB;AAYmB;AAAA;AAAtC;AAAA;;;AAAmD;;AAAA;;AAAmC;AAZnE;AAYmE;AAAA;AAAvC;AAA/C;;;AACY;AAAd;;AAeJ;;AAAA;;AAVQ;;AAAA;;AAAyB;;AAA7B;AAAA;;;AACiC;;AAAA;;AAAiB;;AAAlD;AADA;;;AAEiC;;AAAA;;AAAe;AAAhD;AAFA;;;AAGA;;AAAyC;AAAzC;;AAAgD;;AAAhD;AAHA;;;AAKc;AAAd;;AACA;;;AAf+C;;AAAK;AAAL;AAAA;;;;;AA4BrD;;;AACS;;AAA0B;;AAA1B;AAAA;;;AAAoC;;AAAc;;AAAd;AAApC;;;;AAAP;AAEO;;AAAA;;AAAA;AAAP;AA1Ca;AA4Cb;;AAAA;AAEE;;AAA6B;;AAA7B;AAAA;;;AAAkD;;AA5C3B;AA2CzB;AAAA;;;;;;;;;;;AAIF;;;AACE;;AAAsC;AAlDzB;AAkDyB;AAAA;AAAtC;AAAA;AAlDa;AAmDb;;AAAA;;AAGF;;;AACE;;AAAkC;;AAAA;;AAAA;AAAlC;AAAA;AAC8B;AAtDL;AAsDK;AAAA;AAAM;;AAAA;AAAuB;;AAAA;;AAAA;AAApD;AAAP;AAEwB;;AAAA;AAAA;;AAAA;AAtDT;AAAA;AAAA;AAAA;AAwDK;AAAA;;AAAlB;;;AAA8C;;AAAA;AAAA;AAAM;;;AAAA;AAApD;;;;AADF;AA3Da;AAgEb;;AAAA;;;;;;AAImC;AApEtB;AAoEsB;AAAA;AAAnC;AAGF;;;AACgC;AAtEL;AAsEK;AAAA;AAAM;AAAA;;AAAA;AAAA;;AAAA;AAtCW;;AAAxC;AAAA;;;AACI;;AAqCJ;;AAAA;AAAP;;AApCW;;;;;AAuCb;;;AACE;;AAAsC;AA5EzB;AA4EyB;AAAA;AAAtC;AAAA;AAEA;AAEmC;AA9EV;AA8EU;AAAA;AAGzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALV;;;AAAA;;;AAAA;AASA;;AAAA;;;AAAW;;;;AAGb;;;AAC0B;;AAAA;AAAA;;AAAA;AAvFT;AAAA;AAAA;AAAA;AA0FK;AAAA;;AAAlB;;;AACkB;;AAAA;AAAA;AAAM;AAAA;AAAyB;;AAAjD;AADA;;;AAEO;;AAA0B;;AAAA;AAAA;AAAM;AAAA;AAAA;AAAvC;;AAAA;AAAA;AAA6E;AAAA;;AAAA;AAA7E;AAFA;;;;AADF;AAAA;;;;;AAOF;;;;;AACwB;;AAAsC;;AAAtC;;;AAAA;AAElB;;;AACK;;AAAmC;;AAAnC;;;AAAP;AAEF;AAEmC;AA1GV;AA0GU;AAAA;AAEf;;AAAA;;AAAA;AACV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALV;;;AAAA;;;AAAA;AAY6B;;AAAA;;AADZ;;AAAA;;;AAAuB;;AAF3B;;AAAA;AAAA;AAAA;AA/GE;AAAA;AAAA;AA+Gf;;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAH0D;;;;;AAM5D;;;AArHsB;AAAA;;AAAA;AAsHoC;AAAA;AAAM;AAAA;AAA9D;;;;AAGF;;;AAOE;;AAAsC;AAtIzB;AAsIyB;AAAA;AAAtC;AAAA;AACwB;;AAAA;AAAA;;AAAA;AACE;;AAAA;AAAA;;AAAA;AAAA;AAGZ;AAHY;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AApIX;AAAA;;AAAA;AAoIf;AAAA;;AAQF;;;AACE;;AAAsC;AAjJzB;AAiJyB;AAAA;AAAtC;AAAA;AAEwB;;AAAA;AAAA;;AAAA;AA/IT;AAAA;AAAA;AAgJf;;;AAGF;;;AAQE;;AAAsC;AA/JzB;AA+JyB;AAAA;AAAtC;AAAA;AAzJoB;AAAA;;AAAA;AA2JiB;AAAA;AAAA;;AAA9B;AAAP;AAEwB;;AAAA;AAAA;;AAAA;AACxB;AAAA;;AAAA;AAC0B;;AAAA;AAAA;;AAAA;AAAA;AAGZ;AAHY;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAjKX;AAAA;;AAAA;AAiKf;AAAA;;AAQF;;;AACE;;AAAsC;AA9KzB;AA8KyB;AAAA;AAAtC;AAAA;AAxKoB;AAAA;;AAAA;AA2K2B;AAAA;AAAA;AAC/C;AAAA;;AA9Ke;AAAA;AAAA;AA+Kf;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 16"
    },
    "6": {
      "op": "bytecblock \"a\" \"c\" \"p\" \"n\" 0x0f885493"
    },
    "21": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "23": {
      "op": "bz main_after_if_else@18",
      "stack_out": []
    },
    "26": {
      "op": "pushbytess 0xb4c77d71 0xd24b7556 0x5fa449c6 0x13bc44e4 // method \"createApplication(address,address)void\", method \"arc58_changeAdmin(address)void\", method \"arc58_pluginChangeAdmin(uint64,address,address)void\", method \"arc58_getAdmin()address\"",
      "defined_out": [
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_pluginChangeAdmin(uint64,address,address)void)",
        "Method(createApplication(address,address)void)"
      ],
      "stack_out": [
        "Method(createApplication(address,address)void)",
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_pluginChangeAdmin(uint64,address,address)void)",
        "Method(arc58_getAdmin()address)"
      ]
    },
    "48": {
      "op": "bytec 4 // method \"arc58_verifyAuthAddr()void\"",
      "defined_out": [
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_pluginChangeAdmin(uint64,address,address)void)",
        "Method(arc58_verifyAuthAddr()void)",
        "Method(createApplication(address,address)void)"
      ],
      "stack_out": [
        "Method(createApplication(address,address)void)",
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_pluginChangeAdmin(uint64,address,address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_verifyAuthAddr()void)"
      ]
    },
    "50": {
      "op": "pushbytess 0xc95a5d3d 0x7c766ddc 0x56f28b58 0xd12dcb61 0x4d372355 0x8a72a750 0xe350b9d4 // method \"arc58_rekeyTo(address,bool)void\", method \"arc58_rekeyToPlugin(uint64)void\", method \"arc58_rekeyToNamedPlugin(string)void\", method \"arc58_addPlugin(uint64,address,uint64,uint64,bool)void\", method \"arc58_removePlugin(uint64,address)void\", method \"arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void\", method \"arc58_removeNamedPlugin(string)void\"",
      "defined_out": [
        "Method(arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_addPlugin(uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_pluginChangeAdmin(uint64,address,address)void)",
        "Method(arc58_rekeyTo(address,bool)void)",
        "Method(arc58_rekeyToNamedPlugin(string)void)",
        "Method(arc58_rekeyToPlugin(uint64)void)",
        "Method(arc58_removeNamedPlugin(string)void)",
        "Method(arc58_removePlugin(uint64,address)void)",
        "Method(arc58_verifyAuthAddr()void)",
        "Method(createApplication(address,address)void)"
      ],
      "stack_out": [
        "Method(createApplication(address,address)void)",
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_pluginChangeAdmin(uint64,address,address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_verifyAuthAddr()void)",
        "Method(arc58_rekeyTo(address,bool)void)",
        "Method(arc58_rekeyToPlugin(uint64)void)",
        "Method(arc58_rekeyToNamedPlugin(string)void)",
        "Method(arc58_addPlugin(uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_removePlugin(uint64,address)void)",
        "Method(arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_removeNamedPlugin(string)void)"
      ]
    },
    "87": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_addPlugin(uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_pluginChangeAdmin(uint64,address,address)void)",
        "Method(arc58_rekeyTo(address,bool)void)",
        "Method(arc58_rekeyToNamedPlugin(string)void)",
        "Method(arc58_rekeyToPlugin(uint64)void)",
        "Method(arc58_removeNamedPlugin(string)void)",
        "Method(arc58_removePlugin(uint64,address)void)",
        "Method(arc58_verifyAuthAddr()void)",
        "Method(createApplication(address,address)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(address,address)void)",
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_pluginChangeAdmin(uint64,address,address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_verifyAuthAddr()void)",
        "Method(arc58_rekeyTo(address,bool)void)",
        "Method(arc58_rekeyToPlugin(uint64)void)",
        "Method(arc58_rekeyToNamedPlugin(string)void)",
        "Method(arc58_addPlugin(uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_removePlugin(uint64,address)void)",
        "Method(arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_removeNamedPlugin(string)void)",
        "tmp%2#0"
      ]
    },
    "90": {
      "op": "match main_createApplication_route@3 main_arc58_changeAdmin_route@4 main_arc58_pluginChangeAdmin_route@5 main_arc58_getAdmin_route@6 main_arc58_verifyAuthAddr_route@7 main_arc58_rekeyTo_route@8 main_arc58_rekeyToPlugin_route@9 main_arc58_rekeyToNamedPlugin_route@10 main_arc58_addPlugin_route@11 main_arc58_removePlugin_route@12 main_arc58_addNamedPlugin_route@13 main_arc58_removeNamedPlugin_route@14",
      "stack_out": []
    },
    "116": {
      "block": "main_after_if_else@18",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "return",
      "stack_out": []
    },
    "118": {
      "block": "main_arc58_removeNamedPlugin_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "120": {
      "op": "!",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "121": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "122": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "124": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "125": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%2#0"
      ]
    },
    "128": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "131": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_removeNamedPlugin",
      "op": "callsub arc58_removeNamedPlugin",
      "stack_out": []
    },
    "134": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "135": {
      "op": "return",
      "stack_out": []
    },
    "136": {
      "block": "main_arc58_addNamedPlugin_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "138": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "139": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "140": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "142": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "143": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%1#0"
      ]
    },
    "146": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "149": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%6#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "152": {
      "op": "btoi",
      "defined_out": [
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0"
      ]
    },
    "153": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "reinterpret_Encoded(uint8[32])%8#0"
      ]
    },
    "156": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint64)%7#0",
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "reinterpret_Encoded(uint8[32])%8#0",
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "159": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%66#0",
        "tmp%67#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%69#0"
      ]
    },
    "160": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_Encoded(uint64)%8#0",
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%66#0",
        "tmp%67#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%69#0",
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "163": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%66#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%69#0",
        "tmp%70#0"
      ]
    },
    "164": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_Encoded(bool8)%2#0",
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%66#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(bool8)%2#0"
      ]
    },
    "167": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(bool8)%2#0",
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%66#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%69#0",
        "tmp%70#0",
        "reinterpret_Encoded(bool8)%2#0",
        "0"
      ]
    },
    "168": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%2#0",
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%66#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0",
        "reinterpret_Encoded(uint8[32])%8#0",
        "tmp%69#0",
        "tmp%70#0",
        "aggregate%get_bit%2#0"
      ]
    },
    "169": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_addNamedPlugin",
      "op": "callsub arc58_addNamedPlugin",
      "stack_out": []
    },
    "172": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "173": {
      "op": "return",
      "stack_out": []
    },
    "174": {
      "block": "main_arc58_removePlugin_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "176": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "177": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "178": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "180": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "181": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "184": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "185": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%7#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "reinterpret_Encoded(uint8[32])%7#0"
      ]
    },
    "188": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_removePlugin",
      "op": "callsub arc58_removePlugin",
      "stack_out": []
    },
    "191": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "return",
      "stack_out": []
    },
    "193": {
      "block": "main_arc58_addPlugin_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "195": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "196": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "197": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "199": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "200": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "203": {
      "op": "btoi",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "204": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "reinterpret_Encoded(uint8[32])%6#0"
      ]
    },
    "207": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0",
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "reinterpret_Encoded(uint8[32])%6#0",
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "210": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%51#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%53#0"
      ]
    },
    "211": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0",
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%51#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%53#0",
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "214": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%51#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%53#0",
        "tmp%54#0"
      ]
    },
    "215": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_Encoded(bool8)%1#0",
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%51#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%53#0",
        "tmp%54#0",
        "reinterpret_Encoded(bool8)%1#0"
      ]
    },
    "218": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(bool8)%1#0",
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%51#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%53#0",
        "tmp%54#0",
        "reinterpret_Encoded(bool8)%1#0",
        "0"
      ]
    },
    "219": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%1#0",
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%51#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "reinterpret_Encoded(uint8[32])%6#0",
        "tmp%53#0",
        "tmp%54#0",
        "aggregate%get_bit%1#0"
      ]
    },
    "220": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_addPlugin",
      "op": "callsub arc58_addPlugin",
      "stack_out": []
    },
    "223": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "224": {
      "op": "return",
      "stack_out": []
    },
    "225": {
      "block": "main_arc58_rekeyToNamedPlugin_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "227": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "228": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "229": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "231": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "232": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "235": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "238": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_rekeyToNamedPlugin",
      "op": "callsub arc58_rekeyToNamedPlugin",
      "stack_out": []
    },
    "241": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "242": {
      "op": "return",
      "stack_out": []
    },
    "243": {
      "block": "main_arc58_rekeyToPlugin_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "245": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "246": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "247": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "249": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "250": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "253": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "254": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_rekeyToPlugin",
      "op": "callsub arc58_rekeyToPlugin",
      "stack_out": []
    },
    "257": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "258": {
      "op": "return",
      "stack_out": []
    },
    "259": {
      "block": "main_arc58_rekeyTo_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "261": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "262": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "263": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "265": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "266": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%5#0"
      ]
    },
    "269": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(bool8)%0#0",
        "reinterpret_Encoded(uint8[32])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%5#0",
        "reinterpret_Encoded(bool8)%0#0"
      ]
    },
    "272": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_Encoded(bool8)%0#0",
        "reinterpret_Encoded(uint8[32])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%5#0",
        "reinterpret_Encoded(bool8)%0#0",
        "0"
      ]
    },
    "273": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%0#0",
        "reinterpret_Encoded(uint8[32])%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%5#0",
        "aggregate%get_bit%0#0"
      ]
    },
    "274": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_rekeyTo",
      "op": "callsub arc58_rekeyTo",
      "stack_out": []
    },
    "277": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "278": {
      "op": "return",
      "stack_out": []
    },
    "279": {
      "block": "main_arc58_verifyAuthAddr_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "281": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "282": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "283": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "285": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "286": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_verifyAuthAddr",
      "op": "callsub arc58_verifyAuthAddr"
    },
    "289": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "290": {
      "op": "return",
      "stack_out": []
    },
    "291": {
      "block": "main_arc58_getAdmin_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "293": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "294": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "295": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "297": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "298": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_getAdmin",
      "op": "callsub arc58_getAdmin",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "301": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "0x151f7c75"
      ]
    },
    "307": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%25#0"
      ]
    },
    "308": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "309": {
      "op": "log",
      "stack_out": []
    },
    "310": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "311": {
      "op": "return",
      "stack_out": []
    },
    "312": {
      "block": "main_arc58_pluginChangeAdmin_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "314": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "315": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "316": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "318": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "319": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "322": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "323": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%3#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "reinterpret_Encoded(uint8[32])%3#0"
      ]
    },
    "326": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%3#0",
        "reinterpret_Encoded(uint8[32])%4#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "reinterpret_Encoded(uint8[32])%3#0",
        "reinterpret_Encoded(uint8[32])%4#0"
      ]
    },
    "329": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_pluginChangeAdmin",
      "op": "callsub arc58_pluginChangeAdmin",
      "stack_out": []
    },
    "332": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "333": {
      "op": "return",
      "stack_out": []
    },
    "334": {
      "block": "main_arc58_changeAdmin_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "336": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "337": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "338": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "340": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "341": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%2#0"
      ]
    },
    "344": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_changeAdmin",
      "op": "callsub arc58_changeAdmin",
      "stack_out": []
    },
    "347": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "348": {
      "op": "return",
      "stack_out": []
    },
    "349": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "351": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "352": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "353": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "355": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "356": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "357": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "360": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0",
        "reinterpret_Encoded(uint8[32])%1#0"
      ]
    },
    "363": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "366": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "367": {
      "op": "return",
      "stack_out": []
    },
    "368": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.verifyRekeyToAbstractedAccount",
      "params": {},
      "block": "verifyRekeyToAbstractedAccount",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "371": {
      "op": "intc_0 // 0"
    },
    "372": {
      "op": "txn GroupIndex",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "374": {
      "block": "verifyRekeyToAbstractedAccount_while_top@1",
      "stack_in": [
        "rekeyedBack#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "i#0"
      ]
    },
    "376": {
      "op": "global GroupSize",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "378": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%2#0"
      ]
    },
    "379": {
      "op": "bz verifyRekeyToAbstractedAccount_block@12",
      "stack_out": [
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "382": {
      "op": "frame_dig 1",
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "i#0"
      ]
    },
    "384": {
      "op": "gtxns Sender",
      "defined_out": [
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%3#0"
      ]
    },
    "386": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%3#0",
        "0"
      ]
    },
    "387": {
      "op": "bytec_1 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0",
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%3#0",
        "0",
        "\"c\""
      ]
    },
    "388": {
      "op": "app_global_get_ex",
      "defined_out": [
        "i#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "389": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "390": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%4#0"
      ]
    },
    "391": {
      "op": "bz verifyRekeyToAbstractedAccount_after_if_else@5",
      "stack_out": [
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "394": {
      "op": "frame_dig 1",
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "i#0"
      ]
    },
    "396": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "i#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%5#0"
      ]
    },
    "398": {
      "op": "intc_0 // 0",
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%5#0",
        "0"
      ]
    },
    "399": {
      "op": "bytec_1 // \"c\"",
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%5#0",
        "0",
        "\"c\""
      ]
    },
    "400": {
      "op": "app_global_get_ex",
      "defined_out": [
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "401": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "402": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%6#0"
      ]
    },
    "403": {
      "op": "bz verifyRekeyToAbstractedAccount_after_if_else@5",
      "stack_out": [
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "406": {
      "op": "intc_1 // 1",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "407": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "409": {
      "block": "verifyRekeyToAbstractedAccount_block@12",
      "stack_in": [
        "rekeyedBack#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "rekeyedBack#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "411": {
      "op": "assert",
      "stack_out": [
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "412": {
      "retsub": true,
      "op": "retsub"
    },
    "413": {
      "block": "verifyRekeyToAbstractedAccount_after_if_else@5",
      "stack_in": [
        "rekeyedBack#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "i#0"
      ]
    },
    "415": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "i#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%7#0"
      ]
    },
    "417": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "i#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%7#0",
        "6"
      ]
    },
    "419": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%8#0"
      ]
    },
    "420": {
      "op": "bz verifyRekeyToAbstractedAccount_after_if_else@10",
      "stack_out": [
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "423": {
      "op": "frame_dig 1",
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "i#0"
      ]
    },
    "425": {
      "op": "gtxns ApplicationID",
      "defined_out": [
        "i#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%9#0"
      ]
    },
    "427": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "i#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "429": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%11#0"
      ]
    },
    "430": {
      "op": "bz verifyRekeyToAbstractedAccount_after_if_else@10",
      "stack_out": [
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "433": {
      "op": "frame_dig 1",
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "i#0"
      ]
    },
    "435": {
      "op": "gtxns NumAppArgs",
      "defined_out": [
        "i#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%12#0"
      ]
    },
    "437": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%12#0",
        "1"
      ]
    },
    "438": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%13#0"
      ]
    },
    "439": {
      "op": "bz verifyRekeyToAbstractedAccount_after_if_else@10",
      "stack_out": [
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "442": {
      "op": "frame_dig 1",
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "i#0"
      ]
    },
    "444": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "i#0",
        "0"
      ]
    },
    "445": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "i#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%14#0"
      ]
    },
    "447": {
      "op": "bytec 4 // method \"arc58_verifyAuthAddr()void\"",
      "defined_out": [
        "Method(arc58_verifyAuthAddr()void)",
        "i#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%14#0",
        "Method(arc58_verifyAuthAddr()void)"
      ]
    },
    "449": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "tmp%15#0"
      ]
    },
    "450": {
      "op": "bz verifyRekeyToAbstractedAccount_after_if_else@10",
      "stack_out": [
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "453": {
      "op": "intc_1 // 1",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "454": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "456": {
      "op": "b verifyRekeyToAbstractedAccount_block@12"
    },
    "459": {
      "block": "verifyRekeyToAbstractedAccount_after_if_else@10",
      "stack_in": [
        "rekeyedBack#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "i#0"
      ]
    },
    "461": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "462": {
      "op": "+",
      "stack_out": [
        "rekeyedBack#0",
        "i#0",
        "i#0"
      ]
    },
    "463": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "465": {
      "op": "b verifyRekeyToAbstractedAccount_while_top@1"
    },
    "468": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.createApplication",
      "params": {
        "controlledAddress#0": "bytes",
        "admin#0": "bytes"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "471": {
      "op": "frame_dig -2",
      "defined_out": [
        "controlledAddress#0 (copy)"
      ],
      "stack_out": [
        "controlledAddress#0 (copy)"
      ]
    },
    "473": {
      "op": "txn Sender",
      "defined_out": [
        "controlledAddress#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "controlledAddress#0 (copy)",
        "tmp%0#0"
      ]
    },
    "475": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "476": {
      "op": "bnz createApplication_bool_true@2",
      "stack_out": []
    },
    "479": {
      "op": "frame_dig -1",
      "defined_out": [
        "admin#0 (copy)"
      ],
      "stack_out": [
        "admin#0 (copy)"
      ]
    },
    "481": {
      "op": "txn Sender",
      "defined_out": [
        "admin#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "admin#0 (copy)",
        "tmp%2#0"
      ]
    },
    "483": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "484": {
      "op": "bz createApplication_bool_false@3",
      "stack_out": []
    },
    "487": {
      "block": "createApplication_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "488": {
      "block": "createApplication_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "489": {
      "op": "frame_dig -1",
      "defined_out": [
        "admin#0 (copy)"
      ],
      "stack_out": [
        "admin#0 (copy)"
      ]
    },
    "491": {
      "op": "frame_dig -2",
      "defined_out": [
        "admin#0 (copy)",
        "controlledAddress#0 (copy)"
      ],
      "stack_out": [
        "admin#0 (copy)",
        "controlledAddress#0 (copy)"
      ]
    },
    "493": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "494": {
      "op": "assert",
      "stack_out": []
    },
    "495": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\""
      ],
      "stack_out": [
        "\"a\""
      ]
    },
    "496": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"a\"",
        "admin#0 (copy)"
      ]
    },
    "498": {
      "op": "app_global_put",
      "stack_out": []
    },
    "499": {
      "op": "frame_dig -2",
      "stack_out": [
        "controlledAddress#0 (copy)"
      ]
    },
    "501": {
      "op": "global ZeroAddress",
      "defined_out": [
        "controlledAddress#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "controlledAddress#0 (copy)",
        "tmp%5#0"
      ]
    },
    "503": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "504": {
      "op": "bz createApplication_ternary_false@6",
      "stack_out": []
    },
    "507": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "509": {
      "block": "createApplication_ternary_merge@7",
      "stack_in": [
        "ternary_result%0#0"
      ],
      "op": "bytec_1 // \"c\"",
      "defined_out": [
        "\"c\""
      ],
      "stack_out": [
        "ternary_result%0#0",
        "\"c\""
      ]
    },
    "510": {
      "op": "swap",
      "defined_out": [
        "\"c\"",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "\"c\"",
        "ternary_result%0#0"
      ]
    },
    "511": {
      "op": "app_global_put",
      "stack_out": []
    },
    "512": {
      "retsub": true,
      "op": "retsub"
    },
    "513": {
      "block": "createApplication_ternary_false@6",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "515": {
      "op": "b createApplication_ternary_merge@7"
    },
    "518": {
      "block": "createApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "519": {
      "op": "b createApplication_bool_merge@4"
    },
    "522": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_changeAdmin",
      "params": {
        "newAdmin#0": "bytes"
      },
      "block": "arc58_changeAdmin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "525": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "527": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "528": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"a\""
      ]
    },
    "529": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "530": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "531": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "532": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "533": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "\"a\""
      ]
    },
    "534": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"a\"",
        "newAdmin#0 (copy)"
      ],
      "stack_out": [
        "\"a\"",
        "newAdmin#0 (copy)"
      ]
    },
    "536": {
      "op": "app_global_put",
      "stack_out": []
    },
    "537": {
      "retsub": true,
      "op": "retsub"
    },
    "538": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_pluginChangeAdmin",
      "params": {
        "plugin#0": "uint64",
        "allowedCaller#0": "bytes",
        "newAdmin#0": "bytes"
      },
      "block": "arc58_pluginChangeAdmin",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "541": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "543": {
      "op": "frame_dig -3",
      "defined_out": [
        "plugin#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "plugin#0 (copy)"
      ]
    },
    "545": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%0#0",
        "tmp%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "547": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%0#0",
        "value%0#0"
      ]
    },
    "548": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "549": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "550": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "551": {
      "op": "bytec_1 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"c\""
      ]
    },
    "552": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "553": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "554": {
      "op": "acct_params_get AcctAuthAddr",
      "defined_out": [
        "check%1#0",
        "value%1#0"
      ],
      "stack_out": [
        "value%1#0",
        "check%1#0"
      ]
    },
    "556": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%1#0"
      ]
    },
    "557": {
      "op": "frame_dig -3",
      "stack_out": [
        "value%1#0",
        "plugin#0 (copy)"
      ]
    },
    "559": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%2#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%1#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "561": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "value%1#0",
        "value%2#0"
      ]
    },
    "562": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "563": {
      "error": "This plugin is not in control of the account",
      "op": "assert // This plugin is not in control of the account",
      "stack_out": []
    },
    "564": {
      "op": "frame_dig -3",
      "stack_out": [
        "plugin#0 (copy)"
      ]
    },
    "566": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "567": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "allowedCaller#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "allowedCaller#0 (copy)"
      ]
    },
    "569": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "570": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"p\""
      ]
    },
    "571": {
      "op": "swap",
      "stack_out": [
        "\"p\"",
        "key#0"
      ]
    },
    "572": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "573": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "574": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%1#0"
      ]
    },
    "575": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0"
      ]
    },
    "577": {
      "op": "bz arc58_pluginChangeAdmin_bool_false@3",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "580": {
      "op": "frame_dig 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "582": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "583": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "584": {
      "op": "pushint 192 // 192",
      "defined_out": [
        "192",
        "aggregate%box_get%0#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "192"
      ]
    },
    "587": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%0#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%get_bit%0#0"
      ]
    },
    "588": {
      "op": "bz arc58_pluginChangeAdmin_bool_false@3",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "591": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ]
    },
    "592": {
      "block": "arc58_pluginChangeAdmin_bool_merge@4",
      "stack_in": [
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ],
      "error": "This plugin does not have admin privileges",
      "op": "assert // This plugin does not have admin privileges",
      "defined_out": [],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "593": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\""
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "\"a\""
      ]
    },
    "594": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"a\"",
        "newAdmin#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "\"a\"",
        "newAdmin#0 (copy)"
      ]
    },
    "596": {
      "op": "app_global_put",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "597": {
      "retsub": true,
      "op": "retsub"
    },
    "598": {
      "block": "arc58_pluginChangeAdmin_bool_false@3",
      "stack_in": [
        "box_prefixed_key%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ]
    },
    "599": {
      "op": "b arc58_pluginChangeAdmin_bool_merge@4"
    },
    "602": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_getAdmin",
      "params": {},
      "block": "arc58_getAdmin",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "603": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"a\""
      ]
    },
    "604": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "605": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "606": {
      "retsub": true,
      "op": "retsub"
    },
    "607": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_verifyAuthAddr",
      "params": {},
      "block": "arc58_verifyAuthAddr",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "610": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "611": {
      "op": "bytec_1 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"c\""
      ]
    },
    "612": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "613": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "614": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "615": {
      "op": "acct_params_get AcctAuthAddr",
      "defined_out": [
        "check%0#0",
        "maybe_value%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "617": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "check%0#0",
        "value%0#0"
      ]
    },
    "618": {
      "op": "cover 2",
      "defined_out": [
        "check%0#0",
        "maybe_value%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "maybe_value%0#0",
        "check%0#0"
      ]
    },
    "620": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0",
        "maybe_value%0#0"
      ]
    },
    "621": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#1",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ]
    },
    "623": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%1#0"
      ]
    },
    "624": {
      "op": "bz arc58_verifyAuthAddr_ternary_false@3",
      "stack_out": [
        "value%0#0"
      ]
    },
    "627": {
      "op": "global ZeroAddress",
      "defined_out": [
        "ternary_result%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "ternary_result%0#0"
      ]
    },
    "629": {
      "block": "arc58_verifyAuthAddr_ternary_merge@4",
      "stack_in": [
        "value%0#0",
        "ternary_result%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "ternary_result%0#0",
        "value%0#0"
      ]
    },
    "631": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%1#0"
      ]
    },
    "632": {
      "op": "assert",
      "stack_out": [
        "value%0#0"
      ]
    },
    "633": {
      "retsub": true,
      "op": "retsub"
    },
    "634": {
      "block": "arc58_verifyAuthAddr_ternary_false@3",
      "stack_in": [
        "value%0#0"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "ternary_result%0#0"
      ]
    },
    "636": {
      "op": "b arc58_verifyAuthAddr_ternary_merge@4"
    },
    "639": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_rekeyTo",
      "params": {
        "addr#0": "bytes",
        "flash#0": "uint64"
      },
      "block": "arc58_rekeyTo",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "642": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "644": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "645": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"a\""
      ]
    },
    "646": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "647": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "648": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "649": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "650": {
      "op": "itxn_begin"
    },
    "651": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "652": {
      "op": "bytec_1 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"c\""
      ]
    },
    "653": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "654": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "655": {
      "op": "pushbytes \"rekeying abstracted account\"",
      "defined_out": [
        "\"rekeying abstracted account\"",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "\"rekeying abstracted account\""
      ]
    },
    "684": {
      "op": "itxn_field Note",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "686": {
      "op": "frame_dig -2",
      "defined_out": [
        "addr#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "addr#0 (copy)"
      ]
    },
    "688": {
      "op": "itxn_field RekeyTo",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "690": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%1#0",
        "addr#0 (copy)"
      ]
    },
    "692": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "694": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "696": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "697": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "699": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "700": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "702": {
      "op": "itxn_submit"
    },
    "703": {
      "op": "frame_dig -1",
      "defined_out": [
        "flash#0 (copy)"
      ],
      "stack_out": [
        "flash#0 (copy)"
      ]
    },
    "705": {
      "op": "bz arc58_rekeyTo_after_if_else@3",
      "stack_out": []
    },
    "708": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.verifyRekeyToAbstractedAccount",
      "op": "callsub verifyRekeyToAbstractedAccount"
    },
    "711": {
      "block": "arc58_rekeyTo_after_if_else@3",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "712": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.pluginCallAllowed",
      "params": {
        "app#0": "uint64",
        "caller#0": "bytes"
      },
      "block": "pluginCallAllowed",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "715": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "717": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "718": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "caller#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "caller#0 (copy)"
      ]
    },
    "720": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "721": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"p\""
      ]
    },
    "722": {
      "op": "swap",
      "stack_out": [
        "\"p\"",
        "key#0"
      ]
    },
    "723": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "724": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "725": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "726": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "728": {
      "op": "bz pluginCallAllowed_bool_false@4",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "731": {
      "op": "frame_dig 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "733": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "734": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "735": {
      "op": "intc_0 // 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "0"
      ]
    },
    "736": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "values%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "values%0#0"
      ]
    },
    "737": {
      "op": "global Round",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%1#0",
        "values%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "values%0#0",
        "tmp%1#0"
      ]
    },
    "739": {
      "op": ">=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ]
    },
    "740": {
      "op": "bz pluginCallAllowed_bool_false@4",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "743": {
      "op": "global Round",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%3#0"
      ]
    },
    "745": {
      "op": "frame_dig 0",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%3#0",
        "box_prefixed_key%0#0"
      ]
    },
    "747": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0",
        "box_prefixed_key%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%3#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "748": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%3#0",
        "aggregate%box_get%2#0"
      ]
    },
    "749": {
      "op": "dup",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%2#0 (copy)",
        "box_prefixed_key%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%3#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%2#0 (copy)"
      ]
    },
    "750": {
      "op": "intc_2 // 16",
      "defined_out": [
        "16",
        "aggregate%box_get%2#0",
        "aggregate%box_get%2#0 (copy)",
        "box_prefixed_key%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%3#0",
        "aggregate%box_get%2#0",
        "aggregate%box_get%2#0 (copy)",
        "16"
      ]
    },
    "751": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%box_get%2#0",
        "box_prefixed_key%0#0",
        "tmp%3#0",
        "values%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%3#0",
        "aggregate%box_get%2#0",
        "values%1#0"
      ]
    },
    "752": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%box_get%2#0",
        "values%1#0",
        "tmp%3#0"
      ]
    },
    "754": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%box_get%2#0",
        "tmp%3#0",
        "values%1#0"
      ]
    },
    "755": {
      "op": "-",
      "defined_out": [
        "aggregate%box_get%2#0",
        "box_prefixed_key%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%box_get%2#0",
        "tmp%4#0"
      ]
    },
    "756": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%4#0",
        "aggregate%box_get%2#0"
      ]
    },
    "757": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "aggregate%box_get%2#0",
        "box_prefixed_key%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%4#0",
        "aggregate%box_get%2#0",
        "8"
      ]
    },
    "759": {
      "op": "extract_uint64",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%4#0",
        "values%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%4#0",
        "values%2#0"
      ]
    },
    "760": {
      "op": ">=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%5#0"
      ]
    },
    "761": {
      "op": "bz pluginCallAllowed_bool_false@4",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "764": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ]
    },
    "765": {
      "block": "pluginCallAllowed_bool_merge@5",
      "stack_in": [
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "and_result%0#0"
      ]
    },
    "766": {
      "retsub": true,
      "op": "retsub"
    },
    "767": {
      "block": "pluginCallAllowed_bool_false@4",
      "stack_in": [
        "box_prefixed_key%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "and_result%0#0"
      ]
    },
    "768": {
      "op": "b pluginCallAllowed_bool_merge@5"
    },
    "771": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_rekeyToPlugin",
      "params": {
        "plugin#0": "uint64"
      },
      "block": "arc58_rekeyToPlugin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "774": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "776": {
      "op": "frame_dig -1",
      "defined_out": [
        "plugin#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "plugin#0 (copy)"
      ]
    },
    "778": {
      "op": "global ZeroAddress",
      "defined_out": [
        "plugin#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "plugin#0 (copy)",
        "tmp%0#0"
      ]
    },
    "780": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.pluginCallAllowed",
      "op": "callsub pluginCallAllowed",
      "defined_out": [
        "globalAllowed#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0"
      ]
    },
    "783": {
      "op": "dup",
      "defined_out": [
        "globalAllowed#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "globalAllowed#0"
      ]
    },
    "784": {
      "op": "bnz arc58_rekeyToPlugin_after_if_else@2",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0"
      ]
    },
    "787": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "plugin#0 (copy)"
      ]
    },
    "789": {
      "op": "txn Sender",
      "defined_out": [
        "globalAllowed#0",
        "plugin#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "plugin#0 (copy)",
        "tmp%2#0"
      ]
    },
    "791": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.pluginCallAllowed",
      "op": "callsub pluginCallAllowed",
      "defined_out": [
        "globalAllowed#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "tmp%3#0"
      ]
    },
    "794": {
      "error": "This sender is not allowed to trigger this plugin",
      "op": "assert // This sender is not allowed to trigger this plugin",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0"
      ]
    },
    "795": {
      "block": "arc58_rekeyToPlugin_after_if_else@2",
      "stack_in": [
        "tmp%4#0",
        "globalAllowed#0"
      ],
      "op": "itxn_begin"
    },
    "796": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "0"
      ]
    },
    "797": {
      "op": "bytec_1 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "0",
        "\"c\""
      ]
    },
    "798": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "799": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "maybe_value%0#0"
      ]
    },
    "800": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "plugin#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "plugin#0 (copy)"
      ]
    },
    "802": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%0#0",
        "maybe_value%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "804": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "value%0#0"
      ]
    },
    "805": {
      "op": "pushbytes \"rekeying to plugin app\"",
      "defined_out": [
        "\"rekeying to plugin app\"",
        "maybe_value%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "value%0#0",
        "\"rekeying to plugin app\""
      ]
    },
    "829": {
      "op": "itxn_field Note",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "value%0#0"
      ]
    },
    "831": {
      "op": "itxn_field RekeyTo",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "maybe_value%0#0"
      ]
    },
    "833": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "834": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "maybe_value%0#0"
      ]
    },
    "836": {
      "op": "itxn_field Sender",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0"
      ]
    },
    "838": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "1"
      ]
    },
    "839": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0"
      ]
    },
    "841": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "0"
      ]
    },
    "842": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0"
      ]
    },
    "844": {
      "op": "itxn_submit"
    },
    "845": {
      "op": "global Round",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "tmp%4#0"
      ]
    },
    "847": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0"
      ]
    },
    "849": {
      "op": "frame_dig 1",
      "defined_out": [
        "globalAllowed#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "globalAllowed#0"
      ]
    },
    "851": {
      "op": "bz arc58_rekeyToPlugin_ternary_false@5",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0"
      ]
    },
    "854": {
      "op": "global ZeroAddress",
      "defined_out": [
        "globalAllowed#0",
        "ternary_result%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "ternary_result%0#0"
      ]
    },
    "856": {
      "block": "arc58_rekeyToPlugin_ternary_merge@6",
      "stack_in": [
        "tmp%4#0",
        "globalAllowed#0",
        "ternary_result%0#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "plugin#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "ternary_result%0#0",
        "plugin#0 (copy)"
      ]
    },
    "858": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "ternary_result%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "859": {
      "op": "swap",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "aggregate%val_as_bytes%0#0",
        "ternary_result%0#0"
      ]
    },
    "860": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "aggregate%head%1#0"
      ]
    },
    "861": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "aggregate%head%1#0",
        "\"p\""
      ]
    },
    "862": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "\"p\"",
        "aggregate%head%1#0"
      ]
    },
    "863": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "box_prefixed_key%0#0"
      ]
    },
    "864": {
      "op": "frame_dig 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "box_prefixed_key%0#0",
        "tmp%4#0"
      ]
    },
    "866": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box_prefixed_key%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "867": {
      "op": "intc_2 // 16"
    },
    "868": {
      "op": "swap",
      "defined_out": [
        "16",
        "aggregate%val_as_bytes%1#0",
        "box_prefixed_key%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "box_prefixed_key%0#0",
        "16",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "869": {
      "op": "box_replace",
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0"
      ]
    },
    "870": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.verifyRekeyToAbstractedAccount",
      "op": "callsub verifyRekeyToAbstractedAccount"
    },
    "873": {
      "retsub": true,
      "op": "retsub"
    },
    "874": {
      "block": "arc58_rekeyToPlugin_ternary_false@5",
      "stack_in": [
        "tmp%4#0",
        "globalAllowed#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "globalAllowed#0",
        "ternary_result%0#0"
      ]
    },
    "876": {
      "op": "b arc58_rekeyToPlugin_ternary_merge@6"
    },
    "879": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_rekeyToNamedPlugin",
      "params": {
        "name#0": "bytes"
      },
      "block": "arc58_rekeyToNamedPlugin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "882": {
      "op": "bytec_3 // \"n\"",
      "defined_out": [
        "\"n\""
      ],
      "stack_out": [
        "\"n\""
      ]
    },
    "883": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"n\"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"n\"",
        "name#0 (copy)"
      ]
    },
    "885": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "886": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "887": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "888": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "0"
      ]
    },
    "889": {
      "op": "extract_uint64",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "890": {
      "callsub": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_rekeyToPlugin",
      "op": "callsub arc58_rekeyToPlugin",
      "stack_out": []
    },
    "893": {
      "retsub": true,
      "op": "retsub"
    },
    "894": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_addPlugin",
      "params": {
        "app#0": "uint64",
        "allowedCaller#0": "bytes",
        "lastValidRound#0": "uint64",
        "cooldown#0": "uint64",
        "adminPrivileges#0": "uint64"
      },
      "block": "arc58_addPlugin",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "897": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "899": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "900": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"a\""
      ]
    },
    "901": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "902": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "903": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "904": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "905": {
      "op": "frame_dig -5",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "907": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "908": {
      "op": "frame_dig -4",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "allowedCaller#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "allowedCaller#0 (copy)"
      ]
    },
    "910": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "911": {
      "op": "frame_dig -3",
      "defined_out": [
        "key#0",
        "lastValidRound#0 (copy)"
      ],
      "stack_out": [
        "key#0",
        "lastValidRound#0 (copy)"
      ]
    },
    "913": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "914": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "cooldown#0 (copy)",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%val_as_bytes%1#0",
        "cooldown#0 (copy)"
      ]
    },
    "916": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%2#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "917": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%3#0"
      ]
    },
    "918": {
      "op": "intc_0 // 0",
      "stack_out": [
        "key#0",
        "aggregate%head%3#0",
        "0"
      ]
    },
    "919": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%3#0",
        "aggregate%val_as_bytes%3#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%3#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "920": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%4#0"
      ]
    },
    "921": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%head%4#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%4#0",
        "0x00"
      ]
    },
    "924": {
      "op": "intc_0 // 0",
      "stack_out": [
        "key#0",
        "aggregate%head%4#0",
        "0x00",
        "0"
      ]
    },
    "925": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "0x00",
        "adminPrivileges#0 (copy)",
        "aggregate%head%4#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%4#0",
        "0x00",
        "0",
        "adminPrivileges#0 (copy)"
      ]
    },
    "927": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%head%4#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%4#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "928": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%5#0"
      ]
    },
    "929": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "aggregate%head%5#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%5#0",
        "\"p\""
      ]
    },
    "930": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%5#0",
        "\"p\"",
        "key#0"
      ]
    },
    "932": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "aggregate%head%5#0",
        "box_prefixed_key%0#0"
      ]
    },
    "933": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%head%5#0"
      ]
    },
    "934": {
      "op": "box_put",
      "stack_out": []
    },
    "935": {
      "retsub": true,
      "op": "retsub"
    },
    "936": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_removePlugin",
      "params": {
        "app#0": "uint64",
        "allowedCaller#0": "bytes"
      },
      "block": "arc58_removePlugin",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "939": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "941": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "942": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"a\""
      ]
    },
    "943": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "944": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "945": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "946": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "947": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "949": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "950": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "allowedCaller#0 (copy)"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "allowedCaller#0 (copy)"
      ]
    },
    "952": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "953": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"p\""
      ]
    },
    "954": {
      "op": "swap",
      "stack_out": [
        "\"p\"",
        "key#0"
      ]
    },
    "955": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "956": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "957": {
      "op": "pop",
      "stack_out": []
    },
    "958": {
      "retsub": true,
      "op": "retsub"
    },
    "959": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_addNamedPlugin",
      "params": {
        "name#0": "bytes",
        "app#0": "uint64",
        "allowedCaller#0": "bytes",
        "lastValidRound#0": "uint64",
        "cooldown#0": "uint64",
        "adminPrivileges#0": "uint64"
      },
      "block": "arc58_addNamedPlugin",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "962": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "964": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "965": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"a\""
      ]
    },
    "966": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "967": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "968": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "969": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "970": {
      "op": "bytec_3 // \"n\"",
      "defined_out": [
        "\"n\""
      ],
      "stack_out": [
        "\"n\""
      ]
    },
    "971": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"n\"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"n\"",
        "name#0 (copy)"
      ]
    },
    "973": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "974": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "975": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%1#0"
      ]
    },
    "976": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%1#0"
      ]
    },
    "978": {
      "op": "!",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ]
    },
    "979": {
      "op": "assert",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "980": {
      "op": "frame_dig -5",
      "defined_out": [
        "app#0 (copy)",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "app#0 (copy)"
      ]
    },
    "982": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "983": {
      "op": "frame_dig -4",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "allowedCaller#0 (copy)",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%0#0",
        "allowedCaller#0 (copy)"
      ]
    },
    "985": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "key#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "key#0"
      ]
    },
    "986": {
      "op": "swap",
      "stack_out": [
        "key#0",
        "box_prefixed_key%0#0"
      ]
    },
    "987": {
      "op": "dig 1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "key#0",
        "key#0 (copy)"
      ],
      "stack_out": [
        "key#0",
        "box_prefixed_key%0#0",
        "key#0 (copy)"
      ]
    },
    "989": {
      "op": "box_put",
      "stack_out": [
        "key#0"
      ]
    },
    "990": {
      "op": "frame_dig -3",
      "defined_out": [
        "key#0",
        "lastValidRound#0 (copy)"
      ],
      "stack_out": [
        "key#0",
        "lastValidRound#0 (copy)"
      ]
    },
    "992": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "993": {
      "op": "frame_dig -2",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "cooldown#0 (copy)",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%val_as_bytes%1#0",
        "cooldown#0 (copy)"
      ]
    },
    "995": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%2#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%val_as_bytes%1#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "996": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%3#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%3#0"
      ]
    },
    "997": {
      "op": "intc_0 // 0",
      "stack_out": [
        "key#0",
        "aggregate%head%3#0",
        "0"
      ]
    },
    "998": {
      "op": "itob",
      "defined_out": [
        "aggregate%head%3#0",
        "aggregate%val_as_bytes%3#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%3#0",
        "aggregate%val_as_bytes%3#0"
      ]
    },
    "999": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%4#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%4#0"
      ]
    },
    "1000": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%head%4#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%4#0",
        "0x00"
      ]
    },
    "1003": {
      "op": "intc_0 // 0",
      "stack_out": [
        "key#0",
        "aggregate%head%4#0",
        "0x00",
        "0"
      ]
    },
    "1004": {
      "op": "frame_dig -1",
      "defined_out": [
        "0",
        "0x00",
        "adminPrivileges#0 (copy)",
        "aggregate%head%4#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%4#0",
        "0x00",
        "0",
        "adminPrivileges#0 (copy)"
      ]
    },
    "1006": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0",
        "aggregate%head%4#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%4#0",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "1007": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%5#0"
      ]
    },
    "1008": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "aggregate%head%5#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "aggregate%head%5#0",
        "\"p\""
      ]
    },
    "1009": {
      "op": "uncover 2",
      "stack_out": [
        "aggregate%head%5#0",
        "\"p\"",
        "key#0"
      ]
    },
    "1011": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%5#0",
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "aggregate%head%5#0",
        "box_prefixed_key%2#0"
      ]
    },
    "1012": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%2#0",
        "aggregate%head%5#0"
      ]
    },
    "1013": {
      "op": "box_put",
      "stack_out": []
    },
    "1014": {
      "retsub": true,
      "op": "retsub"
    },
    "1015": {
      "subroutine": "smart_contracts/arc58/contract.algo.ts::AbstractedAccount.arc58_removeNamedPlugin",
      "params": {
        "name#0": "bytes"
      },
      "block": "arc58_removeNamedPlugin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1018": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1020": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1021": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"a\""
      ]
    },
    "1022": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1023": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1024": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1025": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "1026": {
      "op": "bytec_3 // \"n\"",
      "defined_out": [
        "\"n\""
      ],
      "stack_out": [
        "\"n\""
      ]
    },
    "1027": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"n\"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"n\"",
        "name#0 (copy)"
      ]
    },
    "1029": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1030": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1031": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%1#0",
        "app#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "app#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1032": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "box_prefixed_key%0#0",
        "app#0"
      ]
    },
    "1033": {
      "op": "swap",
      "stack_out": [
        "app#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1034": {
      "op": "box_del",
      "defined_out": [
        "app#0",
        "{box_del}"
      ],
      "stack_out": [
        "app#0",
        "{box_del}"
      ]
    },
    "1035": {
      "op": "pop",
      "stack_out": [
        "app#0"
      ]
    },
    "1036": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "app#0"
      ],
      "stack_out": [
        "app#0",
        "\"p\""
      ]
    },
    "1037": {
      "op": "swap",
      "stack_out": [
        "\"p\"",
        "app#0"
      ]
    },
    "1038": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%2#0"
      ]
    },
    "1039": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1040": {
      "op": "pop",
      "stack_out": []
    },
    "1041": {
      "retsub": true,
      "op": "retsub"
    }
  }
}
{
    "hints": {
        "createApplication(account,account)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "arc58_changeAdmin(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_pluginChangeAdmin(application,account,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_getAdmin()byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_verifyAuthAddr()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_rekeyTo(account,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_rekeyToPlugin(application)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_rekeyToNamedPlugin(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_addPlugin(application,account,uint64,uint64,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_removePlugin(application,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_addNamedPlugin(byte[],application,account,uint64,uint64,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_removeNamedPlugin(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "a"
                },
                "controlledAddress": {
                    "type": "bytes",
                    "key": "c"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AbstractedAccount",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "account",
                        "name": "controlledAddress"
                    },
                    {
                        "type": "account",
                        "name": "admin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_changeAdmin",
                "args": [
                    {
                        "type": "account",
                        "name": "newAdmin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_pluginChangeAdmin",
                "args": [
                    {
                        "type": "application",
                        "name": "plugin"
                    },
                    {
                        "type": "account",
                        "name": "allowedCaller"
                    },
                    {
                        "type": "account",
                        "name": "newAdmin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_getAdmin",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "arc58_verifyAuthAddr",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_rekeyTo",
                "args": [
                    {
                        "type": "account",
                        "name": "addr"
                    },
                    {
                        "type": "bool",
                        "name": "flash"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_rekeyToPlugin",
                "args": [
                    {
                        "type": "application",
                        "name": "plugin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_rekeyToNamedPlugin",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_addPlugin",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    },
                    {
                        "type": "account",
                        "name": "allowedCaller"
                    },
                    {
                        "type": "uint64",
                        "name": "lastValidRound"
                    },
                    {
                        "type": "uint64",
                        "name": "cooldown"
                    },
                    {
                        "type": "bool",
                        "name": "adminPrivileges"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_removePlugin",
                "args": [
                    {
                        "type": "application",
                        "name": "app"
                    },
                    {
                        "type": "account",
                        "name": "allowedCaller"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_addNamedPlugin",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "name"
                    },
                    {
                        "type": "application",
                        "name": "app"
                    },
                    {
                        "type": "account",
                        "name": "allowedCaller"
                    },
                    {
                        "type": "uint64",
                        "name": "lastValidRound"
                    },
                    {
                        "type": "uint64",
                        "name": "cooldown"
                    },
                    {
                        "type": "bool",
                        "name": "adminPrivileges"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_removeNamedPlugin",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}
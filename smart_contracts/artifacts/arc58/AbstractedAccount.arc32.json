{
    "hints": {
        "createApplication(address,address)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "arc58_changeAdmin(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_pluginChangeAdmin(uint64,address,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_getAdmin()address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_verifyAuthAddr()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_rekeyTo(address,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_rekeyToPlugin(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_rekeyToNamedPlugin(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_addPlugin(uint64,address,uint64,uint64,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_removePlugin(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_removeNamedPlugin(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "a"
                },
                "controlledAddress": {
                    "type": "bytes",
                    "key": "c"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AbstractedAccount",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "address",
                        "name": "controlledAddress"
                    },
                    {
                        "type": "address",
                        "name": "admin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_changeAdmin",
                "args": [
                    {
                        "type": "address",
                        "name": "newAdmin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_pluginChangeAdmin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "plugin"
                    },
                    {
                        "type": "address",
                        "name": "allowedCaller"
                    },
                    {
                        "type": "address",
                        "name": "newAdmin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_getAdmin",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "arc58_verifyAuthAddr",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_rekeyTo",
                "args": [
                    {
                        "type": "address",
                        "name": "addr"
                    },
                    {
                        "type": "bool",
                        "name": "flash"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_rekeyToPlugin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "plugin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_rekeyToNamedPlugin",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_addPlugin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app"
                    },
                    {
                        "type": "address",
                        "name": "allowedCaller"
                    },
                    {
                        "type": "uint64",
                        "name": "lastValidRound"
                    },
                    {
                        "type": "uint64",
                        "name": "cooldown"
                    },
                    {
                        "type": "bool",
                        "name": "adminPrivileges"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_removePlugin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app"
                    },
                    {
                        "type": "address",
                        "name": "allowedCaller"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_addNamedPlugin",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "uint64",
                        "name": "app"
                    },
                    {
                        "type": "address",
                        "name": "allowedCaller"
                    },
                    {
                        "type": "uint64",
                        "name": "lastValidRound"
                    },
                    {
                        "type": "uint64",
                        "name": "cooldown"
                    },
                    {
                        "type": "bool",
                        "name": "adminPrivileges"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc58_removeNamedPlugin",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}
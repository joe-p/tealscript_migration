/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"AbstractedAccount","structs":{"PluginInfo":[{"name":"lastValidRound","type":"uint64"},{"name":"cooldown","type":"uint64"},{"name":"lastCalled","type":"uint64"},{"name":"adminPrivileges","type":"bool"}],"PluginsKey":[{"name":"application","type":"uint64"},{"name":"allowedCaller","type":"address"}]},"methods":[{"name":"createApplication","args":[{"type":"account","name":"controlledAddress"},{"type":"account","name":"admin"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_changeAdmin","args":[{"type":"account","name":"newAdmin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_pluginChangeAdmin","args":[{"type":"application","name":"plugin"},{"type":"account","name":"allowedCaller"},{"type":"account","name":"newAdmin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_getAdmin","args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_verifyAuthAddr","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_rekeyTo","args":[{"type":"account","name":"addr"},{"type":"bool","name":"flash"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_rekeyToPlugin","args":[{"type":"application","name":"plugin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_rekeyToNamedPlugin","args":[{"type":"string","name":"name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_addPlugin","args":[{"type":"application","name":"app"},{"type":"account","name":"allowedCaller"},{"type":"uint64","name":"lastValidRound"},{"type":"uint64","name":"cooldown"},{"type":"bool","name":"adminPrivileges"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_removePlugin","args":[{"type":"application","name":"app"},{"type":"account","name":"allowedCaller"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_addNamedPlugin","args":[{"type":"string","name":"name"},{"type":"application","name":"app"},{"type":"account","name":"allowedCaller"},{"type":"uint64","name":"lastValidRound"},{"type":"uint64","name":"cooldown"},{"type":"bool","name":"adminPrivileges"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_removeNamedPlugin","args":[{"type":"string","name":"name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YQ=="},"controlledAddress":{"keyType":"AVMString","valueType":"address","key":"Yw=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"plugins":{"keyType":"PluginsKey","valueType":"PluginInfo","prefix":"cA=="},"namedPlugins":{"keyType":"AVMBytes","valueType":"PluginsKey","prefix":"bg=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[620,771,785,924,1069],"errorMessage":"Box must have value"},{"pc":[121,139,182,206,243,261,279,302,314,335,365,383],"errorMessage":"OnCompletion is not NoOp"},{"pc":[629],"errorMessage":"This plugin does not have admin privileges"},{"pc":[600],"errorMessage":"This plugin is not in control of the account"},{"pc":[831],"errorMessage":"This sender is not allowed to trigger this plugin"},{"pc":[593,657],"errorMessage":"account funded"},{"pc":[584,598,841],"errorMessage":"application exists"},{"pc":[569,586,686,941,983,1006,1062],"errorMessage":"assert target is match for conditions"},{"pc":[387],"errorMessage":"can only call when creating"},{"pc":[124,142,185,209,246,264,282,305,317,338,368],"errorMessage":"can only call when not creating"},{"pc":[426,438,567,590,642,650,684,691,836,939,981,1004,1060],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDE2CiAgICBieXRlY2Jsb2NrICJhIiAiYyIgInAiICJuIiAweDBmODg1NDkzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czozMwogICAgLy8gZXhwb3J0IGNsYXNzIEFic3RyYWN0ZWRBY2NvdW50IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYWZ0ZXJfaWZfZWxzZUAxOAogICAgcHVzaGJ5dGVzcyAweDViY2ZjMTlhIDB4MDE3N2VkNWQgMHhkMWVjNjFmZSAweDEzYmM0NGU0IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oYWNjb3VudCxhY2NvdW50KXZvaWQiLCBtZXRob2QgImFyYzU4X2NoYW5nZUFkbWluKGFjY291bnQpdm9pZCIsIG1ldGhvZCAiYXJjNThfcGx1Z2luQ2hhbmdlQWRtaW4oYXBwbGljYXRpb24sYWNjb3VudCxhY2NvdW50KXZvaWQiLCBtZXRob2QgImFyYzU4X2dldEFkbWluKClhZGRyZXNzIgogICAgYnl0ZWMgNCAvLyBtZXRob2QgImFyYzU4X3ZlcmlmeUF1dGhBZGRyKCl2b2lkIgogICAgcHVzaGJ5dGVzcyAweDNiY2MxZTU2IDB4ZWEwNjEwODEgMHg1NmYyOGI1OCAweGQ2N2EzODBkIDB4MjAyNGUxOTYgMHhkZWUwZmFhNSAweGUzNTBiOWQ0IC8vIG1ldGhvZCAiYXJjNThfcmVrZXlUbyhhY2NvdW50LGJvb2wpdm9pZCIsIG1ldGhvZCAiYXJjNThfcmVrZXlUb1BsdWdpbihhcHBsaWNhdGlvbil2b2lkIiwgbWV0aG9kICJhcmM1OF9yZWtleVRvTmFtZWRQbHVnaW4oc3RyaW5nKXZvaWQiLCBtZXRob2QgImFyYzU4X2FkZFBsdWdpbihhcHBsaWNhdGlvbixhY2NvdW50LHVpbnQ2NCx1aW50NjQsYm9vbCl2b2lkIiwgbWV0aG9kICJhcmM1OF9yZW1vdmVQbHVnaW4oYXBwbGljYXRpb24sYWNjb3VudCl2b2lkIiwgbWV0aG9kICJhcmM1OF9hZGROYW1lZFBsdWdpbihzdHJpbmcsYXBwbGljYXRpb24sYWNjb3VudCx1aW50NjQsdWludDY0LGJvb2wpdm9pZCIsIG1ldGhvZCAiYXJjNThfcmVtb3ZlTmFtZWRQbHVnaW4oc3RyaW5nKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NyZWF0ZUFwcGxpY2F0aW9uX3JvdXRlQDMgbWFpbl9hcmM1OF9jaGFuZ2VBZG1pbl9yb3V0ZUA0IG1haW5fYXJjNThfcGx1Z2luQ2hhbmdlQWRtaW5fcm91dGVANSBtYWluX2FyYzU4X2dldEFkbWluX3JvdXRlQDYgbWFpbl9hcmM1OF92ZXJpZnlBdXRoQWRkcl9yb3V0ZUA3IG1haW5fYXJjNThfcmVrZXlUb19yb3V0ZUA4IG1haW5fYXJjNThfcmVrZXlUb1BsdWdpbl9yb3V0ZUA5IG1haW5fYXJjNThfcmVrZXlUb05hbWVkUGx1Z2luX3JvdXRlQDEwIG1haW5fYXJjNThfYWRkUGx1Z2luX3JvdXRlQDExIG1haW5fYXJjNThfcmVtb3ZlUGx1Z2luX3JvdXRlQDEyIG1haW5fYXJjNThfYWRkTmFtZWRQbHVnaW5fcm91dGVAMTMgbWFpbl9hcmM1OF9yZW1vdmVOYW1lZFBsdWdpbl9yb3V0ZUAxNAoKbWFpbl9hZnRlcl9pZl9lbHNlQDE4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MzMKICAgIC8vIGV4cG9ydCBjbGFzcyBBYnN0cmFjdGVkQWNjb3VudCBleHRlbmRzIENvbnRyYWN0IHsKICAgIGludGNfMCAvLyAwCiAgICByZXR1cm4KCm1haW5fYXJjNThfcmVtb3ZlTmFtZWRQbHVnaW5fcm91dGVAMTQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoyMDcKICAgIC8vIHB1YmxpYyBhcmM1OF9yZW1vdmVOYW1lZFBsdWdpbihuYW1lOiBzdHJpbmcpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MzMKICAgIC8vIGV4cG9ydCBjbGFzcyBBYnN0cmFjdGVkQWNjb3VudCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoyMDcKICAgIC8vIHB1YmxpYyBhcmM1OF9yZW1vdmVOYW1lZFBsdWdpbihuYW1lOiBzdHJpbmcpOiB2b2lkIHsKICAgIGNhbGxzdWIgYXJjNThfcmVtb3ZlTmFtZWRQbHVnaW4KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjNThfYWRkTmFtZWRQbHVnaW5fcm91dGVAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxODUtMTkyCiAgICAvLyBwdWJsaWMgYXJjNThfYWRkTmFtZWRQbHVnaW4oCiAgICAvLyAgIG5hbWU6IHN0cmluZywKICAgIC8vICAgYXBwOiBBcHBsaWNhdGlvbiwKICAgIC8vICAgYWxsb3dlZENhbGxlcjogQWNjb3VudCwKICAgIC8vICAgbGFzdFZhbGlkUm91bmQ6IHVpbnQ2NCwKICAgIC8vICAgY29vbGRvd246IHVpbnQ2NCwKICAgIC8vICAgYWRtaW5Qcml2aWxlZ2VzOiBib29sZWFuLAogICAgLy8gKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjMzCiAgICAvLyBleHBvcnQgY2xhc3MgQWJzdHJhY3RlZEFjY291bnQgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgdHhuYXMgQXBwbGljYXRpb25zCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTg1LTE5MgogICAgLy8gcHVibGljIGFyYzU4X2FkZE5hbWVkUGx1Z2luKAogICAgLy8gICBuYW1lOiBzdHJpbmcsCiAgICAvLyAgIGFwcDogQXBwbGljYXRpb24sCiAgICAvLyAgIGFsbG93ZWRDYWxsZXI6IEFjY291bnQsCiAgICAvLyAgIGxhc3RWYWxpZFJvdW5kOiB1aW50NjQsCiAgICAvLyAgIGNvb2xkb3duOiB1aW50NjQsCiAgICAvLyAgIGFkbWluUHJpdmlsZWdlczogYm9vbGVhbiwKICAgIC8vICk6IHZvaWQgewogICAgY2FsbHN1YiBhcmM1OF9hZGROYW1lZFBsdWdpbgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcmM1OF9yZW1vdmVQbHVnaW5fcm91dGVAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxNzgKICAgIC8vIHB1YmxpYyBhcmM1OF9yZW1vdmVQbHVnaW4oYXBwOiBBcHBsaWNhdGlvbiwgYWxsb3dlZENhbGxlcjogQWNjb3VudCk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czozMwogICAgLy8gZXhwb3J0IGNsYXNzIEFic3RyYWN0ZWRBY2NvdW50IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQXBwbGljYXRpb25zCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTc4CiAgICAvLyBwdWJsaWMgYXJjNThfcmVtb3ZlUGx1Z2luKGFwcDogQXBwbGljYXRpb24sIGFsbG93ZWRDYWxsZXI6IEFjY291bnQpOiB2b2lkIHsKICAgIGNhbGxzdWIgYXJjNThfcmVtb3ZlUGx1Z2luCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzU4X2FkZFBsdWdpbl9yb3V0ZUAxMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjE2MS0xNjcKICAgIC8vIHB1YmxpYyBhcmM1OF9hZGRQbHVnaW4oCiAgICAvLyAgIGFwcDogQXBwbGljYXRpb24sCiAgICAvLyAgIGFsbG93ZWRDYWxsZXI6IEFjY291bnQsCiAgICAvLyAgIGxhc3RWYWxpZFJvdW5kOiB1aW50NjQsCiAgICAvLyAgIGNvb2xkb3duOiB1aW50NjQsCiAgICAvLyAgIGFkbWluUHJpdmlsZWdlczogYm9vbGVhbiwKICAgIC8vICk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czozMwogICAgLy8gZXhwb3J0IGNsYXNzIEFic3RyYWN0ZWRBY2NvdW50IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQXBwbGljYXRpb25zCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgaW50Y18wIC8vIDAKICAgIGdldGJpdAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTYxLTE2NwogICAgLy8gcHVibGljIGFyYzU4X2FkZFBsdWdpbigKICAgIC8vICAgYXBwOiBBcHBsaWNhdGlvbiwKICAgIC8vICAgYWxsb3dlZENhbGxlcjogQWNjb3VudCwKICAgIC8vICAgbGFzdFZhbGlkUm91bmQ6IHVpbnQ2NCwKICAgIC8vICAgY29vbGRvd246IHVpbnQ2NCwKICAgIC8vICAgYWRtaW5Qcml2aWxlZ2VzOiBib29sZWFuLAogICAgLy8gKTogdm9pZCB7CiAgICBjYWxsc3ViIGFyYzU4X2FkZFBsdWdpbgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hcmM1OF9yZWtleVRvTmFtZWRQbHVnaW5fcm91dGVAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxNTcKICAgIC8vIHB1YmxpYyBhcmM1OF9yZWtleVRvTmFtZWRQbHVnaW4obmFtZTogc3RyaW5nKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjMzCiAgICAvLyBleHBvcnQgY2xhc3MgQWJzdHJhY3RlZEFjY291bnQgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTU3CiAgICAvLyBwdWJsaWMgYXJjNThfcmVrZXlUb05hbWVkUGx1Z2luKG5hbWU6IHN0cmluZyk6IHZvaWQgewogICAgY2FsbHN1YiBhcmM1OF9yZWtleVRvTmFtZWRQbHVnaW4KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjNThfcmVrZXlUb1BsdWdpbl9yb3V0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTM0CiAgICAvLyBwdWJsaWMgYXJjNThfcmVrZXlUb1BsdWdpbihwbHVnaW46IEFwcGxpY2F0aW9uKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjMzCiAgICAvLyBleHBvcnQgY2xhc3MgQWJzdHJhY3RlZEFjY291bnQgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBcHBsaWNhdGlvbnMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjEzNAogICAgLy8gcHVibGljIGFyYzU4X3Jla2V5VG9QbHVnaW4ocGx1Z2luOiBBcHBsaWNhdGlvbik6IHZvaWQgewogICAgY2FsbHN1YiBhcmM1OF9yZWtleVRvUGx1Z2luCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzU4X3Jla2V5VG9fcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjEwOQogICAgLy8gcHVibGljIGFyYzU4X3Jla2V5VG8oYWRkcjogQWNjb3VudCwgZmxhc2g6IGJvb2xlYW4pOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MzMKICAgIC8vIGV4cG9ydCBjbGFzcyBBYnN0cmFjdGVkQWNjb3VudCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBpbnRjXzAgLy8gMAogICAgZ2V0Yml0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxMDkKICAgIC8vIHB1YmxpYyBhcmM1OF9yZWtleVRvKGFkZHI6IEFjY291bnQsIGZsYXNoOiBib29sZWFuKTogdm9pZCB7CiAgICBjYWxsc3ViIGFyYzU4X3Jla2V5VG8KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjNThfdmVyaWZ5QXV0aEFkZHJfcm91dGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjEwNQogICAgLy8gcHVibGljIGFyYzU4X3ZlcmlmeUF1dGhBZGRyKCk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGFyYzU4X3ZlcmlmeUF1dGhBZGRyCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzU4X2dldEFkbWluX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxMDEKICAgIC8vIHB1YmxpYyBhcmM1OF9nZXRBZG1pbigpOiBhcmM0LkFkZHJlc3MgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGFyYzU4X2dldEFkbWluCiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYXJjNThfcGx1Z2luQ2hhbmdlQWRtaW5fcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjg4CiAgICAvLyBwdWJsaWMgYXJjNThfcGx1Z2luQ2hhbmdlQWRtaW4ocGx1Z2luOiBBcHBsaWNhdGlvbiwgYWxsb3dlZENhbGxlcjogQWNjb3VudCwgbmV3QWRtaW46IEFjY291bnQpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MzMKICAgIC8vIGV4cG9ydCBjbGFzcyBBYnN0cmFjdGVkQWNjb3VudCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFwcGxpY2F0aW9ucwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo4OAogICAgLy8gcHVibGljIGFyYzU4X3BsdWdpbkNoYW5nZUFkbWluKHBsdWdpbjogQXBwbGljYXRpb24sIGFsbG93ZWRDYWxsZXI6IEFjY291bnQsIG5ld0FkbWluOiBBY2NvdW50KTogdm9pZCB7CiAgICBjYWxsc3ViIGFyYzU4X3BsdWdpbkNoYW5nZUFkbWluCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FyYzU4X2NoYW5nZUFkbWluX3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo4MwogICAgLy8gcHVibGljIGFyYzU4X2NoYW5nZUFkbWluKG5ld0FkbWluOiBBY2NvdW50KTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjMzCiAgICAvLyBleHBvcnQgY2xhc3MgQWJzdHJhY3RlZEFjY291bnQgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6ODMKICAgIC8vIHB1YmxpYyBhcmM1OF9jaGFuZ2VBZG1pbihuZXdBZG1pbjogQWNjb3VudCk6IHZvaWQgewogICAgY2FsbHN1YiBhcmM1OF9jaGFuZ2VBZG1pbgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9jcmVhdGVBcHBsaWNhdGlvbl9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6NzMKICAgIC8vIHB1YmxpYyBjcmVhdGVBcHBsaWNhdGlvbihjb250cm9sbGVkQWRkcmVzczogQWNjb3VudCwgYWRtaW46IEFjY291bnQpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czozMwogICAgLy8gZXhwb3J0IGNsYXNzIEFic3RyYWN0ZWRBY2NvdW50IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmFzIEFjY291bnRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo3MwogICAgLy8gcHVibGljIGNyZWF0ZUFwcGxpY2F0aW9uKGNvbnRyb2xsZWRBZGRyZXNzOiBBY2NvdW50LCBhZG1pbjogQWNjb3VudCk6IHZvaWQgewogICAgY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjpBYnN0cmFjdGVkQWNjb3VudC52ZXJpZnlSZWtleVRvQWJzdHJhY3RlZEFjY291bnQoKSAtPiB2b2lkOgp2ZXJpZnlSZWtleVRvQWJzdHJhY3RlZEFjY291bnQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo0MgogICAgLy8gcHJpdmF0ZSB2ZXJpZnlSZWtleVRvQWJzdHJhY3RlZEFjY291bnQoKTogdm9pZCB7CiAgICBwcm90byAwIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjQzCiAgICAvLyBsZXQgcmVrZXllZEJhY2sgPSBmYWxzZQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjQ1CiAgICAvLyBmb3IgKGxldCBpID0gVHhuLmdyb3VwSW5kZXg7IGkgPCBHbG9iYWwuZ3JvdXBTaXplOyBpICs9IDEpIHsKICAgIHR4biBHcm91cEluZGV4Cgp2ZXJpZnlSZWtleVRvQWJzdHJhY3RlZEFjY291bnRfd2hpbGVfdG9wQDE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo0NQogICAgLy8gZm9yIChsZXQgaSA9IFR4bi5ncm91cEluZGV4OyBpIDwgR2xvYmFsLmdyb3VwU2l6ZTsgaSArPSAxKSB7CiAgICBmcmFtZV9kaWcgMQogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgPAogICAgYnogdmVyaWZ5UmVrZXlUb0Fic3RyYWN0ZWRBY2NvdW50X2Jsb2NrQDEyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo0OAogICAgLy8gaWYgKHR4bi5zZW5kZXIgPT09IHRoaXMuY29udHJvbGxlZEFkZHJlc3MudmFsdWUgJiYgdHhuLnJla2V5VG8gPT09IHRoaXMuY29udHJvbGxlZEFkZHJlc3MudmFsdWUpIHsKICAgIGZyYW1lX2RpZyAxCiAgICBndHhucyBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjM2CiAgICAvLyBwdWJsaWMgY29udHJvbGxlZEFkZHJlc3MgPSBHbG9iYWxTdGF0ZTxBY2NvdW50Pih7IGtleTogJ2MnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAiYyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo0OAogICAgLy8gaWYgKHR4bi5zZW5kZXIgPT09IHRoaXMuY29udHJvbGxlZEFkZHJlc3MudmFsdWUgJiYgdHhuLnJla2V5VG8gPT09IHRoaXMuY29udHJvbGxlZEFkZHJlc3MudmFsdWUpIHsKICAgID09CiAgICBieiB2ZXJpZnlSZWtleVRvQWJzdHJhY3RlZEFjY291bnRfYWZ0ZXJfaWZfZWxzZUA1CiAgICBmcmFtZV9kaWcgMQogICAgZ3R4bnMgUmVrZXlUbwogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MzYKICAgIC8vIHB1YmxpYyBjb250cm9sbGVkQWRkcmVzcyA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KHsga2V5OiAnYycgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJjIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjQ4CiAgICAvLyBpZiAodHhuLnNlbmRlciA9PT0gdGhpcy5jb250cm9sbGVkQWRkcmVzcy52YWx1ZSAmJiB0eG4ucmVrZXlUbyA9PT0gdGhpcy5jb250cm9sbGVkQWRkcmVzcy52YWx1ZSkgewogICAgPT0KICAgIGJ6IHZlcmlmeVJla2V5VG9BYnN0cmFjdGVkQWNjb3VudF9hZnRlcl9pZl9lbHNlQDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjQ5CiAgICAvLyByZWtleWVkQmFjayA9IHRydWUKICAgIGludGNfMSAvLyAxCiAgICBmcmFtZV9idXJ5IDAKCnZlcmlmeVJla2V5VG9BYnN0cmFjdGVkQWNjb3VudF9ibG9ja0AxMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjY0CiAgICAvLyBhc3NlcnQocmVrZXllZEJhY2spCiAgICBmcmFtZV9kaWcgMAogICAgYXNzZXJ0CiAgICByZXRzdWIKCnZlcmlmeVJla2V5VG9BYnN0cmFjdGVkQWNjb3VudF9hZnRlcl9pZl9lbHNlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo1NAogICAgLy8gdHhuLnR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5BcHBsaWNhdGlvbkNhbGwgJiYKICAgIGZyYW1lX2RpZyAxCiAgICBndHhucyBUeXBlRW51bQogICAgcHVzaGludCA2IC8vIDYKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo1NC01NQogICAgLy8gdHhuLnR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5BcHBsaWNhdGlvbkNhbGwgJiYKICAgIC8vICh0eG4gYXMgZ3R4bi5BcHBsaWNhdGlvbkNhbGxUeG4pLmFwcElkID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQgJiYKICAgIGJ6IHZlcmlmeVJla2V5VG9BYnN0cmFjdGVkQWNjb3VudF9hZnRlcl9pZl9lbHNlQDEwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo1NQogICAgLy8gKHR4biBhcyBndHhuLkFwcGxpY2F0aW9uQ2FsbFR4bikuYXBwSWQgPT09IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCAmJgogICAgZnJhbWVfZGlnIDEKICAgIGd0eG5zIEFwcGxpY2F0aW9uSUQKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjU0LTU1CiAgICAvLyB0eG4udHlwZSA9PT0gVHJhbnNhY3Rpb25UeXBlLkFwcGxpY2F0aW9uQ2FsbCAmJgogICAgLy8gKHR4biBhcyBndHhuLkFwcGxpY2F0aW9uQ2FsbFR4bikuYXBwSWQgPT09IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCAmJgogICAgYnogdmVyaWZ5UmVrZXlUb0Fic3RyYWN0ZWRBY2NvdW50X2FmdGVyX2lmX2Vsc2VAMTAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjU2CiAgICAvLyAodHhuIGFzIGd0eG4uQXBwbGljYXRpb25DYWxsVHhuKS5udW1BcHBBcmdzID09PSAxICYmCiAgICBmcmFtZV9kaWcgMQogICAgZ3R4bnMgTnVtQXBwQXJncwogICAgaW50Y18xIC8vIDEKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo1NC01NgogICAgLy8gdHhuLnR5cGUgPT09IFRyYW5zYWN0aW9uVHlwZS5BcHBsaWNhdGlvbkNhbGwgJiYKICAgIC8vICh0eG4gYXMgZ3R4bi5BcHBsaWNhdGlvbkNhbGxUeG4pLmFwcElkID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQgJiYKICAgIC8vICh0eG4gYXMgZ3R4bi5BcHBsaWNhdGlvbkNhbGxUeG4pLm51bUFwcEFyZ3MgPT09IDEgJiYKICAgIGJ6IHZlcmlmeVJla2V5VG9BYnN0cmFjdGVkQWNjb3VudF9hZnRlcl9pZl9lbHNlQDEwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo1NwogICAgLy8gKHR4biBhcyBndHhuLkFwcGxpY2F0aW9uQ2FsbFR4bikuYXBwQXJncygwKSA9PT0gYXJjNC5tZXRob2RTZWxlY3RvcignYXJjNThfdmVyaWZ5QXV0aEFkZHIoKXZvaWQnKQogICAgZnJhbWVfZGlnIDEKICAgIGludGNfMCAvLyAwCiAgICBndHhuc2FzIEFwcGxpY2F0aW9uQXJncwogICAgYnl0ZWMgNCAvLyBtZXRob2QgImFyYzU4X3ZlcmlmeUF1dGhBZGRyKCl2b2lkIgogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjU0LTU3CiAgICAvLyB0eG4udHlwZSA9PT0gVHJhbnNhY3Rpb25UeXBlLkFwcGxpY2F0aW9uQ2FsbCAmJgogICAgLy8gKHR4biBhcyBndHhuLkFwcGxpY2F0aW9uQ2FsbFR4bikuYXBwSWQgPT09IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZCAmJgogICAgLy8gKHR4biBhcyBndHhuLkFwcGxpY2F0aW9uQ2FsbFR4bikubnVtQXBwQXJncyA9PT0gMSAmJgogICAgLy8gKHR4biBhcyBndHhuLkFwcGxpY2F0aW9uQ2FsbFR4bikuYXBwQXJncygwKSA9PT0gYXJjNC5tZXRob2RTZWxlY3RvcignYXJjNThfdmVyaWZ5QXV0aEFkZHIoKXZvaWQnKQogICAgYnogdmVyaWZ5UmVrZXlUb0Fic3RyYWN0ZWRBY2NvdW50X2FmdGVyX2lmX2Vsc2VAMTAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjU5CiAgICAvLyByZWtleWVkQmFjayA9IHRydWUKICAgIGludGNfMSAvLyAxCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjYwCiAgICAvLyBicmVhawogICAgYiB2ZXJpZnlSZWtleVRvQWJzdHJhY3RlZEFjY291bnRfYmxvY2tAMTIKCnZlcmlmeVJla2V5VG9BYnN0cmFjdGVkQWNjb3VudF9hZnRlcl9pZl9lbHNlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6NDUKICAgIC8vIGZvciAobGV0IGkgPSBUeG4uZ3JvdXBJbmRleDsgaSA8IEdsb2JhbC5ncm91cFNpemU7IGkgKz0gMSkgewogICAgZnJhbWVfZGlnIDEKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDEKICAgIGIgdmVyaWZ5UmVrZXlUb0Fic3RyYWN0ZWRBY2NvdW50X3doaWxlX3RvcEAxCgoKLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6OkFic3RyYWN0ZWRBY2NvdW50LmNyZWF0ZUFwcGxpY2F0aW9uKGNvbnRyb2xsZWRBZGRyZXNzOiBieXRlcywgYWRtaW46IGJ5dGVzKSAtPiB2b2lkOgpjcmVhdGVBcHBsaWNhdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjczCiAgICAvLyBwdWJsaWMgY3JlYXRlQXBwbGljYXRpb24oY29udHJvbGxlZEFkZHJlc3M6IEFjY291bnQsIGFkbWluOiBBY2NvdW50KTogdm9pZCB7CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjc0CiAgICAvLyBhc3NlcnQoY29udHJvbGxlZEFkZHJlc3MgPT09IFR4bi5zZW5kZXIgfHwgYWRtaW4gPT09IFR4bi5zZW5kZXIpCiAgICBmcmFtZV9kaWcgLTIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBibnogY3JlYXRlQXBwbGljYXRpb25fYm9vbF90cnVlQDIKICAgIGZyYW1lX2RpZyAtMQogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGJ6IGNyZWF0ZUFwcGxpY2F0aW9uX2Jvb2xfZmFsc2VAMwoKY3JlYXRlQXBwbGljYXRpb25fYm9vbF90cnVlQDI6CiAgICBpbnRjXzEgLy8gMQoKY3JlYXRlQXBwbGljYXRpb25fYm9vbF9tZXJnZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6NzQKICAgIC8vIGFzc2VydChjb250cm9sbGVkQWRkcmVzcyA9PT0gVHhuLnNlbmRlciB8fCBhZG1pbiA9PT0gVHhuLnNlbmRlcikKICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6NzYKICAgIC8vIGFzc2VydChhZG1pbiAhPT0gY29udHJvbGxlZEFkZHJlc3MpCiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2RpZyAtMgogICAgIT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MzQKICAgIC8vIHB1YmxpYyBhZG1pbiA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KHsga2V5OiAnYScgfSkKICAgIGJ5dGVjXzAgLy8gImEiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo3OAogICAgLy8gdGhpcy5hZG1pbi52YWx1ZSA9IGFkbWluCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo4MAogICAgLy8gY29udHJvbGxlZEFkZHJlc3MgPT09IEdsb2JhbC56ZXJvQWRkcmVzcyA/IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzIDogY29udHJvbGxlZEFkZHJlc3MKICAgIGZyYW1lX2RpZyAtMgogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgYnogY3JlYXRlQXBwbGljYXRpb25fdGVybmFyeV9mYWxzZUA2CiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoKY3JlYXRlQXBwbGljYXRpb25fdGVybmFyeV9tZXJnZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MzYKICAgIC8vIHB1YmxpYyBjb250cm9sbGVkQWRkcmVzcyA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KHsga2V5OiAnYycgfSkKICAgIGJ5dGVjXzEgLy8gImMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo3OS04MAogICAgLy8gdGhpcy5jb250cm9sbGVkQWRkcmVzcy52YWx1ZSA9CiAgICAvLyAgIGNvbnRyb2xsZWRBZGRyZXNzID09PSBHbG9iYWwuemVyb0FkZHJlc3MgPyBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcyA6IGNvbnRyb2xsZWRBZGRyZXNzCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgpjcmVhdGVBcHBsaWNhdGlvbl90ZXJuYXJ5X2ZhbHNlQDY6CiAgICBmcmFtZV9kaWcgLTIKICAgIGIgY3JlYXRlQXBwbGljYXRpb25fdGVybmFyeV9tZXJnZUA3CgpjcmVhdGVBcHBsaWNhdGlvbl9ib29sX2ZhbHNlQDM6CiAgICBpbnRjXzAgLy8gMAogICAgYiBjcmVhdGVBcHBsaWNhdGlvbl9ib29sX21lcmdlQDQKCgovLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo6QWJzdHJhY3RlZEFjY291bnQuYXJjNThfY2hhbmdlQWRtaW4obmV3QWRtaW46IGJ5dGVzKSAtPiB2b2lkOgphcmM1OF9jaGFuZ2VBZG1pbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjgzCiAgICAvLyBwdWJsaWMgYXJjNThfY2hhbmdlQWRtaW4obmV3QWRtaW46IEFjY291bnQpOiB2b2lkIHsKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6ODQKICAgIC8vIGFzc2VydE1hdGNoKFR4biwgeyBzZW5kZXI6IHRoaXMuYWRtaW4udmFsdWUgfSkKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjM0CiAgICAvLyBwdWJsaWMgYWRtaW4gPSBHbG9iYWxTdGF0ZTxBY2NvdW50Pih7IGtleTogJ2EnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiYSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo4NAogICAgLy8gYXNzZXJ0TWF0Y2goVHhuLCB7IHNlbmRlcjogdGhpcy5hZG1pbi52YWx1ZSB9KQogICAgPT0KICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czozNAogICAgLy8gcHVibGljIGFkbWluID0gR2xvYmFsU3RhdGU8QWNjb3VudD4oeyBrZXk6ICdhJyB9KQogICAgYnl0ZWNfMCAvLyAiYSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjg1CiAgICAvLyB0aGlzLmFkbWluLnZhbHVlID0gbmV3QWRtaW4KICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjpBYnN0cmFjdGVkQWNjb3VudC5hcmM1OF9wbHVnaW5DaGFuZ2VBZG1pbihwbHVnaW46IHVpbnQ2NCwgYWxsb3dlZENhbGxlcjogYnl0ZXMsIG5ld0FkbWluOiBieXRlcykgLT4gdm9pZDoKYXJjNThfcGx1Z2luQ2hhbmdlQWRtaW46CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo4OAogICAgLy8gcHVibGljIGFyYzU4X3BsdWdpbkNoYW5nZUFkbWluKHBsdWdpbjogQXBwbGljYXRpb24sIGFsbG93ZWRDYWxsZXI6IEFjY291bnQsIG5ld0FkbWluOiBBY2NvdW50KTogdm9pZCB7CiAgICBwcm90byAzIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjg5CiAgICAvLyBhc3NlcnRNYXRjaChUeG4sIHsgc2VuZGVyOiBwbHVnaW4uYWRkcmVzcyB9KQogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC0zCiAgICBhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCiAgICBhc3NlcnQgLy8gYXBwbGljYXRpb24gZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjM2CiAgICAvLyBwdWJsaWMgY29udHJvbGxlZEFkZHJlc3MgPSBHbG9iYWxTdGF0ZTxBY2NvdW50Pih7IGtleTogJ2MnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAiYyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo5MAogICAgLy8gYXNzZXJ0KHRoaXMuY29udHJvbGxlZEFkZHJlc3MudmFsdWUuYXV0aEFkZHJlc3MgPT09IHBsdWdpbi5hZGRyZXNzLCAnVGhpcyBwbHVnaW4gaXMgbm90IGluIGNvbnRyb2wgb2YgdGhlIGFjY291bnQnKQogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RBdXRoQWRkcgogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICBmcmFtZV9kaWcgLTMKICAgIGFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKICAgIGFzc2VydCAvLyBhcHBsaWNhdGlvbiBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gVGhpcyBwbHVnaW4gaXMgbm90IGluIGNvbnRyb2wgb2YgdGhlIGFjY291bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjkyCiAgICAvLyBjb25zdCBrZXk6IFBsdWdpbnNLZXkgPSB7IGFwcGxpY2F0aW9uOiBwbHVnaW4sIGFsbG93ZWRDYWxsZXI6IGFsbG93ZWRDYWxsZXIgfQogICAgZnJhbWVfZGlnIC0zCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MzgKICAgIC8vIHB1YmxpYyBwbHVnaW5zID0gQm94TWFwPFBsdWdpbnNLZXksIFBsdWdpbkluZm8+KHsga2V5UHJlZml4OiAncCcgfSkKICAgIGJ5dGVjXzIgLy8gInAiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6OTQKICAgIC8vIHRoaXMucGx1Z2lucyhrZXkpLmV4aXN0cyAmJiB0aGlzLnBsdWdpbnMoa2V5KS52YWx1ZS5hZG1pblByaXZpbGVnZXMsCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IGFyYzU4X3BsdWdpbkNoYW5nZUFkbWluX2Jvb2xfZmFsc2VAMwogICAgZnJhbWVfZGlnIDAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBwdXNoaW50IDE5MiAvLyAxOTIKICAgIGdldGJpdAogICAgYnogYXJjNThfcGx1Z2luQ2hhbmdlQWRtaW5fYm9vbF9mYWxzZUAzCiAgICBpbnRjXzEgLy8gMQoKYXJjNThfcGx1Z2luQ2hhbmdlQWRtaW5fYm9vbF9tZXJnZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6OTMtOTYKICAgIC8vIGFzc2VydCgKICAgIC8vICAgdGhpcy5wbHVnaW5zKGtleSkuZXhpc3RzICYmIHRoaXMucGx1Z2lucyhrZXkpLnZhbHVlLmFkbWluUHJpdmlsZWdlcywKICAgIC8vICAgJ1RoaXMgcGx1Z2luIGRvZXMgbm90IGhhdmUgYWRtaW4gcHJpdmlsZWdlcycsCiAgICAvLyApCiAgICBhc3NlcnQgLy8gVGhpcyBwbHVnaW4gZG9lcyBub3QgaGF2ZSBhZG1pbiBwcml2aWxlZ2VzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czozNAogICAgLy8gcHVibGljIGFkbWluID0gR2xvYmFsU3RhdGU8QWNjb3VudD4oeyBrZXk6ICdhJyB9KQogICAgYnl0ZWNfMCAvLyAiYSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjk4CiAgICAvLyB0aGlzLmFkbWluLnZhbHVlID0gbmV3QWRtaW4KICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKYXJjNThfcGx1Z2luQ2hhbmdlQWRtaW5fYm9vbF9mYWxzZUAzOgogICAgaW50Y18wIC8vIDAKICAgIGIgYXJjNThfcGx1Z2luQ2hhbmdlQWRtaW5fYm9vbF9tZXJnZUA0CgoKLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6OkFic3RyYWN0ZWRBY2NvdW50LmFyYzU4X2dldEFkbWluKCkgLT4gYnl0ZXM6CmFyYzU4X2dldEFkbWluOgogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MzQKICAgIC8vIHB1YmxpYyBhZG1pbiA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KHsga2V5OiAnYScgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJhIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjEwMgogICAgLy8gcmV0dXJuIG5ldyBhcmM0LkFkZHJlc3ModGhpcy5hZG1pbi52YWx1ZSkKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjpBYnN0cmFjdGVkQWNjb3VudC5hcmM1OF92ZXJpZnlBdXRoQWRkcigpIC0+IHZvaWQ6CmFyYzU4X3ZlcmlmeUF1dGhBZGRyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTA1CiAgICAvLyBwdWJsaWMgYXJjNThfdmVyaWZ5QXV0aEFkZHIoKTogdm9pZCB7CiAgICBwcm90byAwIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjM2CiAgICAvLyBwdWJsaWMgY29udHJvbGxlZEFkZHJlc3MgPSBHbG9iYWxTdGF0ZTxBY2NvdW50Pih7IGtleTogJ2MnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAiYyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxMDYKICAgIC8vIGFzc2VydCh0aGlzLmNvbnRyb2xsZWRBZGRyZXNzLnZhbHVlLmF1dGhBZGRyZXNzID09PSB0aGlzLmdldEF1dGhBZGRyKCkpCiAgICBkdXAKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0QXV0aEFkZHIKICAgIHN3YXAKICAgIGNvdmVyIDIKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6NjgKICAgIC8vIHJldHVybiB0aGlzLmNvbnRyb2xsZWRBZGRyZXNzLnZhbHVlID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo2OC03MAogICAgLy8gcmV0dXJuIHRoaXMuY29udHJvbGxlZEFkZHJlc3MudmFsdWUgPT09IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICAvLyAgID8gR2xvYmFsLnplcm9BZGRyZXNzCiAgICAvLyAgIDogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGJ6IGFyYzU4X3ZlcmlmeUF1dGhBZGRyX3Rlcm5hcnlfZmFsc2VAMwogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6NjkKICAgIC8vID8gR2xvYmFsLnplcm9BZGRyZXNzCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKCmFyYzU4X3ZlcmlmeUF1dGhBZGRyX3Rlcm5hcnlfbWVyZ2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjEwNgogICAgLy8gYXNzZXJ0KHRoaXMuY29udHJvbGxlZEFkZHJlc3MudmFsdWUuYXV0aEFkZHJlc3MgPT09IHRoaXMuZ2V0QXV0aEFkZHIoKSkKICAgIGZyYW1lX2RpZyAwCiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIKCmFyYzU4X3ZlcmlmeUF1dGhBZGRyX3Rlcm5hcnlfZmFsc2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjcwCiAgICAvLyA6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgYiBhcmM1OF92ZXJpZnlBdXRoQWRkcl90ZXJuYXJ5X21lcmdlQDQKCgovLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo6QWJzdHJhY3RlZEFjY291bnQuYXJjNThfcmVrZXlUbyhhZGRyOiBieXRlcywgZmxhc2g6IHVpbnQ2NCkgLT4gdm9pZDoKYXJjNThfcmVrZXlUbzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjEwOQogICAgLy8gcHVibGljIGFyYzU4X3Jla2V5VG8oYWRkcjogQWNjb3VudCwgZmxhc2g6IGJvb2xlYW4pOiB2b2lkIHsKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTEwCiAgICAvLyBhc3NlcnRNYXRjaChUeG4sIHsgc2VuZGVyOiB0aGlzLmFkbWluLnZhbHVlIH0pCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czozNAogICAgLy8gcHVibGljIGFkbWluID0gR2xvYmFsU3RhdGU8QWNjb3VudD4oeyBrZXk6ICdhJyB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImEiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTEwCiAgICAvLyBhc3NlcnRNYXRjaChUeG4sIHsgc2VuZGVyOiB0aGlzLmFkbWluLnZhbHVlIH0pCiAgICA9PQogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjExMi0xMTkKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIHNlbmRlcjogdGhpcy5jb250cm9sbGVkQWRkcmVzcy52YWx1ZSwKICAgIC8vICAgICByZWNlaXZlcjogYWRkciwKICAgIC8vICAgICByZWtleVRvOiBhZGRyLAogICAgLy8gICAgIG5vdGU6ICdyZWtleWluZyBhYnN0cmFjdGVkIGFjY291bnQnLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjM2CiAgICAvLyBwdWJsaWMgY29udHJvbGxlZEFkZHJlc3MgPSBHbG9iYWxTdGF0ZTxBY2NvdW50Pih7IGtleTogJ2MnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAiYyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxMTcKICAgIC8vIG5vdGU6ICdyZWtleWluZyBhYnN0cmFjdGVkIGFjY291bnQnLAogICAgcHVzaGJ5dGVzICJyZWtleWluZyBhYnN0cmFjdGVkIGFjY291bnQiCiAgICBpdHhuX2ZpZWxkIE5vdGUKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBSZWtleVRvCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxMTItMTE4CiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBzZW5kZXI6IHRoaXMuY29udHJvbGxlZEFkZHJlc3MudmFsdWUsCiAgICAvLyAgICAgcmVjZWl2ZXI6IGFkZHIsCiAgICAvLyAgICAgcmVrZXlUbzogYWRkciwKICAgIC8vICAgICBub3RlOiAncmVrZXlpbmcgYWJzdHJhY3RlZCBhY2NvdW50JywKICAgIC8vICAgfSkKICAgIGludGNfMSAvLyAxCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjExMi0xMTkKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIHNlbmRlcjogdGhpcy5jb250cm9sbGVkQWRkcmVzcy52YWx1ZSwKICAgIC8vICAgICByZWNlaXZlcjogYWRkciwKICAgIC8vICAgICByZWtleVRvOiBhZGRyLAogICAgLy8gICAgIG5vdGU6ICdyZWtleWluZyBhYnN0cmFjdGVkIGFjY291bnQnLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxMjEKICAgIC8vIGlmIChmbGFzaCkgdGhpcy52ZXJpZnlSZWtleVRvQWJzdHJhY3RlZEFjY291bnQoKQogICAgZnJhbWVfZGlnIC0xCiAgICBieiBhcmM1OF9yZWtleVRvX2FmdGVyX2lmX2Vsc2VAMwogICAgY2FsbHN1YiB2ZXJpZnlSZWtleVRvQWJzdHJhY3RlZEFjY291bnQKCmFyYzU4X3Jla2V5VG9fYWZ0ZXJfaWZfZWxzZUAzOgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6OkFic3RyYWN0ZWRBY2NvdW50LnBsdWdpbkNhbGxBbGxvd2VkKGFwcDogdWludDY0LCBjYWxsZXI6IGJ5dGVzKSAtPiB1aW50NjQ6CnBsdWdpbkNhbGxBbGxvd2VkOgogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTI0CiAgICAvLyBwcml2YXRlIHBsdWdpbkNhbGxBbGxvd2VkKGFwcDogQXBwbGljYXRpb24sIGNhbGxlcjogQWNjb3VudCk6IGJvb2xlYW4gewogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxMjUKICAgIC8vIGNvbnN0IGtleTogUGx1Z2luc0tleSA9IHsgYXBwbGljYXRpb246IGFwcCwgYWxsb3dlZENhbGxlcjogY2FsbGVyIH0KICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjM4CiAgICAvLyBwdWJsaWMgcGx1Z2lucyA9IEJveE1hcDxQbHVnaW5zS2V5LCBQbHVnaW5JbmZvPih7IGtleVByZWZpeDogJ3AnIH0pCiAgICBieXRlY18yIC8vICJwIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjEyOAogICAgLy8gdGhpcy5wbHVnaW5zKGtleSkuZXhpc3RzICYmCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjEyOC0xMjkKICAgIC8vIHRoaXMucGx1Z2lucyhrZXkpLmV4aXN0cyAmJgogICAgLy8gdGhpcy5wbHVnaW5zKGtleSkudmFsdWUubGFzdFZhbGlkUm91bmQgPj0gR2xvYmFsLnJvdW5kICYmCiAgICBieiBwbHVnaW5DYWxsQWxsb3dlZF9ib29sX2ZhbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjEyOQogICAgLy8gdGhpcy5wbHVnaW5zKGtleSkudmFsdWUubGFzdFZhbGlkUm91bmQgPj0gR2xvYmFsLnJvdW5kICYmCiAgICBmcmFtZV9kaWcgMAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZ2xvYmFsIFJvdW5kCiAgICA+PQogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTI4LTEyOQogICAgLy8gdGhpcy5wbHVnaW5zKGtleSkuZXhpc3RzICYmCiAgICAvLyB0aGlzLnBsdWdpbnMoa2V5KS52YWx1ZS5sYXN0VmFsaWRSb3VuZCA+PSBHbG9iYWwucm91bmQgJiYKICAgIGJ6IHBsdWdpbkNhbGxBbGxvd2VkX2Jvb2xfZmFsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTMwCiAgICAvLyBHbG9iYWwucm91bmQgLSB0aGlzLnBsdWdpbnMoa2V5KS52YWx1ZS5sYXN0Q2FsbGVkID49IHRoaXMucGx1Z2lucyhrZXkpLnZhbHVlLmNvb2xkb3duCiAgICBnbG9iYWwgUm91bmQKICAgIGZyYW1lX2RpZyAwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZHVwCiAgICBpbnRjXzIgLy8gMTYKICAgIGV4dHJhY3RfdWludDY0CiAgICB1bmNvdmVyIDIKICAgIHN3YXAKICAgIC0KICAgIHN3YXAKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgPj0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjEyOC0xMzAKICAgIC8vIHRoaXMucGx1Z2lucyhrZXkpLmV4aXN0cyAmJgogICAgLy8gdGhpcy5wbHVnaW5zKGtleSkudmFsdWUubGFzdFZhbGlkUm91bmQgPj0gR2xvYmFsLnJvdW5kICYmCiAgICAvLyBHbG9iYWwucm91bmQgLSB0aGlzLnBsdWdpbnMoa2V5KS52YWx1ZS5sYXN0Q2FsbGVkID49IHRoaXMucGx1Z2lucyhrZXkpLnZhbHVlLmNvb2xkb3duCiAgICBieiBwbHVnaW5DYWxsQWxsb3dlZF9ib29sX2ZhbHNlQDQKICAgIGludGNfMSAvLyAxCgpwbHVnaW5DYWxsQWxsb3dlZF9ib29sX21lcmdlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxMjctMTMxCiAgICAvLyByZXR1cm4gKAogICAgLy8gICB0aGlzLnBsdWdpbnMoa2V5KS5leGlzdHMgJiYKICAgIC8vICAgdGhpcy5wbHVnaW5zKGtleSkudmFsdWUubGFzdFZhbGlkUm91bmQgPj0gR2xvYmFsLnJvdW5kICYmCiAgICAvLyAgIEdsb2JhbC5yb3VuZCAtIHRoaXMucGx1Z2lucyhrZXkpLnZhbHVlLmxhc3RDYWxsZWQgPj0gdGhpcy5wbHVnaW5zKGtleSkudmFsdWUuY29vbGRvd24KICAgIC8vICkKICAgIHN3YXAKICAgIHJldHN1YgoKcGx1Z2luQ2FsbEFsbG93ZWRfYm9vbF9mYWxzZUA0OgogICAgaW50Y18wIC8vIDAKICAgIGIgcGx1Z2luQ2FsbEFsbG93ZWRfYm9vbF9tZXJnZUA1CgoKLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6OkFic3RyYWN0ZWRBY2NvdW50LmFyYzU4X3Jla2V5VG9QbHVnaW4ocGx1Z2luOiB1aW50NjQpIC0+IHZvaWQ6CmFyYzU4X3Jla2V5VG9QbHVnaW46CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxMzQKICAgIC8vIHB1YmxpYyBhcmM1OF9yZWtleVRvUGx1Z2luKHBsdWdpbjogQXBwbGljYXRpb24pOiB2b2lkIHsKICAgIHByb3RvIDEgMAogICAgcHVzaGJ5dGVzICIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxMzUKICAgIC8vIGNvbnN0IGdsb2JhbEFsbG93ZWQgPSB0aGlzLnBsdWdpbkNhbGxBbGxvd2VkKHBsdWdpbiwgR2xvYmFsLnplcm9BZGRyZXNzKQogICAgZnJhbWVfZGlnIC0xCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIGNhbGxzdWIgcGx1Z2luQ2FsbEFsbG93ZWQKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTM3CiAgICAvLyBpZiAoIWdsb2JhbEFsbG93ZWQpCiAgICBibnogYXJjNThfcmVrZXlUb1BsdWdpbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjEzOAogICAgLy8gYXNzZXJ0KHRoaXMucGx1Z2luQ2FsbEFsbG93ZWQocGx1Z2luLCBUeG4uc2VuZGVyKSwgJ1RoaXMgc2VuZGVyIGlzIG5vdCBhbGxvd2VkIHRvIHRyaWdnZXIgdGhpcyBwbHVnaW4nKQogICAgZnJhbWVfZGlnIC0xCiAgICB0eG4gU2VuZGVyCiAgICBjYWxsc3ViIHBsdWdpbkNhbGxBbGxvd2VkCiAgICBhc3NlcnQgLy8gVGhpcyBzZW5kZXIgaXMgbm90IGFsbG93ZWQgdG8gdHJpZ2dlciB0aGlzIHBsdWdpbgoKYXJjNThfcmVrZXlUb1BsdWdpbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxNDAtMTQ3CiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBzZW5kZXI6IHRoaXMuY29udHJvbGxlZEFkZHJlc3MudmFsdWUsCiAgICAvLyAgICAgcmVjZWl2ZXI6IHRoaXMuY29udHJvbGxlZEFkZHJlc3MudmFsdWUsCiAgICAvLyAgICAgcmVrZXlUbzogcGx1Z2luLmFkZHJlc3MsCiAgICAvLyAgICAgbm90ZTogJ3Jla2V5aW5nIHRvIHBsdWdpbiBhcHAnLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjM2CiAgICAvLyBwdWJsaWMgY29udHJvbGxlZEFkZHJlc3MgPSBHbG9iYWxTdGF0ZTxBY2NvdW50Pih7IGtleTogJ2MnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAiYyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxNDQKICAgIC8vIHJla2V5VG86IHBsdWdpbi5hZGRyZXNzLAogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCiAgICBhc3NlcnQgLy8gYXBwbGljYXRpb24gZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxNDUKICAgIC8vIG5vdGU6ICdyZWtleWluZyB0byBwbHVnaW4gYXBwJywKICAgIHB1c2hieXRlcyAicmVrZXlpbmcgdG8gcGx1Z2luIGFwcCIKICAgIGl0eG5fZmllbGQgTm90ZQogICAgaXR4bl9maWVsZCBSZWtleVRvCiAgICBkdXAKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxNDAtMTQ2CiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBzZW5kZXI6IHRoaXMuY29udHJvbGxlZEFkZHJlc3MudmFsdWUsCiAgICAvLyAgICAgcmVjZWl2ZXI6IHRoaXMuY29udHJvbGxlZEFkZHJlc3MudmFsdWUsCiAgICAvLyAgICAgcmVrZXlUbzogcGx1Z2luLmFkZHJlc3MsCiAgICAvLyAgICAgbm90ZTogJ3Jla2V5aW5nIHRvIHBsdWdpbiBhcHAnLAogICAgLy8gICB9KQogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTQwLTE0NwogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgc2VuZGVyOiB0aGlzLmNvbnRyb2xsZWRBZGRyZXNzLnZhbHVlLAogICAgLy8gICAgIHJlY2VpdmVyOiB0aGlzLmNvbnRyb2xsZWRBZGRyZXNzLnZhbHVlLAogICAgLy8gICAgIHJla2V5VG86IHBsdWdpbi5hZGRyZXNzLAogICAgLy8gICAgIG5vdGU6ICdyZWtleWluZyB0byBwbHVnaW4gYXBwJywKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTUyCiAgICAvLyB9KS52YWx1ZS5sYXN0Q2FsbGVkID0gR2xvYmFsLnJvdW5kCiAgICBnbG9iYWwgUm91bmQKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTUxCiAgICAvLyBhbGxvd2VkQ2FsbGVyOiBnbG9iYWxBbGxvd2VkID8gR2xvYmFsLnplcm9BZGRyZXNzIDogVHhuLnNlbmRlciwKICAgIGZyYW1lX2RpZyAxCiAgICBieiBhcmM1OF9yZWtleVRvUGx1Z2luX3Rlcm5hcnlfZmFsc2VANQogICAgZ2xvYmFsIFplcm9BZGRyZXNzCgphcmM1OF9yZWtleVRvUGx1Z2luX3Rlcm5hcnlfbWVyZ2VANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjE0OS0xNTIKICAgIC8vIHRoaXMucGx1Z2lucyh7CiAgICAvLyAgIGFwcGxpY2F0aW9uOiBwbHVnaW4sCiAgICAvLyAgIGFsbG93ZWRDYWxsZXI6IGdsb2JhbEFsbG93ZWQgPyBHbG9iYWwuemVyb0FkZHJlc3MgOiBUeG4uc2VuZGVyLAogICAgLy8gfSkudmFsdWUubGFzdENhbGxlZCA9IEdsb2JhbC5yb3VuZAogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjM4CiAgICAvLyBwdWJsaWMgcGx1Z2lucyA9IEJveE1hcDxQbHVnaW5zS2V5LCBQbHVnaW5JbmZvPih7IGtleVByZWZpeDogJ3AnIH0pCiAgICBieXRlY18yIC8vICJwIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxNDktMTUyCiAgICAvLyB0aGlzLnBsdWdpbnMoewogICAgLy8gICBhcHBsaWNhdGlvbjogcGx1Z2luLAogICAgLy8gICBhbGxvd2VkQ2FsbGVyOiBnbG9iYWxBbGxvd2VkID8gR2xvYmFsLnplcm9BZGRyZXNzIDogVHhuLnNlbmRlciwKICAgIC8vIH0pLnZhbHVlLmxhc3RDYWxsZWQgPSBHbG9iYWwucm91bmQKICAgIGZyYW1lX2RpZyAwCiAgICBpdG9iCiAgICBpbnRjXzIgLy8gMTYKICAgIHN3YXAKICAgIGJveF9yZXBsYWNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxNTQKICAgIC8vIHRoaXMudmVyaWZ5UmVrZXlUb0Fic3RyYWN0ZWRBY2NvdW50KCkKICAgIGNhbGxzdWIgdmVyaWZ5UmVrZXlUb0Fic3RyYWN0ZWRBY2NvdW50CiAgICByZXRzdWIKCmFyYzU4X3Jla2V5VG9QbHVnaW5fdGVybmFyeV9mYWxzZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTUxCiAgICAvLyBhbGxvd2VkQ2FsbGVyOiBnbG9iYWxBbGxvd2VkID8gR2xvYmFsLnplcm9BZGRyZXNzIDogVHhuLnNlbmRlciwKICAgIHR4biBTZW5kZXIKICAgIGIgYXJjNThfcmVrZXlUb1BsdWdpbl90ZXJuYXJ5X21lcmdlQDYKCgovLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo6QWJzdHJhY3RlZEFjY291bnQuYXJjNThfcmVrZXlUb05hbWVkUGx1Z2luKG5hbWU6IGJ5dGVzKSAtPiB2b2lkOgphcmM1OF9yZWtleVRvTmFtZWRQbHVnaW46CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxNTcKICAgIC8vIHB1YmxpYyBhcmM1OF9yZWtleVRvTmFtZWRQbHVnaW4obmFtZTogc3RyaW5nKTogdm9pZCB7CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjQwCiAgICAvLyBwdWJsaWMgbmFtZWRQbHVnaW5zID0gQm94TWFwPGJ5dGVzLCBQbHVnaW5zS2V5Pih7IGtleVByZWZpeDogJ24nIH0pCiAgICBieXRlY18zIC8vICJuIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjE1OAogICAgLy8gdGhpcy5hcmM1OF9yZWtleVRvUGx1Z2luKHRoaXMubmFtZWRQbHVnaW5zKEJ5dGVzKG5hbWUpKS52YWx1ZS5hcHBsaWNhdGlvbikKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50NjQKICAgIGNhbGxzdWIgYXJjNThfcmVrZXlUb1BsdWdpbgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6OkFic3RyYWN0ZWRBY2NvdW50LmFyYzU4X2FkZFBsdWdpbihhcHA6IHVpbnQ2NCwgYWxsb3dlZENhbGxlcjogYnl0ZXMsIGxhc3RWYWxpZFJvdW5kOiB1aW50NjQsIGNvb2xkb3duOiB1aW50NjQsIGFkbWluUHJpdmlsZWdlczogdWludDY0KSAtPiB2b2lkOgphcmM1OF9hZGRQbHVnaW46CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxNjEtMTY3CiAgICAvLyBwdWJsaWMgYXJjNThfYWRkUGx1Z2luKAogICAgLy8gICBhcHA6IEFwcGxpY2F0aW9uLAogICAgLy8gICBhbGxvd2VkQ2FsbGVyOiBBY2NvdW50LAogICAgLy8gICBsYXN0VmFsaWRSb3VuZDogdWludDY0LAogICAgLy8gICBjb29sZG93bjogdWludDY0LAogICAgLy8gICBhZG1pblByaXZpbGVnZXM6IGJvb2xlYW4sCiAgICAvLyApOiB2b2lkIHsKICAgIHByb3RvIDUgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTY4CiAgICAvLyBhc3NlcnRNYXRjaChUeG4sIHsgc2VuZGVyOiB0aGlzLmFkbWluLnZhbHVlIH0pCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czozNAogICAgLy8gcHVibGljIGFkbWluID0gR2xvYmFsU3RhdGU8QWNjb3VudD4oeyBrZXk6ICdhJyB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gImEiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTY4CiAgICAvLyBhc3NlcnRNYXRjaChUeG4sIHsgc2VuZGVyOiB0aGlzLmFkbWluLnZhbHVlIH0pCiAgICA9PQogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjE2OQogICAgLy8gY29uc3Qga2V5OiBQbHVnaW5zS2V5ID0geyBhcHBsaWNhdGlvbjogYXBwLCBhbGxvd2VkQ2FsbGVyOiBhbGxvd2VkQ2FsbGVyIH0KICAgIGZyYW1lX2RpZyAtNQogICAgaXRvYgogICAgZnJhbWVfZGlnIC00CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjE3MC0xNzUKICAgIC8vIHRoaXMucGx1Z2lucyhrZXkpLnZhbHVlID0gewogICAgLy8gICBsYXN0VmFsaWRSb3VuZDogbGFzdFZhbGlkUm91bmQsCiAgICAvLyAgIGNvb2xkb3duOiBjb29sZG93biwKICAgIC8vICAgbGFzdENhbGxlZDogMCwKICAgIC8vICAgYWRtaW5Qcml2aWxlZ2VzOiBhZG1pblByaXZpbGVnZXMsCiAgICAvLyB9CiAgICBmcmFtZV9kaWcgLTMKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxNzMKICAgIC8vIGxhc3RDYWxsZWQ6IDAsCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTcwLTE3NQogICAgLy8gdGhpcy5wbHVnaW5zKGtleSkudmFsdWUgPSB7CiAgICAvLyAgIGxhc3RWYWxpZFJvdW5kOiBsYXN0VmFsaWRSb3VuZCwKICAgIC8vICAgY29vbGRvd246IGNvb2xkb3duLAogICAgLy8gICBsYXN0Q2FsbGVkOiAwLAogICAgLy8gICBhZG1pblByaXZpbGVnZXM6IGFkbWluUHJpdmlsZWdlcywKICAgIC8vIH0KICAgIGl0b2IKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9kaWcgLTEKICAgIHNldGJpdAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czozOAogICAgLy8gcHVibGljIHBsdWdpbnMgPSBCb3hNYXA8UGx1Z2luc0tleSwgUGx1Z2luSW5mbz4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWNfMiAvLyAicCIKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxNzAtMTc1CiAgICAvLyB0aGlzLnBsdWdpbnMoa2V5KS52YWx1ZSA9IHsKICAgIC8vICAgbGFzdFZhbGlkUm91bmQ6IGxhc3RWYWxpZFJvdW5kLAogICAgLy8gICBjb29sZG93bjogY29vbGRvd24sCiAgICAvLyAgIGxhc3RDYWxsZWQ6IDAsCiAgICAvLyAgIGFkbWluUHJpdmlsZWdlczogYWRtaW5Qcml2aWxlZ2VzLAogICAgLy8gfQogICAgc3dhcAogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6OkFic3RyYWN0ZWRBY2NvdW50LmFyYzU4X3JlbW92ZVBsdWdpbihhcHA6IHVpbnQ2NCwgYWxsb3dlZENhbGxlcjogYnl0ZXMpIC0+IHZvaWQ6CmFyYzU4X3JlbW92ZVBsdWdpbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjE3OAogICAgLy8gcHVibGljIGFyYzU4X3JlbW92ZVBsdWdpbihhcHA6IEFwcGxpY2F0aW9uLCBhbGxvd2VkQ2FsbGVyOiBBY2NvdW50KTogdm9pZCB7CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjE3OQogICAgLy8gYXNzZXJ0TWF0Y2goVHhuLCB7IHNlbmRlcjogdGhpcy5hZG1pbi52YWx1ZSB9KQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MzQKICAgIC8vIHB1YmxpYyBhZG1pbiA9IEdsb2JhbFN0YXRlPEFjY291bnQ+KHsga2V5OiAnYScgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJhIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjE3OQogICAgLy8gYXNzZXJ0TWF0Y2goVHhuLCB7IHNlbmRlcjogdGhpcy5hZG1pbi52YWx1ZSB9KQogICAgPT0KICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxODEKICAgIC8vIGNvbnN0IGtleTogUGx1Z2luc0tleSA9IHsgYXBwbGljYXRpb246IGFwcCwgYWxsb3dlZENhbGxlcjogYWxsb3dlZENhbGxlciB9CiAgICBmcmFtZV9kaWcgLTIKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czozOAogICAgLy8gcHVibGljIHBsdWdpbnMgPSBCb3hNYXA8UGx1Z2luc0tleSwgUGx1Z2luSW5mbz4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWNfMiAvLyAicCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTgyCiAgICAvLyB0aGlzLnBsdWdpbnMoa2V5KS5kZWxldGUoKQogICAgYm94X2RlbAogICAgcG9wCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czo6QWJzdHJhY3RlZEFjY291bnQuYXJjNThfYWRkTmFtZWRQbHVnaW4obmFtZTogYnl0ZXMsIGFwcDogdWludDY0LCBhbGxvd2VkQ2FsbGVyOiBieXRlcywgbGFzdFZhbGlkUm91bmQ6IHVpbnQ2NCwgY29vbGRvd246IHVpbnQ2NCwgYWRtaW5Qcml2aWxlZ2VzOiB1aW50NjQpIC0+IHZvaWQ6CmFyYzU4X2FkZE5hbWVkUGx1Z2luOgogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTg1LTE5MgogICAgLy8gcHVibGljIGFyYzU4X2FkZE5hbWVkUGx1Z2luKAogICAgLy8gICBuYW1lOiBzdHJpbmcsCiAgICAvLyAgIGFwcDogQXBwbGljYXRpb24sCiAgICAvLyAgIGFsbG93ZWRDYWxsZXI6IEFjY291bnQsCiAgICAvLyAgIGxhc3RWYWxpZFJvdW5kOiB1aW50NjQsCiAgICAvLyAgIGNvb2xkb3duOiB1aW50NjQsCiAgICAvLyAgIGFkbWluUHJpdmlsZWdlczogYm9vbGVhbiwKICAgIC8vICk6IHZvaWQgewogICAgcHJvdG8gNiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxOTMKICAgIC8vIGFzc2VydE1hdGNoKFR4biwgeyBzZW5kZXI6IHRoaXMuYWRtaW4udmFsdWUgfSkKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjM0CiAgICAvLyBwdWJsaWMgYWRtaW4gPSBHbG9iYWxTdGF0ZTxBY2NvdW50Pih7IGtleTogJ2EnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiYSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxOTMKICAgIC8vIGFzc2VydE1hdGNoKFR4biwgeyBzZW5kZXI6IHRoaXMuYWRtaW4udmFsdWUgfSkKICAgID09CiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6NDAKICAgIC8vIHB1YmxpYyBuYW1lZFBsdWdpbnMgPSBCb3hNYXA8Ynl0ZXMsIFBsdWdpbnNLZXk+KHsga2V5UHJlZml4OiAnbicgfSkKICAgIGJ5dGVjXzMgLy8gIm4iCiAgICBmcmFtZV9kaWcgLTYKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTk1CiAgICAvLyBhc3NlcnQoIXRoaXMubmFtZWRQbHVnaW5zKG5hbWVCeXRlcykuZXhpc3RzKQogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTk3CiAgICAvLyBjb25zdCBrZXk6IFBsdWdpbnNLZXkgPSB7IGFwcGxpY2F0aW9uOiBhcHAsIGFsbG93ZWRDYWxsZXI6IGFsbG93ZWRDYWxsZXIgfQogICAgZnJhbWVfZGlnIC01CiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTQKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTk4CiAgICAvLyB0aGlzLm5hbWVkUGx1Z2lucyhuYW1lQnl0ZXMpLnZhbHVlID0gY2xvbmUoa2V5KQogICAgc3dhcAogICAgZGlnIDEKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjE5OS0yMDQKICAgIC8vIHRoaXMucGx1Z2lucyhrZXkpLnZhbHVlID0gewogICAgLy8gICBsYXN0VmFsaWRSb3VuZDogbGFzdFZhbGlkUm91bmQsCiAgICAvLyAgIGNvb2xkb3duOiBjb29sZG93biwKICAgIC8vICAgbGFzdENhbGxlZDogMCwKICAgIC8vICAgYWRtaW5Qcml2aWxlZ2VzOiBhZG1pblByaXZpbGVnZXMsCiAgICAvLyB9CiAgICBmcmFtZV9kaWcgLTMKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoyMDIKICAgIC8vIGxhc3RDYWxsZWQ6IDAsCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MTk5LTIwNAogICAgLy8gdGhpcy5wbHVnaW5zKGtleSkudmFsdWUgPSB7CiAgICAvLyAgIGxhc3RWYWxpZFJvdW5kOiBsYXN0VmFsaWRSb3VuZCwKICAgIC8vICAgY29vbGRvd246IGNvb2xkb3duLAogICAgLy8gICBsYXN0Q2FsbGVkOiAwLAogICAgLy8gICBhZG1pblByaXZpbGVnZXM6IGFkbWluUHJpdmlsZWdlcywKICAgIC8vIH0KICAgIGl0b2IKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9kaWcgLTEKICAgIHNldGJpdAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czozOAogICAgLy8gcHVibGljIHBsdWdpbnMgPSBCb3hNYXA8UGx1Z2luc0tleSwgUGx1Z2luSW5mbz4oeyBrZXlQcmVmaXg6ICdwJyB9KQogICAgYnl0ZWNfMiAvLyAicCIKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoxOTktMjA0CiAgICAvLyB0aGlzLnBsdWdpbnMoa2V5KS52YWx1ZSA9IHsKICAgIC8vICAgbGFzdFZhbGlkUm91bmQ6IGxhc3RWYWxpZFJvdW5kLAogICAgLy8gICBjb29sZG93bjogY29vbGRvd24sCiAgICAvLyAgIGxhc3RDYWxsZWQ6IDAsCiAgICAvLyAgIGFkbWluUHJpdmlsZWdlczogYWRtaW5Qcml2aWxlZ2VzLAogICAgLy8gfQogICAgc3dhcAogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6OkFic3RyYWN0ZWRBY2NvdW50LmFyYzU4X3JlbW92ZU5hbWVkUGx1Z2luKG5hbWU6IGJ5dGVzKSAtPiB2b2lkOgphcmM1OF9yZW1vdmVOYW1lZFBsdWdpbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjIwNwogICAgLy8gcHVibGljIGFyYzU4X3JlbW92ZU5hbWVkUGx1Z2luKG5hbWU6IHN0cmluZyk6IHZvaWQgewogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoyMDgKICAgIC8vIGFzc2VydE1hdGNoKFR4biwgeyBzZW5kZXI6IHRoaXMuYWRtaW4udmFsdWUgfSkKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjM0CiAgICAvLyBwdWJsaWMgYWRtaW4gPSBHbG9iYWxTdGF0ZTxBY2NvdW50Pih7IGtleTogJ2EnIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiYSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoyMDgKICAgIC8vIGFzc2VydE1hdGNoKFR4biwgeyBzZW5kZXI6IHRoaXMuYWRtaW4udmFsdWUgfSkKICAgID09CiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6NDAKICAgIC8vIHB1YmxpYyBuYW1lZFBsdWdpbnMgPSBCb3hNYXA8Ynl0ZXMsIFBsdWdpbnNLZXk+KHsga2V5UHJlZml4OiAnbicgfSkKICAgIGJ5dGVjXzMgLy8gIm4iCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MjExCiAgICAvLyBjb25zdCBhcHAgPSBjbG9uZSh0aGlzLm5hbWVkUGx1Z2lucyhuYW1lQnl0ZXMpLnZhbHVlKQogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL2FyYzU4L2NvbnRyYWN0LmFsZ28udHM6MjEyCiAgICAvLyB0aGlzLm5hbWVkUGx1Z2lucyhuYW1lQnl0ZXMpLmRlbGV0ZSgpCiAgICBzd2FwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9hcmM1OC9jb250cmFjdC5hbGdvLnRzOjM4CiAgICAvLyBwdWJsaWMgcGx1Z2lucyA9IEJveE1hcDxQbHVnaW5zS2V5LCBQbHVnaW5JbmZvPih7IGtleVByZWZpeDogJ3AnIH0pCiAgICBieXRlY18yIC8vICJwIgogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXJjNTgvY29udHJhY3QuYWxnby50czoyMTMKICAgIC8vIHRoaXMucGx1Z2lucyhhcHApLmRlbGV0ZSgpCiAgICBib3hfZGVsCiAgICBwb3AKICAgIHJldHN1Ygo=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAEQJgUBYQFjAXABbgQPiFSTMRtBAFqCBARbz8GaBAF37V0E0exh/gQTvETkJwSCBwQ7zB5WBOoGEIEEVvKLWATWejgNBCAk4ZYE3uD6pQTjULnUNhoAjgwBCAD2ANgAwwC3AKAAjgB8AFcAPwAUAAIiQzEZFEQxGEQ2GgFXAgCIA5YjQzEZFEQxGEQ2GgFXAgA2GgIXwDI2GgMXwBw2GgQXNhoFFzYaBiJTiAMzI0MxGRREMRhENhoBF8AyNhoCF8AciAMEI0MxGRREMRhENhoBF8AyNhoCF8AcNhoDFzYaBBc2GgUiU4gCtSNDMRkURDEYRDYaAVcCAIgClCNDMRkURDEYRDYaARfAMogCFiNDMRkURDEYRDYaARfAHDYaAiJTiAF7I0MxGRREMRhEiAFPI0MxGRREMRhEiAE+gAQVH3x1TFCwI0MxGRREMRhENhoBF8AyNhoCF8AcNhoDF8AciADXI0MxGRREMRhENhoBF8AciAC1I0MxGRREMRgURDYaARfAHDYaAhfAHIgAZiNDigAAIjEWiwEyBAxBABuLATgAIillRBJBABOLATggIillRBJBAAcjjACLAESJiwE4EIEGEkEAJIsBOBgyCBJBABqLATgbIxJBABGLASLCGicEEkEABiOMAEL/zosBIwiMAUL/oooCAIv+MQASQAAIi/8xABJBAB8jRIv/i/4TRCiL/2eL/jIDEkEABjIKKUxniYv+Qv/3IkL/3ooBADEAIihlRBJEKIv/Z4mKAwAxAIv9cghEEkQiKWVEcwJEi/1yCEQSRIv9Fov+UCpMUEm9RQFBABKLAL5EgcABU0EAByNEKIv/Z4kiQv/2IihlRImKAAAiKWVESXMCTE4CRDIKEkEABzIDiwASRIkyCkL/9ooCADEAIihlRBJEsSIpZUSAG3Jla2V5aW5nIGFic3RyYWN0ZWQgYWNjb3VudLIFi/6yIIv+sgeyACOyECKyAbOL/0EAA4j+qYmKAgGL/haL/1AqTFBJvUUBQQAkiwC+RCJbMgYPQQAYMgaLAL5ESSRbTwJMCUyBCFsPQQADI0yJIkL/+ooBAIAAi/8yA4j/uUlAAAiL/zEAiP+uRLEiKWVEi/9yCESAFnJla2V5aW5nIHRvIHBsdWdpbiBhcHCyBbIgSbIHsgAjshAisgGzMgaMAIsBQQAUMgOL/xZMUCpMUIsAFiRMu4j+B4kxAEL/6YoBACuL/1C+RCJbiP+GiYoFADEAIihlRBJEi/sWi/xQi/0Wi/4WUCIWUIABACKL/1RQKk8CUEy/iYoCADEAIihlRBJEi/4Wi/9QKkxQvEiJigYAMQAiKGVEEkQri/pQSb1FARREi/sWi/xQTEsBv4v9Fov+FlAiFlCAAQAii/9UUCpPAlBMv4mKAQAxACIoZUQSRCuL/1BJvkRMvEgqTFC8SIk=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type PluginInfo = {
  lastValidRound: bigint,
  cooldown: bigint,
  lastCalled: bigint,
  adminPrivileges: boolean
}


/**
 * Converts the ABI tuple representation of a PluginInfo to the struct representation
 */
export function PluginInfoFromTuple(abiTuple: [bigint, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PluginInfo, APP_SPEC.structs) as PluginInfo
}

export type PluginsKey = {
  application: bigint,
  allowedCaller: string
}


/**
 * Converts the ABI tuple representation of a PluginsKey to the struct representation
 */
export function PluginsKeyFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PluginsKey, APP_SPEC.structs) as PluginsKey
}

/**
 * The argument types for the AbstractedAccount contract
 */
export type AbstractedAccountArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(account,account)void': {
      controlledAddress: Uint8Array | string
      admin: Uint8Array | string
    }
    'arc58_changeAdmin(account)void': {
      newAdmin: Uint8Array | string
    }
    'arc58_pluginChangeAdmin(application,account,account)void': {
      plugin: bigint
      allowedCaller: Uint8Array | string
      newAdmin: Uint8Array | string
    }
    'arc58_getAdmin()address': Record<string, never>
    'arc58_verifyAuthAddr()void': Record<string, never>
    'arc58_rekeyTo(account,bool)void': {
      addr: Uint8Array | string
      flash: boolean
    }
    'arc58_rekeyToPlugin(application)void': {
      plugin: bigint
    }
    'arc58_rekeyToNamedPlugin(string)void': {
      name: string
    }
    'arc58_addPlugin(application,account,uint64,uint64,bool)void': {
      app: bigint
      allowedCaller: Uint8Array | string
      lastValidRound: bigint | number
      cooldown: bigint | number
      adminPrivileges: boolean
    }
    'arc58_removePlugin(application,account)void': {
      app: bigint
      allowedCaller: Uint8Array | string
    }
    'arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void': {
      name: string
      app: bigint
      allowedCaller: Uint8Array | string
      lastValidRound: bigint | number
      cooldown: bigint | number
      adminPrivileges: boolean
    }
    'arc58_removeNamedPlugin(string)void': {
      name: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(account,account)void': [controlledAddress: Uint8Array | string, admin: Uint8Array | string]
    'arc58_changeAdmin(account)void': [newAdmin: Uint8Array | string]
    'arc58_pluginChangeAdmin(application,account,account)void': [plugin: bigint, allowedCaller: Uint8Array | string, newAdmin: Uint8Array | string]
    'arc58_getAdmin()address': []
    'arc58_verifyAuthAddr()void': []
    'arc58_rekeyTo(account,bool)void': [addr: Uint8Array | string, flash: boolean]
    'arc58_rekeyToPlugin(application)void': [plugin: bigint]
    'arc58_rekeyToNamedPlugin(string)void': [name: string]
    'arc58_addPlugin(application,account,uint64,uint64,bool)void': [app: bigint, allowedCaller: Uint8Array | string, lastValidRound: bigint | number, cooldown: bigint | number, adminPrivileges: boolean]
    'arc58_removePlugin(application,account)void': [app: bigint, allowedCaller: Uint8Array | string]
    'arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void': [name: string, app: bigint, allowedCaller: Uint8Array | string, lastValidRound: bigint | number, cooldown: bigint | number, adminPrivileges: boolean]
    'arc58_removeNamedPlugin(string)void': [name: string]
  }
}

/**
 * The return type for each method
 */
export type AbstractedAccountReturns = {
  'createApplication(account,account)void': void
  'arc58_changeAdmin(account)void': void
  'arc58_pluginChangeAdmin(application,account,account)void': void
  'arc58_getAdmin()address': string
  'arc58_verifyAuthAddr()void': void
  'arc58_rekeyTo(account,bool)void': void
  'arc58_rekeyToPlugin(application)void': void
  'arc58_rekeyToNamedPlugin(string)void': void
  'arc58_addPlugin(application,account,uint64,uint64,bool)void': void
  'arc58_removePlugin(application,account)void': void
  'arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void': void
  'arc58_removeNamedPlugin(string)void': void
}

/**
 * Defines the types of available calls and state of the AbstractedAccount smart contract.
 */
export type AbstractedAccountTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(account,account)void' | 'createApplication', {
      argsObj: AbstractedAccountArgs['obj']['createApplication(account,account)void']
      argsTuple: AbstractedAccountArgs['tuple']['createApplication(account,account)void']
      returns: AbstractedAccountReturns['createApplication(account,account)void']
    }>
    & Record<'arc58_changeAdmin(account)void' | 'arc58_changeAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_changeAdmin(account)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_changeAdmin(account)void']
      returns: AbstractedAccountReturns['arc58_changeAdmin(account)void']
    }>
    & Record<'arc58_pluginChangeAdmin(application,account,account)void' | 'arc58_pluginChangeAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(application,account,account)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(application,account,account)void']
      returns: AbstractedAccountReturns['arc58_pluginChangeAdmin(application,account,account)void']
    }>
    & Record<'arc58_getAdmin()address' | 'arc58_getAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_getAdmin()address']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_getAdmin()address']
      returns: AbstractedAccountReturns['arc58_getAdmin()address']
    }>
    & Record<'arc58_verifyAuthAddr()void' | 'arc58_verifyAuthAddr', {
      argsObj: AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']
      returns: AbstractedAccountReturns['arc58_verifyAuthAddr()void']
    }>
    & Record<'arc58_rekeyTo(account,bool)void' | 'arc58_rekeyTo', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyTo(account,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyTo(account,bool)void']
      returns: AbstractedAccountReturns['arc58_rekeyTo(account,bool)void']
    }>
    & Record<'arc58_rekeyToPlugin(application)void' | 'arc58_rekeyToPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(application)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(application)void']
      returns: AbstractedAccountReturns['arc58_rekeyToPlugin(application)void']
    }>
    & Record<'arc58_rekeyToNamedPlugin(string)void' | 'arc58_rekeyToNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']
      returns: AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void']
    }>
    & Record<'arc58_addPlugin(application,account,uint64,uint64,bool)void' | 'arc58_addPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addPlugin(application,account,uint64,uint64,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addPlugin(application,account,uint64,uint64,bool)void']
      returns: AbstractedAccountReturns['arc58_addPlugin(application,account,uint64,uint64,bool)void']
    }>
    & Record<'arc58_removePlugin(application,account)void' | 'arc58_removePlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removePlugin(application,account)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removePlugin(application,account)void']
      returns: AbstractedAccountReturns['arc58_removePlugin(application,account)void']
    }>
    & Record<'arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void' | 'arc58_addNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void']
      returns: AbstractedAccountReturns['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void']
    }>
    & Record<'arc58_removeNamedPlugin(string)void' | 'arc58_removeNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']
      returns: AbstractedAccountReturns['arc58_removeNamedPlugin(string)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
        controlledAddress: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        plugins: Map<PluginsKey, PluginInfo>
        namedPlugins: Map<Uint8Array | string, PluginsKey>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AbstractedAccountSignatures = keyof AbstractedAccountTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AbstractedAccountNonVoidMethodSignatures = keyof AbstractedAccountTypes['methods'] extends infer T ? T extends keyof AbstractedAccountTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AbstractedAccountSignatures> = AbstractedAccountTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AbstractedAccountSignatures> = AbstractedAccountTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AbstractedAccountTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AbstractedAccountTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AbstractedAccountCreateCallParams =
  | Expand<CallParams<AbstractedAccountArgs['obj']['createApplication(account,account)void'] | AbstractedAccountArgs['tuple']['createApplication(account,account)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AbstractedAccountArgs['obj']['createApplication(account,account)void'] | AbstractedAccountArgs['tuple']['createApplication(account,account)void']> & {method: 'createApplication(account,account)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AbstractedAccountDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AbstractedAccountCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AbstractedAccount smart contract
 */
export abstract class AbstractedAccountParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AbstractedAccountCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(account,account)void':
            return AbstractedAccountParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AbstractedAccount smart contract using the createApplication(account,account)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AbstractedAccountArgs['obj']['createApplication(account,account)void'] | AbstractedAccountArgs['tuple']['createApplication(account,account)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(account,account)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.controlledAddress, params.args.admin],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc58_changeAdmin(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58ChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(account)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_changeAdmin(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the arc58_pluginChangeAdmin(application,account,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58PluginChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(application,account,account)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(application,account,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_pluginChangeAdmin(application,account,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin, params.args.allowedCaller, params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the arc58_getAdmin()address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_getAdmin()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc58_verifyAuthAddr()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58VerifyAuthAddr(params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_verifyAuthAddr()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyTo(account,bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyTo(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(account,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(account,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyTo(account,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addr, params.args.flash],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToPlugin(application)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyToPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(application)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(application)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyToPlugin(application)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToNamedPlugin(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyToNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyToNamedPlugin(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the arc58_addPlugin(application,account,uint64,uint64,bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(application,account,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(application,account,uint64,uint64,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addPlugin(application,account,uint64,uint64,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller, params.args.lastValidRound, params.args.cooldown, params.args.adminPrivileges],
    }
  }
  /**
   * Constructs a no op call for the arc58_removePlugin(application,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemovePlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(application,account)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(application,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removePlugin(application,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller],
    }
  }
  /**
   * Constructs a no op call for the arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.app, params.args.allowedCaller, params.args.lastValidRound, params.args.cooldown, params.args.adminPrivileges],
    }
  }
  /**
   * Constructs a no op call for the arc58_removeNamedPlugin(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemoveNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removeNamedPlugin(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AbstractedAccount smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AbstractedAccountFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AbstractedAccountFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AbstractedAccountClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AbstractedAccountClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AbstractedAccount smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AbstractedAccountDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AbstractedAccountParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AbstractedAccountCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AbstractedAccountClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(account,account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AbstractedAccountArgs['obj']['createApplication(account,account)void'] | AbstractedAccountArgs['tuple']['createApplication(account,account)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AbstractedAccountParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(account,account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AbstractedAccountArgs['obj']['createApplication(account,account)void'] | AbstractedAccountArgs['tuple']['createApplication(account,account)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AbstractedAccountParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using an ABI method call using the createApplication(account,account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AbstractedAccountArgs['obj']['createApplication(account,account)void'] | AbstractedAccountArgs['tuple']['createApplication(account,account)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AbstractedAccountParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AbstractedAccountReturns['createApplication(account,account)void']) }, appClient: new AbstractedAccountClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AbstractedAccount smart contract
 */
export class AbstractedAccountClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AbstractedAccount app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AbstractedAccountNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AbstractedAccountClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AbstractedAccountClient> {
    return new AbstractedAccountClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AbstractedAccountClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AbstractedAccountClient> {
    return new AbstractedAccountClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58ChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(account)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(application,account,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58PluginChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(application,account,account)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(application,account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58GetAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58VerifyAuthAddr: (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(account,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyTo: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(account,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(account,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyToPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(application)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyToNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(application,account,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(application,account,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(application,account,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(application,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemovePlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(application,account)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(application,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemoveNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58ChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(account)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(application,account,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58PluginChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(application,account,account)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(application,account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58GetAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58VerifyAuthAddr: (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(account,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyTo: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(account,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(account,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyToPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(application)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyToNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(application,account,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(application,account,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(application,account,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(application,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemovePlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(application,account)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(application,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemoveNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58ChangeAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(account)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_changeAdmin(account)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(application,account,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58PluginChangeAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(application,account,account)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(application,account,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_pluginChangeAdmin(application,account,account)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58GetAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_getAdmin()address'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58VerifyAuthAddr: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_verifyAuthAddr()void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(account,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyTo: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(account,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(account,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyTo(account,bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(application)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyToPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(application)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(application)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyToPlugin(application)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyToNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(application,account,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(application,account,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(application,account,uint64,uint64,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_addPlugin(application,account,uint64,uint64,bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(application,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemovePlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(application,account)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(application,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_removePlugin(application,account)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemoveNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_removeNamedPlugin(string)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AbstractedAccountClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AbstractedAccount app
   */
  state = {
    /**
     * Methods to access global state for the current AbstractedAccount app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          controlledAddress: result.controlledAddress,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the controlledAddress key in global state
       */
      controlledAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("controlledAddress")) as string | undefined },
    },
    /**
     * Methods to access box state for the current AbstractedAccount app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the plugins map in box state
       */
      plugins: {
        /**
         * Get all current values of the plugins map in box state
         */
        getMap: async (): Promise<Map<PluginsKey, PluginInfo>> => { return (await this.appClient.state.box.getMap("plugins")) as Map<PluginsKey, PluginInfo> },
        /**
         * Get a current value of the plugins map by key from box state
         */
        value: async (key: PluginsKey): Promise<PluginInfo | undefined> => { return await this.appClient.state.box.getMapValue("plugins", key) as PluginInfo | undefined },
      },
      /**
       * Get values from the namedPlugins map in box state
       */
      namedPlugins: {
        /**
         * Get all current values of the namedPlugins map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, PluginsKey>> => { return (await this.appClient.state.box.getMap("namedPlugins")) as Map<Uint8Array, PluginsKey> },
        /**
         * Get a current value of the namedPlugins map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<PluginsKey | undefined> => { return await this.appClient.state.box.getMapValue("namedPlugins", key) as PluginsKey | undefined },
      },
    },
  }

  public newGroup(): AbstractedAccountComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc58_changeAdmin(account)void method call against the AbstractedAccount contract
       */
      arc58ChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(account)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58ChangeAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_pluginChangeAdmin(application,account,account)void method call against the AbstractedAccount contract
       */
      arc58PluginChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(application,account,account)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(application,account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58PluginChangeAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_getAdmin()address method call against the AbstractedAccount contract
       */
      arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58GetAdmin(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc58_getAdmin()address', v))
        return this
      },
      /**
       * Add a arc58_verifyAuthAddr()void method call against the AbstractedAccount contract
       */
      arc58VerifyAuthAddr(params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58VerifyAuthAddr(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyTo(account,bool)void method call against the AbstractedAccount contract
       */
      arc58RekeyTo(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(account,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(account,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyTo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyToPlugin(application)void method call against the AbstractedAccount contract
       */
      arc58RekeyToPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(application)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(application)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyToPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyToNamedPlugin(string)void method call against the AbstractedAccount contract
       */
      arc58RekeyToNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyToNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addPlugin(application,account,uint64,uint64,bool)void method call against the AbstractedAccount contract
       */
      arc58AddPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(application,account,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(application,account,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removePlugin(application,account)void method call against the AbstractedAccount contract
       */
      arc58RemovePlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(application,account)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(application,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemovePlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void method call against the AbstractedAccount contract
       */
      arc58AddNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removeNamedPlugin(string)void method call against the AbstractedAccount contract
       */
      arc58RemoveNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemoveNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the AbstractedAccount contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AbstractedAccountComposer
  }
}
export type AbstractedAccountComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc58_changeAdmin(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58ChangeAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(account)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(account)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_changeAdmin(account)void'] | undefined]>

  /**
   * Calls the arc58_pluginChangeAdmin(application,account,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58PluginChangeAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(application,account,account)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(application,account,account)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_pluginChangeAdmin(application,account,account)void'] | undefined]>

  /**
   * Calls the arc58_getAdmin()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58GetAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_getAdmin()address'] | undefined]>

  /**
   * Calls the arc58_verifyAuthAddr()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58VerifyAuthAddr(params?: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_verifyAuthAddr()void'] | undefined]>

  /**
   * Calls the arc58_rekeyTo(account,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyTo(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(account,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(account,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyTo(account,bool)void'] | undefined]>

  /**
   * Calls the arc58_rekeyToPlugin(application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(application)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(application)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyToPlugin(application)void'] | undefined]>

  /**
   * Calls the arc58_rekeyToNamedPlugin(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void'] | undefined]>

  /**
   * Calls the arc58_addPlugin(application,account,uint64,uint64,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(application,account,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(application,account,uint64,uint64,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addPlugin(application,account,uint64,uint64,bool)void'] | undefined]>

  /**
   * Calls the arc58_removePlugin(application,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemovePlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(application,account)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(application,account)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removePlugin(application,account)void'] | undefined]>

  /**
   * Calls the arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addNamedPlugin(string,application,account,uint64,uint64,bool)void'] | undefined]>

  /**
   * Calls the arc58_removeNamedPlugin(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemoveNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removeNamedPlugin(string)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AbstractedAccountComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AbstractedAccountComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AbstractedAccountComposerResults<TReturns>>
}
export type AbstractedAccountComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


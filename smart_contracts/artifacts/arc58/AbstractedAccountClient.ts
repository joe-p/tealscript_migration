/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"AbstractedAccount","structs":{"PluginInfo":[{"name":"lastValidRound","type":"uint64"},{"name":"cooldown","type":"uint64"},{"name":"lastCalled","type":"uint64"},{"name":"adminPrivileges","type":"bool"}],"PluginsKey":[{"name":"application","type":"uint64"},{"name":"allowedCaller","type":"address"}]},"methods":[{"name":"createApplication","args":[{"type":"address","name":"controlledAddress"},{"type":"address","name":"admin"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_changeAdmin","args":[{"type":"address","name":"newAdmin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_pluginChangeAdmin","args":[{"type":"uint64","name":"plugin"},{"type":"address","name":"allowedCaller"},{"type":"address","name":"newAdmin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_getAdmin","args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_verifyAuthAddr","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_rekeyTo","args":[{"type":"address","name":"addr"},{"type":"bool","name":"flash"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_rekeyToPlugin","args":[{"type":"uint64","name":"plugin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_rekeyToNamedPlugin","args":[{"type":"string","name":"name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_addPlugin","args":[{"type":"uint64","name":"app"},{"type":"address","name":"allowedCaller"},{"type":"uint64","name":"lastValidRound"},{"type":"uint64","name":"cooldown"},{"type":"bool","name":"adminPrivileges"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_removePlugin","args":[{"type":"uint64","name":"app"},{"type":"address","name":"allowedCaller"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_addNamedPlugin","args":[{"type":"string","name":"name"},{"type":"uint64","name":"app"},{"type":"address","name":"allowedCaller"},{"type":"uint64","name":"lastValidRound"},{"type":"uint64","name":"cooldown"},{"type":"bool","name":"adminPrivileges"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"arc58_removeNamedPlugin","args":[{"type":"string","name":"name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YQ=="},"controlledAddress":{"keyType":"AVMString","valueType":"address","key":"Yw=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"plugins":{"keyType":"PluginsKey","valueType":"PluginInfo","prefix":"cA=="},"namedPlugins":{"keyType":"AVMBytes","valueType":"PluginsKey","prefix":"bg=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[583,734,748,887,1032],"errorMessage":"Box must have value"},{"pc":[121,139,177,196,228,246,262,282,294,315,337,352],"errorMessage":"OnCompletion is not NoOp"},{"pc":[592],"errorMessage":"This plugin does not have admin privileges"},{"pc":[563],"errorMessage":"This plugin is not in control of the account"},{"pc":[794],"errorMessage":"This sender is not allowed to trigger this plugin"},{"pc":[556,620],"errorMessage":"account funded"},{"pc":[547,561,804],"errorMessage":"application exists"},{"pc":[532,549,649,904,946,969,1025],"errorMessage":"assert target is match for conditions"},{"pc":[356],"errorMessage":"can only call when creating"},{"pc":[124,142,180,199,231,249,265,285,297,318,340],"errorMessage":"can only call when not creating"},{"pc":[389,401,530,553,605,613,647,654,799,902,944,967,1023],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAEQJgUBYQFjAXABbgQPiFSTMRtBAFqCBAS0x31xBNJLdVYEX6RJxgQTvETkJwSCBwTJWl09BHx2bdwEVvKLWATRLcthBE03I1UEinKnUATjULnUNhoAjgwA6QDaAMQArwCjAI8AfwBtAE0AOgAUAAIiQzEZFEQxGEQ2GgFXAgCIA3EjQzEZFEQxGEQ2GgFXAgA2GgIXNhoDNhoEFzYaBRc2GgYiU4gDEyNDMRkURDEYRDYaARc2GgKIAukjQzEZFEQxGEQ2GgEXNhoCNhoDFzYaBBc2GgUiU4gCnyNDMRkURDEYRDYaAVcCAIgCfiNDMRkURDEYRDYaAReIAgIjQzEZFEQxGEQ2GgE2GgIiU4gBaiNDMRkURDEYRIgBPiNDMRkURDEYRIgBLYAEFR98dUxQsCNDMRkURDEYRDYaARc2GgI2GgOIAM4jQzEZFEQxGEQ2GgGIAK8jQzEZFEQxGBRENhoBNhoCiABmI0OKAAAiMRaLATIEDEEAG4sBOAAiKWVEEkEAE4sBOCAiKWVEEkEAByOMAIsARImLATgQgQYSQQAkiwE4GDIIEkEAGosBOBsjEkEAEYsBIsIaJwQSQQAGI4wAQv/OiwEjCIwBQv+iigIAi/4xABJAAAiL/zEAEkEAHyNEi/+L/hNEKIv/Z4v+MgMSQQAGMgopTGeJi/5C//ciQv/eigEAMQAiKGVEEkQoi/9niYoDADEAi/1yCEQSRCIpZURzAkSL/XIIRBJEi/0Wi/5QKkxQSb1FAUEAEosAvkSBwAFTQQAHI0Qoi/9niSJC//YiKGVEiYoAACIpZURJcwJMTgJEMgoSQQAHMgOLABJEiTIKQv/2igIAMQAiKGVEEkSxIillRIAbcmVrZXlpbmcgYWJzdHJhY3RlZCBhY2NvdW50sgWL/rIgi/6yB7IAI7IQIrIBs4v/QQADiP6piYoCAYv+Fov/UCpMUEm9RQFBACSLAL5EIlsyBg9BABgyBosAvkRJJFtPAkwJTIEIWw9BAAMjTIkiQv/6igEAgACL/zIDiP+5SUAACIv/MQCI/65EsSIpZUSL/3IIRIAWcmVrZXlpbmcgdG8gcGx1Z2luIGFwcLIFsiBJsgeyACOyECKyAbMyBowAiwFBABQyA4v/FkxQKkxQiwAWJEy7iP4HiTEAQv/pigEAK4v/UL5EIluI/4aJigUAMQAiKGVEEkSL+xaL/FCL/RaL/hZQIhZQgAEAIov/VFAqTwJQTL+JigIAMQAiKGVEEkSL/haL/1AqTFC8SImKBgAxACIoZUQSRCuL+lBJvUUBFESL+xaL/FBMSwG/i/0Wi/4WUCIWUIABACKL/1RQKk8CUEy/iYoBADEAIihlRBJEK4v/UEm+REy8SCpMULxIiQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type PluginInfo = {
  lastValidRound: bigint,
  cooldown: bigint,
  lastCalled: bigint,
  adminPrivileges: boolean
}


/**
 * Converts the ABI tuple representation of a PluginInfo to the struct representation
 */
export function PluginInfoFromTuple(abiTuple: [bigint, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PluginInfo, APP_SPEC.structs) as PluginInfo
}

export type PluginsKey = {
  application: bigint,
  allowedCaller: string
}


/**
 * Converts the ABI tuple representation of a PluginsKey to the struct representation
 */
export function PluginsKeyFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PluginsKey, APP_SPEC.structs) as PluginsKey
}

/**
 * The argument types for the AbstractedAccount contract
 */
export type AbstractedAccountArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address,address)void': {
      controlledAddress: string
      admin: string
    }
    'arc58_changeAdmin(address)void': {
      newAdmin: string
    }
    'arc58_pluginChangeAdmin(uint64,address,address)void': {
      plugin: bigint | number
      allowedCaller: string
      newAdmin: string
    }
    'arc58_getAdmin()address': Record<string, never>
    'arc58_verifyAuthAddr()void': Record<string, never>
    'arc58_rekeyTo(address,bool)void': {
      addr: string
      flash: boolean
    }
    'arc58_rekeyToPlugin(uint64)void': {
      plugin: bigint | number
    }
    'arc58_rekeyToNamedPlugin(string)void': {
      name: string
    }
    'arc58_addPlugin(uint64,address,uint64,uint64,bool)void': {
      app: bigint | number
      allowedCaller: string
      lastValidRound: bigint | number
      cooldown: bigint | number
      adminPrivileges: boolean
    }
    'arc58_removePlugin(uint64,address)void': {
      app: bigint | number
      allowedCaller: string
    }
    'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void': {
      name: string
      app: bigint | number
      allowedCaller: string
      lastValidRound: bigint | number
      cooldown: bigint | number
      adminPrivileges: boolean
    }
    'arc58_removeNamedPlugin(string)void': {
      name: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address,address)void': [controlledAddress: string, admin: string]
    'arc58_changeAdmin(address)void': [newAdmin: string]
    'arc58_pluginChangeAdmin(uint64,address,address)void': [plugin: bigint | number, allowedCaller: string, newAdmin: string]
    'arc58_getAdmin()address': []
    'arc58_verifyAuthAddr()void': []
    'arc58_rekeyTo(address,bool)void': [addr: string, flash: boolean]
    'arc58_rekeyToPlugin(uint64)void': [plugin: bigint | number]
    'arc58_rekeyToNamedPlugin(string)void': [name: string]
    'arc58_addPlugin(uint64,address,uint64,uint64,bool)void': [app: bigint | number, allowedCaller: string, lastValidRound: bigint | number, cooldown: bigint | number, adminPrivileges: boolean]
    'arc58_removePlugin(uint64,address)void': [app: bigint | number, allowedCaller: string]
    'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void': [name: string, app: bigint | number, allowedCaller: string, lastValidRound: bigint | number, cooldown: bigint | number, adminPrivileges: boolean]
    'arc58_removeNamedPlugin(string)void': [name: string]
  }
}

/**
 * The return type for each method
 */
export type AbstractedAccountReturns = {
  'createApplication(address,address)void': void
  'arc58_changeAdmin(address)void': void
  'arc58_pluginChangeAdmin(uint64,address,address)void': void
  'arc58_getAdmin()address': string
  'arc58_verifyAuthAddr()void': void
  'arc58_rekeyTo(address,bool)void': void
  'arc58_rekeyToPlugin(uint64)void': void
  'arc58_rekeyToNamedPlugin(string)void': void
  'arc58_addPlugin(uint64,address,uint64,uint64,bool)void': void
  'arc58_removePlugin(uint64,address)void': void
  'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void': void
  'arc58_removeNamedPlugin(string)void': void
}

/**
 * Defines the types of available calls and state of the AbstractedAccount smart contract.
 */
export type AbstractedAccountTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address)void' | 'createApplication', {
      argsObj: AbstractedAccountArgs['obj']['createApplication(address,address)void']
      argsTuple: AbstractedAccountArgs['tuple']['createApplication(address,address)void']
      returns: AbstractedAccountReturns['createApplication(address,address)void']
    }>
    & Record<'arc58_changeAdmin(address)void' | 'arc58_changeAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']
      returns: AbstractedAccountReturns['arc58_changeAdmin(address)void']
    }>
    & Record<'arc58_pluginChangeAdmin(uint64,address,address)void' | 'arc58_pluginChangeAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']
      returns: AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void']
    }>
    & Record<'arc58_getAdmin()address' | 'arc58_getAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_getAdmin()address']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_getAdmin()address']
      returns: AbstractedAccountReturns['arc58_getAdmin()address']
    }>
    & Record<'arc58_verifyAuthAddr()void' | 'arc58_verifyAuthAddr', {
      argsObj: AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']
      returns: AbstractedAccountReturns['arc58_verifyAuthAddr()void']
    }>
    & Record<'arc58_rekeyTo(address,bool)void' | 'arc58_rekeyTo', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']
      returns: AbstractedAccountReturns['arc58_rekeyTo(address,bool)void']
    }>
    & Record<'arc58_rekeyToPlugin(uint64)void' | 'arc58_rekeyToPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']
      returns: AbstractedAccountReturns['arc58_rekeyToPlugin(uint64)void']
    }>
    & Record<'arc58_rekeyToNamedPlugin(string)void' | 'arc58_rekeyToNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']
      returns: AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void']
    }>
    & Record<'arc58_addPlugin(uint64,address,uint64,uint64,bool)void' | 'arc58_addPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']
      returns: AbstractedAccountReturns['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']
    }>
    & Record<'arc58_removePlugin(uint64,address)void' | 'arc58_removePlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']
      returns: AbstractedAccountReturns['arc58_removePlugin(uint64,address)void']
    }>
    & Record<'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void' | 'arc58_addNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']
      returns: AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']
    }>
    & Record<'arc58_removeNamedPlugin(string)void' | 'arc58_removeNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']
      returns: AbstractedAccountReturns['arc58_removeNamedPlugin(string)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
        controlledAddress: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        plugins: Map<PluginsKey, PluginInfo>
        namedPlugins: Map<Uint8Array | string, PluginsKey>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AbstractedAccountSignatures = keyof AbstractedAccountTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AbstractedAccountNonVoidMethodSignatures = keyof AbstractedAccountTypes['methods'] extends infer T ? T extends keyof AbstractedAccountTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AbstractedAccountSignatures> = AbstractedAccountTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AbstractedAccountSignatures> = AbstractedAccountTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AbstractedAccountTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AbstractedAccountTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AbstractedAccountCreateCallParams =
  | Expand<CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & {method: 'createApplication(address,address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AbstractedAccountDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AbstractedAccountCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AbstractedAccount smart contract
 */
export abstract class AbstractedAccountParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AbstractedAccountCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address,address)void':
            return AbstractedAccountParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AbstractedAccount smart contract using the createApplication(address,address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address,address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.controlledAddress, params.args.admin],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc58_changeAdmin(address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58ChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_changeAdmin(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the arc58_pluginChangeAdmin(uint64,address,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58PluginChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_pluginChangeAdmin(uint64,address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin, params.args.allowedCaller, params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the arc58_getAdmin()address ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_getAdmin()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc58_verifyAuthAddr()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58VerifyAuthAddr(params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_verifyAuthAddr()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyTo(address,bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyTo(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyTo(address,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addr, params.args.flash],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToPlugin(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyToPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyToPlugin(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToNamedPlugin(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyToNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyToNamedPlugin(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the arc58_addPlugin(uint64,address,uint64,uint64,bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addPlugin(uint64,address,uint64,uint64,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller, params.args.lastValidRound, params.args.cooldown, params.args.adminPrivileges],
    }
  }
  /**
   * Constructs a no op call for the arc58_removePlugin(uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemovePlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removePlugin(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller],
    }
  }
  /**
   * Constructs a no op call for the arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.app, params.args.allowedCaller, params.args.lastValidRound, params.args.cooldown, params.args.adminPrivileges],
    }
  }
  /**
   * Constructs a no op call for the arc58_removeNamedPlugin(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemoveNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removeNamedPlugin(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AbstractedAccount smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AbstractedAccountFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AbstractedAccountFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AbstractedAccountClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AbstractedAccountClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AbstractedAccount smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AbstractedAccountDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AbstractedAccountParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AbstractedAccountCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AbstractedAccountClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(address,address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AbstractedAccountParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(address,address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AbstractedAccountParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using an ABI method call using the createApplication(address,address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AbstractedAccountParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AbstractedAccountReturns['createApplication(address,address)void']) }, appClient: new AbstractedAccountClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AbstractedAccount smart contract
 */
export class AbstractedAccountClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AbstractedAccount app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AbstractedAccountNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AbstractedAccountClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AbstractedAccountClient> {
    return new AbstractedAccountClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AbstractedAccountClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AbstractedAccountClient> {
    return new AbstractedAccountClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58ChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58PluginChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58GetAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58VerifyAuthAddr: (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyTo: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyToPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyToNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemovePlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemoveNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58ChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58PluginChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58GetAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58VerifyAuthAddr: (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyTo: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyToPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyToNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemovePlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemoveNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58ChangeAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_changeAdmin(address)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58PluginChangeAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58GetAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_getAdmin()address'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58VerifyAuthAddr: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_verifyAuthAddr()void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyTo: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyTo(address,bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyToPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyToPlugin(uint64)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyToNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemovePlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_removePlugin(uint64,address)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemoveNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_removeNamedPlugin(string)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AbstractedAccountClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AbstractedAccount app
   */
  state = {
    /**
     * Methods to access global state for the current AbstractedAccount app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          controlledAddress: result.controlledAddress,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the controlledAddress key in global state
       */
      controlledAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("controlledAddress")) as string | undefined },
    },
    /**
     * Methods to access box state for the current AbstractedAccount app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the plugins map in box state
       */
      plugins: {
        /**
         * Get all current values of the plugins map in box state
         */
        getMap: async (): Promise<Map<PluginsKey, PluginInfo>> => { return (await this.appClient.state.box.getMap("plugins")) as Map<PluginsKey, PluginInfo> },
        /**
         * Get a current value of the plugins map by key from box state
         */
        value: async (key: PluginsKey): Promise<PluginInfo | undefined> => { return await this.appClient.state.box.getMapValue("plugins", key) as PluginInfo | undefined },
      },
      /**
       * Get values from the namedPlugins map in box state
       */
      namedPlugins: {
        /**
         * Get all current values of the namedPlugins map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, PluginsKey>> => { return (await this.appClient.state.box.getMap("namedPlugins")) as Map<Uint8Array, PluginsKey> },
        /**
         * Get a current value of the namedPlugins map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<PluginsKey | undefined> => { return await this.appClient.state.box.getMapValue("namedPlugins", key) as PluginsKey | undefined },
      },
    },
  }

  public newGroup(): AbstractedAccountComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc58_changeAdmin(address)void method call against the AbstractedAccount contract
       */
      arc58ChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58ChangeAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_pluginChangeAdmin(uint64,address,address)void method call against the AbstractedAccount contract
       */
      arc58PluginChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58PluginChangeAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_getAdmin()address method call against the AbstractedAccount contract
       */
      arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58GetAdmin(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc58_getAdmin()address', v))
        return this
      },
      /**
       * Add a arc58_verifyAuthAddr()void method call against the AbstractedAccount contract
       */
      arc58VerifyAuthAddr(params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58VerifyAuthAddr(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyTo(address,bool)void method call against the AbstractedAccount contract
       */
      arc58RekeyTo(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyTo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyToPlugin(uint64)void method call against the AbstractedAccount contract
       */
      arc58RekeyToPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyToPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyToNamedPlugin(string)void method call against the AbstractedAccount contract
       */
      arc58RekeyToNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyToNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addPlugin(uint64,address,uint64,uint64,bool)void method call against the AbstractedAccount contract
       */
      arc58AddPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removePlugin(uint64,address)void method call against the AbstractedAccount contract
       */
      arc58RemovePlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemovePlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void method call against the AbstractedAccount contract
       */
      arc58AddNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removeNamedPlugin(string)void method call against the AbstractedAccount contract
       */
      arc58RemoveNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemoveNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the AbstractedAccount contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AbstractedAccountComposer
  }
}
export type AbstractedAccountComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc58_changeAdmin(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58ChangeAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_changeAdmin(address)void'] | undefined]>

  /**
   * Calls the arc58_pluginChangeAdmin(uint64,address,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58PluginChangeAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void'] | undefined]>

  /**
   * Calls the arc58_getAdmin()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58GetAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_getAdmin()address'] | undefined]>

  /**
   * Calls the arc58_verifyAuthAddr()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58VerifyAuthAddr(params?: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_verifyAuthAddr()void'] | undefined]>

  /**
   * Calls the arc58_rekeyTo(address,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyTo(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyTo(address,bool)void'] | undefined]>

  /**
   * Calls the arc58_rekeyToPlugin(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyToPlugin(uint64)void'] | undefined]>

  /**
   * Calls the arc58_rekeyToNamedPlugin(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string)void'] | undefined]>

  /**
   * Calls the arc58_addPlugin(uint64,address,uint64,uint64,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,uint64,uint64,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addPlugin(uint64,address,uint64,uint64,bool)void'] | undefined]>

  /**
   * Calls the arc58_removePlugin(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemovePlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removePlugin(uint64,address)void'] | undefined]>

  /**
   * Calls the arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void'] | undefined]>

  /**
   * Calls the arc58_removeNamedPlugin(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemoveNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removeNamedPlugin(string)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AbstractedAccountComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AbstractedAccountComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AbstractedAccountComposerResults<TReturns>>
}
export type AbstractedAccountComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"ValidatorRegistry","structs":{"Constraints":[{"name":"epochPayoutRoundsMin","type":"uint64"},{"name":"epochPayoutRoundsMax","type":"uint64"},{"name":"minPctToValidatorWFourDecimals","type":"uint64"},{"name":"maxPctToValidatorWFourDecimals","type":"uint64"},{"name":"minEntryStake","type":"uint64"},{"name":"maxAlgoPerPool","type":"uint64"},{"name":"maxAlgoPerValidator","type":"uint64"},{"name":"amtConsideredSaturated","type":"uint64"},{"name":"maxNodes","type":"uint64"},{"name":"maxPoolsPerNode","type":"uint64"},{"name":"maxStakersPerPool","type":"uint64"}],"MbrAmounts":[{"name":"addValidatorMbr","type":"uint64"},{"name":"addPoolMbr","type":"uint64"},{"name":"poolInitMbr","type":"uint64"},{"name":"addStakerMbr","type":"uint64"}],"NodePoolAssignmentConfig":[{"name":"nodes","type":"(uint64[3])[8]"}],"PoolInfo":[{"name":"poolAppId","type":"uint64"},{"name":"totalStakers","type":"uint64"},{"name":"totalAlgoStaked","type":"uint64"}],"PoolTokenPayoutRatio":[{"name":"poolPctOfWhole","type":"uint64[24]"},{"name":"updatedForPayout","type":"uint64"}],"ValidatorConfig":[{"name":"id","type":"uint64"},{"name":"owner","type":"address"},{"name":"manager","type":"address"},{"name":"nfdForInfo","type":"uint64"},{"name":"entryGatingType","type":"uint64"},{"name":"entryGatingAddress","type":"address"},{"name":"entryGatingAssets","type":"uint64[4]"},{"name":"gatingAssetMinBalance","type":"uint64"},{"name":"rewardTokenId","type":"uint64"},{"name":"rewardPerPayout","type":"uint64"},{"name":"epochRoundLength","type":"uint64"},{"name":"percentToValidator","type":"uint64"},{"name":"validatorCommissionAddress","type":"address"},{"name":"minEntryStake","type":"uint64"},{"name":"maxAlgoPerPool","type":"uint64"},{"name":"poolsPerNode","type":"uint64"},{"name":"sunsettingOn","type":"uint64"},{"name":"sunsettingTo","type":"uint64"}],"ValidatorCurState":[{"name":"numPools","type":"uint64"},{"name":"totalStakers","type":"uint64"},{"name":"totalAlgoStaked","type":"uint64"},{"name":"rewardTokenHeldBack","type":"uint64"}],"ValidatorInfo":[{"name":"config","type":"ValidatorConfig"},{"name":"state","type":"ValidatorCurState"},{"name":"pools","type":"(uint64,uint64,uint64)[24]"},{"name":"tokenPayoutRatio","type":"PoolTokenPayoutRatio"},{"name":"nodePoolAssignments","type":"NodePoolAssignmentConfig"}],"ValidatorPoolKey":[{"name":"id","type":"uint64"},{"name":"poolId","type":"uint64"},{"name":"poolAppId","type":"uint64"}]},"methods":[{"name":"updateApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]},"readonly":false,"events":[],"recommendations":{}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"initStakingContract","args":[{"type":"uint64","name":"approvalProgramSize"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"loadStakingContractData","args":[{"type":"uint64","name":"offset"},{"type":"byte[]","name":"data"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"finalizeStakingContract","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"gas","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getMbrAmounts","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"MbrAmounts"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getProtocolConstraints","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)","struct":"Constraints"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getNumValidators","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getValidatorConfig","args":[{"type":"uint64","name":"validatorId"}],"returns":{"type":"(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)","struct":"ValidatorConfig"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getValidatorState","args":[{"type":"uint64","name":"validatorId"}],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"ValidatorCurState"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getValidatorOwnerAndManager","args":[{"type":"uint64","name":"validatorId"}],"returns":{"type":"(address,address)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getPools","args":[{"type":"uint64","name":"validatorId"}],"returns":{"type":"(uint64,uint64,uint64)[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getPoolAppId","args":[{"type":"uint64","name":"validatorId"},{"type":"uint64","name":"poolId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getPoolInfo","args":[{"type":"(uint64,uint64,uint64)","struct":"ValidatorPoolKey","name":"poolKey"}],"returns":{"type":"(uint64,uint64,uint64)","struct":"PoolInfo"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getCurMaxStakePerPool","args":[{"type":"uint64","name":"validatorId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"doesStakerNeedToPayMBR","args":[{"type":"address","name":"staker"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getStakedPoolsForAccount","args":[{"type":"address","name":"staker"}],"returns":{"type":"(uint64,uint64,uint64)[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getTokenPayoutRatio","args":[{"type":"uint64","name":"validatorId"}],"returns":{"type":"(uint64[24],uint64)","struct":"PoolTokenPayoutRatio"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getNodePoolAssignments","args":[{"type":"uint64","name":"validatorId"}],"returns":{"type":"((uint64[3])[8])","struct":"NodePoolAssignmentConfig"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getNFDRegistryID","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addValidator","args":[{"type":"byte[]","name":"nfdName"},{"type":"(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)","struct":"ValidatorConfig","name":"config"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"changeValidatorManager","args":[{"type":"uint64","name":"validatorId"},{"type":"address","name":"manager"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"changeValidatorSunsetInfo","args":[{"type":"uint64","name":"validatorId"},{"type":"uint64","name":"sunsettingOn"},{"type":"uint64","name":"sunsettingTo"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"changeValidatorNFD","args":[{"type":"uint64","name":"validatorId"},{"type":"uint64","name":"nfdAppID"},{"type":"byte[]","name":"nfdName"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"changeValidatorCommissionAddress","args":[{"type":"uint64","name":"validatorId"},{"type":"address","name":"commissionAddress"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"changeValidatorRewardInfo","args":[{"type":"uint64","name":"validatorId"},{"type":"uint64","name":"EntryGatingType"},{"type":"address","name":"EntryGatingAddress"},{"type":"uint64[4]","name":"EntryGatingAssets"},{"type":"uint64","name":"GatingAssetMinBalance"},{"type":"uint64","name":"RewardPerPayout"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addPool","args":[{"type":"uint64","name":"validatorId"},{"type":"uint64","name":"nodeNum"}],"returns":{"type":"(uint64,uint64,uint64)","struct":"ValidatorPoolKey"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addStake","args":[{"type":"uint64","name":"validatorId"},{"type":"uint64","name":"valueToVerify"}],"returns":{"type":"(uint64,uint64,uint64)","struct":"ValidatorPoolKey"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"setTokenPayoutRatio","args":[{"type":"uint64","name":"validatorId"}],"returns":{"type":"(uint64[24],uint64)","struct":"PoolTokenPayoutRatio"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"stakeUpdatedViaRewards","args":[{"type":"(uint64,uint64,uint64)","struct":"ValidatorPoolKey","name":"poolKey"},{"type":"uint64","name":"algoToAdd"},{"type":"uint64","name":"rewardTokenAmountReserved"},{"type":"uint64","name":"validatorCommission"},{"type":"uint64","name":"saturatedBurnToFeeSink"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"stakeRemoved","args":[{"type":"(uint64,uint64,uint64)","struct":"ValidatorPoolKey","name":"poolKey"},{"type":"address","name":"staker"},{"type":"uint64","name":"amountRemoved"},{"type":"uint64","name":"rewardRemoved"},{"type":"bool","name":"stakerRemoved"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"findPoolForStaker","args":[{"type":"uint64","name":"validatorId"},{"type":"address","name":"staker"},{"type":"uint64","name":"amountToStake"}],"returns":{"type":"((uint64,uint64,uint64),bool,bool)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"movePoolToNode","args":[{"type":"uint64","name":"validatorId"},{"type":"uint64","name":"poolAppId"},{"type":"uint64","name":"nodeNum"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"emptyTokenRewards","args":[{"type":"uint64","name":"validatorId"},{"type":"address","name":"receiver"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"desc":"ValidatorRegistry is the 'master contract' for the reti pooling protocol.\nA single immutable instance of this is deployed.  All state for all validators including information about their\npools and nodes is stored via this contract in global state and box storage.  Data in the pools themselves is stored\nwithin the StakingPool contract instance, also in global state and box storage.\nSee the StakingPool contract comments for details on how this contract creates new instances of them.","networks":{},"state":{"schema":{"global":{"ints":4,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"stakingPoolInitialized":{"keyType":"AVMString","valueType":"AVMUint64","key":"aW5pdA=="},"numValidators":{"keyType":"AVMString","valueType":"AVMUint64","key":"bnVtVg=="},"numStakers":{"keyType":"AVMString","valueType":"AVMUint64","key":"bnVtU3Rha2Vycw=="},"totalAlgoStaked":{"keyType":"AVMString","valueType":"AVMUint64","key":"c3Rha2Vk"}},"local":{},"box":{"stakingPoolApprovalProgram":{"keyType":"AVMString","valueType":"AVMBytes","key":"cG9vbFRlbXBsYXRlQXBwcm92YWxCeXRlcw=="}}},"maps":{"global":{},"local":{},"box":{"validatorList":{"keyType":"uint64","valueType":"ValidatorInfo","prefix":"dg=="},"stakerPoolSet":{"keyType":"address","valueType":"(uint64,uint64,uint64)[6]","prefix":"c3Bz"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[362,373,382,423,432,441,461,472,483,492,501,510,519,528,539,550,570,590,601,618,629,640,651,662,742,754,1035,1046,1150,1162,1171,1180,1189,1198],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1210],"errorMessage":"OnCompletion is not UpdateApplication"},{"pc":[1202],"errorMessage":"can only call when creating"},{"pc":[365,376,385,426,435,444,464,475,486,495,504,513,522,531,542,553,573,593,604,621,632,643,654,665,745,757,1038,1049,1153,1165,1174,1183,1192,1213],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAQDAASYFDBUffHUAAAAAAAAAAAQVH3x1HBUffHUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGFR98dQAAJBUffHUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEbQQD8giMERvdlMwS4RHs2BBtegsYEeUctgwRfes/ZBDFyyp0EiocULQTRNmzDBDsEXFwEO6tcIgSafCJIBC+iLEsEdyp95ARXJ2fRBDRUhbkE+8YxeAQkSYz0BPhG3XoEgwUFAQR7u2yNBPg5QUoEEdc3/wQ+KIlyBN1fqtoE3UPXvwT5nvVNBL9/x+MEO4ibhASxaztABE342G4EQY/O/ASi3FG1BChz9QQEBUf0/gTLZoNYNhoAjiMDUANGAz0DNAMrAyIDFgKuAqMBigF+AS4BIwEYAQ0BAgDxAOYA0gC+ALMAqACfAJYAjQCEAHsAcABlAFEASAA/ABYADQACI0MxGRREMRhEKLAiQzEZFEQxGEQiQzEZFEQxGESAHRUffHUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsCJDMRkURDEYRCJDMRkURDEYRCJDMRkURDEYRDYaAReIAwspTFCwIkMxGRREMRhEKrAiQzEZFEQxGEQqsCJDMRkURDEYRCJDMRkURDEYRCJDMRkURDEYRCJDMRkURDEYRCJDMRkURDEYRCJDMRkURDEYRCiwIkMxGRREMRhEKLAiQzEZFEQxGEQ2GgEXiAKYKUxQsCJDMRkURDEYRDYaAReIAnspTFCwIkMxGRREMRhEK7AiQzEZFEQxGESABRUffHUAsCJDMRkURDEYRCiwIkMxGRREMRhEKrAiQzEZFEQxGEQosCJDMRkURDEYRCuwIkMxGRREMRhEgEQVH3x1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAiQzEZFEQxGEQnBLAiQzEZFEQxGESAjAIVH3x1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsCJDMRkURDEYRCiwIkMxGRREMRhEgFwVH3x1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAiQzEZFEQxGEQnBLAiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGBREIkMxGYEEEkQxGEQiQ4oBASSvIxZQiYoBASSviYoBASSvIxZQiQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Constraints = {
  epochPayoutRoundsMin: bigint,
  epochPayoutRoundsMax: bigint,
  minPctToValidatorWFourDecimals: bigint,
  maxPctToValidatorWFourDecimals: bigint,
  minEntryStake: bigint,
  maxAlgoPerPool: bigint,
  maxAlgoPerValidator: bigint,
  amtConsideredSaturated: bigint,
  maxNodes: bigint,
  maxPoolsPerNode: bigint,
  maxStakersPerPool: bigint
}


/**
 * Converts the ABI tuple representation of a Constraints to the struct representation
 */
export function ConstraintsFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Constraints, APP_SPEC.structs) as Constraints
}

export type MbrAmounts = {
  addValidatorMbr: bigint,
  addPoolMbr: bigint,
  poolInitMbr: bigint,
  addStakerMbr: bigint
}


/**
 * Converts the ABI tuple representation of a MbrAmounts to the struct representation
 */
export function MbrAmountsFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.MbrAmounts, APP_SPEC.structs) as MbrAmounts
}

export type NodePoolAssignmentConfig = {
  nodes: [[[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]]]
}


/**
 * Converts the ABI tuple representation of a NodePoolAssignmentConfig to the struct representation
 */
export function NodePoolAssignmentConfigFromTuple(abiTuple: [[[[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]]]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.NodePoolAssignmentConfig, APP_SPEC.structs) as NodePoolAssignmentConfig
}

export type PoolInfo = {
  poolAppId: bigint,
  totalStakers: bigint,
  totalAlgoStaked: bigint
}


/**
 * Converts the ABI tuple representation of a PoolInfo to the struct representation
 */
export function PoolInfoFromTuple(abiTuple: [bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PoolInfo, APP_SPEC.structs) as PoolInfo
}

export type PoolTokenPayoutRatio = {
  poolPctOfWhole: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint],
  updatedForPayout: bigint
}


/**
 * Converts the ABI tuple representation of a PoolTokenPayoutRatio to the struct representation
 */
export function PoolTokenPayoutRatioFromTuple(abiTuple: [[bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint], bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PoolTokenPayoutRatio, APP_SPEC.structs) as PoolTokenPayoutRatio
}

export type ValidatorConfig = {
  id: bigint,
  owner: string,
  manager: string,
  nfdForInfo: bigint,
  entryGatingType: bigint,
  entryGatingAddress: string,
  entryGatingAssets: [bigint, bigint, bigint, bigint],
  gatingAssetMinBalance: bigint,
  rewardTokenId: bigint,
  rewardPerPayout: bigint,
  epochRoundLength: bigint,
  percentToValidator: bigint,
  validatorCommissionAddress: string,
  minEntryStake: bigint,
  maxAlgoPerPool: bigint,
  poolsPerNode: bigint,
  sunsettingOn: bigint,
  sunsettingTo: bigint
}


/**
 * Converts the ABI tuple representation of a ValidatorConfig to the struct representation
 */
export function ValidatorConfigFromTuple(abiTuple: [bigint, string, string, bigint, bigint, string, [bigint, bigint, bigint, bigint], bigint, bigint, bigint, bigint, bigint, string, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ValidatorConfig, APP_SPEC.structs) as ValidatorConfig
}

export type ValidatorCurState = {
  numPools: bigint,
  totalStakers: bigint,
  totalAlgoStaked: bigint,
  rewardTokenHeldBack: bigint
}


/**
 * Converts the ABI tuple representation of a ValidatorCurState to the struct representation
 */
export function ValidatorCurStateFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ValidatorCurState, APP_SPEC.structs) as ValidatorCurState
}

export type ValidatorInfo = {
  config: ValidatorConfig,
  state: ValidatorCurState,
  pools: [[bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]],
  tokenPayoutRatio: PoolTokenPayoutRatio,
  nodePoolAssignments: NodePoolAssignmentConfig
}


/**
 * Converts the ABI tuple representation of a ValidatorInfo to the struct representation
 */
export function ValidatorInfoFromTuple(abiTuple: [[bigint, string, string, bigint, bigint, string, [bigint, bigint, bigint, bigint], bigint, bigint, bigint, bigint, bigint, string, bigint, bigint, bigint, bigint, bigint], [bigint, bigint, bigint, bigint], [[bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]], [[bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint], bigint], [[[[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]], [[bigint, bigint, bigint]]]]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ValidatorInfo, APP_SPEC.structs) as ValidatorInfo
}

export type ValidatorPoolKey = {
  id: bigint,
  poolId: bigint,
  poolAppId: bigint
}


/**
 * Converts the ABI tuple representation of a ValidatorPoolKey to the struct representation
 */
export function ValidatorPoolKeyFromTuple(abiTuple: [bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ValidatorPoolKey, APP_SPEC.structs) as ValidatorPoolKey
}

/**
 * The argument types for the ValidatorRegistry contract
 */
export type ValidatorRegistryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'updateApplication()void': Record<string, never>
    'createApplication()void': Record<string, never>
    'initStakingContract(uint64)void': {
      approvalProgramSize: bigint | number
    }
    'loadStakingContractData(uint64,byte[])void': {
      offset: bigint | number
      data: Uint8Array
    }
    'finalizeStakingContract()void': Record<string, never>
    'gas()void': Record<string, never>
    'getMbrAmounts()(uint64,uint64,uint64,uint64)': Record<string, never>
    'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': Record<string, never>
    'getNumValidators()uint64': Record<string, never>
    'getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)': {
      validatorId: bigint | number
    }
    'getValidatorState(uint64)(uint64,uint64,uint64,uint64)': {
      validatorId: bigint | number
    }
    'getValidatorOwnerAndManager(uint64)(address,address)': {
      validatorId: bigint | number
    }
    'getPools(uint64)(uint64,uint64,uint64)[]': {
      validatorId: bigint | number
    }
    'getPoolAppId(uint64,uint64)uint64': {
      validatorId: bigint | number
      poolId: bigint | number
    }
    'getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)': {
      poolKey: ValidatorPoolKey
    }
    'getCurMaxStakePerPool(uint64)uint64': {
      validatorId: bigint | number
    }
    'doesStakerNeedToPayMBR(address)bool': {
      staker: string
    }
    'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]': {
      staker: string
    }
    'getTokenPayoutRatio(uint64)(uint64[24],uint64)': {
      validatorId: bigint | number
    }
    'getNodePoolAssignments(uint64)((uint64[3])[8])': {
      validatorId: bigint | number
    }
    'getNFDRegistryID()uint64': Record<string, never>
    'addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64': {
      nfdName: Uint8Array
      config: ValidatorConfig
    }
    'changeValidatorManager(uint64,address)void': {
      validatorId: bigint | number
      manager: string
    }
    'changeValidatorSunsetInfo(uint64,uint64,uint64)void': {
      validatorId: bigint | number
      sunsettingOn: bigint | number
      sunsettingTo: bigint | number
    }
    'changeValidatorNFD(uint64,uint64,byte[])void': {
      validatorId: bigint | number
      nfdAppId: bigint | number
      nfdName: Uint8Array
    }
    'changeValidatorCommissionAddress(uint64,address)void': {
      validatorId: bigint | number
      commissionAddress: string
    }
    'changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void': {
      validatorId: bigint | number
      entryGatingType: bigint | number
      entryGatingAddress: string
      entryGatingAssets: [bigint | number, bigint | number, bigint | number, bigint | number]
      gatingAssetMinBalance: bigint | number
      rewardPerPayout: bigint | number
    }
    'addPool(uint64,uint64)(uint64,uint64,uint64)': {
      validatorId: bigint | number
      nodeNum: bigint | number
    }
    'addStake(uint64,uint64)(uint64,uint64,uint64)': {
      validatorId: bigint | number
      valueToVerify: bigint | number
    }
    'setTokenPayoutRatio(uint64)(uint64[24],uint64)': {
      validatorId: bigint | number
    }
    'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void': {
      poolKey: ValidatorPoolKey
      algoToAdd: bigint | number
      rewardTokenAmountReserved: bigint | number
      validatorCommission: bigint | number
      saturatedBurnToFeeSink: bigint | number
    }
    'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void': {
      poolKey: ValidatorPoolKey
      staker: string
      amountRemoved: bigint | number
      rewardRemoved: bigint | number
      stakerRemoved: boolean
    }
    'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)': {
      validatorId: bigint | number
      staker: string
      amountToStake: bigint | number
    }
    'movePoolToNode(uint64,uint64,uint64)void': {
      validatorId: bigint | number
      poolAppId: bigint | number
      nodeNum: bigint | number
    }
    'emptyTokenRewards(uint64,address)uint64': {
      validatorId: bigint | number
      receiver: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'updateApplication()void': []
    'createApplication()void': []
    'initStakingContract(uint64)void': [approvalProgramSize: bigint | number]
    'loadStakingContractData(uint64,byte[])void': [offset: bigint | number, data: Uint8Array]
    'finalizeStakingContract()void': []
    'gas()void': []
    'getMbrAmounts()(uint64,uint64,uint64,uint64)': []
    'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': []
    'getNumValidators()uint64': []
    'getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)': [validatorId: bigint | number]
    'getValidatorState(uint64)(uint64,uint64,uint64,uint64)': [validatorId: bigint | number]
    'getValidatorOwnerAndManager(uint64)(address,address)': [validatorId: bigint | number]
    'getPools(uint64)(uint64,uint64,uint64)[]': [validatorId: bigint | number]
    'getPoolAppId(uint64,uint64)uint64': [validatorId: bigint | number, poolId: bigint | number]
    'getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)': [poolKey: ValidatorPoolKey]
    'getCurMaxStakePerPool(uint64)uint64': [validatorId: bigint | number]
    'doesStakerNeedToPayMBR(address)bool': [staker: string]
    'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]': [staker: string]
    'getTokenPayoutRatio(uint64)(uint64[24],uint64)': [validatorId: bigint | number]
    'getNodePoolAssignments(uint64)((uint64[3])[8])': [validatorId: bigint | number]
    'getNFDRegistryID()uint64': []
    'addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64': [nfdName: Uint8Array, config: ValidatorConfig]
    'changeValidatorManager(uint64,address)void': [validatorId: bigint | number, manager: string]
    'changeValidatorSunsetInfo(uint64,uint64,uint64)void': [validatorId: bigint | number, sunsettingOn: bigint | number, sunsettingTo: bigint | number]
    'changeValidatorNFD(uint64,uint64,byte[])void': [validatorId: bigint | number, nfdAppId: bigint | number, nfdName: Uint8Array]
    'changeValidatorCommissionAddress(uint64,address)void': [validatorId: bigint | number, commissionAddress: string]
    'changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void': [validatorId: bigint | number, entryGatingType: bigint | number, entryGatingAddress: string, entryGatingAssets: [bigint | number, bigint | number, bigint | number, bigint | number], gatingAssetMinBalance: bigint | number, rewardPerPayout: bigint | number]
    'addPool(uint64,uint64)(uint64,uint64,uint64)': [validatorId: bigint | number, nodeNum: bigint | number]
    'addStake(uint64,uint64)(uint64,uint64,uint64)': [validatorId: bigint | number, valueToVerify: bigint | number]
    'setTokenPayoutRatio(uint64)(uint64[24],uint64)': [validatorId: bigint | number]
    'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void': [poolKey: ValidatorPoolKey, algoToAdd: bigint | number, rewardTokenAmountReserved: bigint | number, validatorCommission: bigint | number, saturatedBurnToFeeSink: bigint | number]
    'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void': [poolKey: ValidatorPoolKey, staker: string, amountRemoved: bigint | number, rewardRemoved: bigint | number, stakerRemoved: boolean]
    'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)': [validatorId: bigint | number, staker: string, amountToStake: bigint | number]
    'movePoolToNode(uint64,uint64,uint64)void': [validatorId: bigint | number, poolAppId: bigint | number, nodeNum: bigint | number]
    'emptyTokenRewards(uint64,address)uint64': [validatorId: bigint | number, receiver: string]
  }
}

/**
 * The return type for each method
 */
export type ValidatorRegistryReturns = {
  'updateApplication()void': void
  'createApplication()void': void
  'initStakingContract(uint64)void': void
  'loadStakingContractData(uint64,byte[])void': void
  'finalizeStakingContract()void': void
  'gas()void': void
  'getMbrAmounts()(uint64,uint64,uint64,uint64)': MbrAmounts
  'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': Constraints
  'getNumValidators()uint64': bigint
  'getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)': ValidatorConfig
  'getValidatorState(uint64)(uint64,uint64,uint64,uint64)': ValidatorCurState
  'getValidatorOwnerAndManager(uint64)(address,address)': [string, string]
  'getPools(uint64)(uint64,uint64,uint64)[]': [bigint, bigint, bigint][]
  'getPoolAppId(uint64,uint64)uint64': bigint
  'getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)': PoolInfo
  'getCurMaxStakePerPool(uint64)uint64': bigint
  'doesStakerNeedToPayMBR(address)bool': boolean
  'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]': [bigint, bigint, bigint][]
  'getTokenPayoutRatio(uint64)(uint64[24],uint64)': PoolTokenPayoutRatio
  'getNodePoolAssignments(uint64)((uint64[3])[8])': NodePoolAssignmentConfig
  'getNFDRegistryID()uint64': bigint
  'addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64': bigint
  'changeValidatorManager(uint64,address)void': void
  'changeValidatorSunsetInfo(uint64,uint64,uint64)void': void
  'changeValidatorNFD(uint64,uint64,byte[])void': void
  'changeValidatorCommissionAddress(uint64,address)void': void
  'changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void': void
  'addPool(uint64,uint64)(uint64,uint64,uint64)': ValidatorPoolKey
  'addStake(uint64,uint64)(uint64,uint64,uint64)': ValidatorPoolKey
  'setTokenPayoutRatio(uint64)(uint64[24],uint64)': PoolTokenPayoutRatio
  'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void': void
  'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void': void
  'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)': [[bigint, bigint, bigint], boolean, boolean]
  'movePoolToNode(uint64,uint64,uint64)void': void
  'emptyTokenRewards(uint64,address)uint64': bigint
}

/**
 * Defines the types of available calls and state of the ValidatorRegistry smart contract.
 */
export type ValidatorRegistryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: ValidatorRegistryArgs['obj']['updateApplication()void']
      argsTuple: ValidatorRegistryArgs['tuple']['updateApplication()void']
      returns: ValidatorRegistryReturns['updateApplication()void']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: ValidatorRegistryArgs['obj']['createApplication()void']
      argsTuple: ValidatorRegistryArgs['tuple']['createApplication()void']
      returns: ValidatorRegistryReturns['createApplication()void']
    }>
    & Record<'initStakingContract(uint64)void' | 'initStakingContract', {
      argsObj: ValidatorRegistryArgs['obj']['initStakingContract(uint64)void']
      argsTuple: ValidatorRegistryArgs['tuple']['initStakingContract(uint64)void']
      returns: ValidatorRegistryReturns['initStakingContract(uint64)void']
    }>
    & Record<'loadStakingContractData(uint64,byte[])void' | 'loadStakingContractData', {
      argsObj: ValidatorRegistryArgs['obj']['loadStakingContractData(uint64,byte[])void']
      argsTuple: ValidatorRegistryArgs['tuple']['loadStakingContractData(uint64,byte[])void']
      returns: ValidatorRegistryReturns['loadStakingContractData(uint64,byte[])void']
    }>
    & Record<'finalizeStakingContract()void' | 'finalizeStakingContract', {
      argsObj: ValidatorRegistryArgs['obj']['finalizeStakingContract()void']
      argsTuple: ValidatorRegistryArgs['tuple']['finalizeStakingContract()void']
      returns: ValidatorRegistryReturns['finalizeStakingContract()void']
    }>
    & Record<'gas()void' | 'gas', {
      argsObj: ValidatorRegistryArgs['obj']['gas()void']
      argsTuple: ValidatorRegistryArgs['tuple']['gas()void']
      returns: ValidatorRegistryReturns['gas()void']
    }>
    & Record<'getMbrAmounts()(uint64,uint64,uint64,uint64)' | 'getMbrAmounts', {
      argsObj: ValidatorRegistryArgs['obj']['getMbrAmounts()(uint64,uint64,uint64,uint64)']
      argsTuple: ValidatorRegistryArgs['tuple']['getMbrAmounts()(uint64,uint64,uint64,uint64)']
      returns: ValidatorRegistryReturns['getMbrAmounts()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getProtocolConstraints', {
      argsObj: ValidatorRegistryArgs['obj']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: ValidatorRegistryArgs['tuple']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: ValidatorRegistryReturns['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'getNumValidators()uint64' | 'getNumValidators', {
      argsObj: ValidatorRegistryArgs['obj']['getNumValidators()uint64']
      argsTuple: ValidatorRegistryArgs['tuple']['getNumValidators()uint64']
      returns: ValidatorRegistryReturns['getNumValidators()uint64']
    }>
    & Record<'getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)' | 'getValidatorConfig', {
      argsObj: ValidatorRegistryArgs['obj']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: ValidatorRegistryArgs['tuple']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)']
      returns: ValidatorRegistryReturns['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'getValidatorState(uint64)(uint64,uint64,uint64,uint64)' | 'getValidatorState', {
      argsObj: ValidatorRegistryArgs['obj']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)']
      argsTuple: ValidatorRegistryArgs['tuple']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)']
      returns: ValidatorRegistryReturns['getValidatorState(uint64)(uint64,uint64,uint64,uint64)']
    }>
    & Record<'getValidatorOwnerAndManager(uint64)(address,address)' | 'getValidatorOwnerAndManager', {
      argsObj: ValidatorRegistryArgs['obj']['getValidatorOwnerAndManager(uint64)(address,address)']
      argsTuple: ValidatorRegistryArgs['tuple']['getValidatorOwnerAndManager(uint64)(address,address)']
      returns: ValidatorRegistryReturns['getValidatorOwnerAndManager(uint64)(address,address)']
    }>
    & Record<'getPools(uint64)(uint64,uint64,uint64)[]' | 'getPools', {
      argsObj: ValidatorRegistryArgs['obj']['getPools(uint64)(uint64,uint64,uint64)[]']
      argsTuple: ValidatorRegistryArgs['tuple']['getPools(uint64)(uint64,uint64,uint64)[]']
      returns: ValidatorRegistryReturns['getPools(uint64)(uint64,uint64,uint64)[]']
    }>
    & Record<'getPoolAppId(uint64,uint64)uint64' | 'getPoolAppId', {
      argsObj: ValidatorRegistryArgs['obj']['getPoolAppId(uint64,uint64)uint64']
      argsTuple: ValidatorRegistryArgs['tuple']['getPoolAppId(uint64,uint64)uint64']
      returns: ValidatorRegistryReturns['getPoolAppId(uint64,uint64)uint64']
    }>
    & Record<'getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)' | 'getPoolInfo', {
      argsObj: ValidatorRegistryArgs['obj']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)']
      argsTuple: ValidatorRegistryArgs['tuple']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)']
      returns: ValidatorRegistryReturns['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)']
    }>
    & Record<'getCurMaxStakePerPool(uint64)uint64' | 'getCurMaxStakePerPool', {
      argsObj: ValidatorRegistryArgs['obj']['getCurMaxStakePerPool(uint64)uint64']
      argsTuple: ValidatorRegistryArgs['tuple']['getCurMaxStakePerPool(uint64)uint64']
      returns: ValidatorRegistryReturns['getCurMaxStakePerPool(uint64)uint64']
    }>
    & Record<'doesStakerNeedToPayMBR(address)bool' | 'doesStakerNeedToPayMBR', {
      argsObj: ValidatorRegistryArgs['obj']['doesStakerNeedToPayMBR(address)bool']
      argsTuple: ValidatorRegistryArgs['tuple']['doesStakerNeedToPayMBR(address)bool']
      returns: ValidatorRegistryReturns['doesStakerNeedToPayMBR(address)bool']
    }>
    & Record<'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]' | 'getStakedPoolsForAccount', {
      argsObj: ValidatorRegistryArgs['obj']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]']
      argsTuple: ValidatorRegistryArgs['tuple']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]']
      returns: ValidatorRegistryReturns['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]']
    }>
    & Record<'getTokenPayoutRatio(uint64)(uint64[24],uint64)' | 'getTokenPayoutRatio', {
      argsObj: ValidatorRegistryArgs['obj']['getTokenPayoutRatio(uint64)(uint64[24],uint64)']
      argsTuple: ValidatorRegistryArgs['tuple']['getTokenPayoutRatio(uint64)(uint64[24],uint64)']
      returns: ValidatorRegistryReturns['getTokenPayoutRatio(uint64)(uint64[24],uint64)']
    }>
    & Record<'getNodePoolAssignments(uint64)((uint64[3])[8])' | 'getNodePoolAssignments', {
      argsObj: ValidatorRegistryArgs['obj']['getNodePoolAssignments(uint64)((uint64[3])[8])']
      argsTuple: ValidatorRegistryArgs['tuple']['getNodePoolAssignments(uint64)((uint64[3])[8])']
      returns: ValidatorRegistryReturns['getNodePoolAssignments(uint64)((uint64[3])[8])']
    }>
    & Record<'getNFDRegistryID()uint64' | 'getNFDRegistryID', {
      argsObj: ValidatorRegistryArgs['obj']['getNFDRegistryID()uint64']
      argsTuple: ValidatorRegistryArgs['tuple']['getNFDRegistryID()uint64']
      returns: ValidatorRegistryReturns['getNFDRegistryID()uint64']
    }>
    & Record<'addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64' | 'addValidator', {
      argsObj: ValidatorRegistryArgs['obj']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64']
      argsTuple: ValidatorRegistryArgs['tuple']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64']
      returns: ValidatorRegistryReturns['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64']
    }>
    & Record<'changeValidatorManager(uint64,address)void' | 'changeValidatorManager', {
      argsObj: ValidatorRegistryArgs['obj']['changeValidatorManager(uint64,address)void']
      argsTuple: ValidatorRegistryArgs['tuple']['changeValidatorManager(uint64,address)void']
      returns: ValidatorRegistryReturns['changeValidatorManager(uint64,address)void']
    }>
    & Record<'changeValidatorSunsetInfo(uint64,uint64,uint64)void' | 'changeValidatorSunsetInfo', {
      argsObj: ValidatorRegistryArgs['obj']['changeValidatorSunsetInfo(uint64,uint64,uint64)void']
      argsTuple: ValidatorRegistryArgs['tuple']['changeValidatorSunsetInfo(uint64,uint64,uint64)void']
      returns: ValidatorRegistryReturns['changeValidatorSunsetInfo(uint64,uint64,uint64)void']
    }>
    & Record<'changeValidatorNFD(uint64,uint64,byte[])void' | 'changeValidatorNFD', {
      argsObj: ValidatorRegistryArgs['obj']['changeValidatorNFD(uint64,uint64,byte[])void']
      argsTuple: ValidatorRegistryArgs['tuple']['changeValidatorNFD(uint64,uint64,byte[])void']
      returns: ValidatorRegistryReturns['changeValidatorNFD(uint64,uint64,byte[])void']
    }>
    & Record<'changeValidatorCommissionAddress(uint64,address)void' | 'changeValidatorCommissionAddress', {
      argsObj: ValidatorRegistryArgs['obj']['changeValidatorCommissionAddress(uint64,address)void']
      argsTuple: ValidatorRegistryArgs['tuple']['changeValidatorCommissionAddress(uint64,address)void']
      returns: ValidatorRegistryReturns['changeValidatorCommissionAddress(uint64,address)void']
    }>
    & Record<'changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void' | 'changeValidatorRewardInfo', {
      argsObj: ValidatorRegistryArgs['obj']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void']
      argsTuple: ValidatorRegistryArgs['tuple']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void']
      returns: ValidatorRegistryReturns['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void']
    }>
    & Record<'addPool(uint64,uint64)(uint64,uint64,uint64)' | 'addPool', {
      argsObj: ValidatorRegistryArgs['obj']['addPool(uint64,uint64)(uint64,uint64,uint64)']
      argsTuple: ValidatorRegistryArgs['tuple']['addPool(uint64,uint64)(uint64,uint64,uint64)']
      returns: ValidatorRegistryReturns['addPool(uint64,uint64)(uint64,uint64,uint64)']
    }>
    & Record<'addStake(uint64,uint64)(uint64,uint64,uint64)' | 'addStake', {
      argsObj: ValidatorRegistryArgs['obj']['addStake(uint64,uint64)(uint64,uint64,uint64)']
      argsTuple: ValidatorRegistryArgs['tuple']['addStake(uint64,uint64)(uint64,uint64,uint64)']
      returns: ValidatorRegistryReturns['addStake(uint64,uint64)(uint64,uint64,uint64)']
    }>
    & Record<'setTokenPayoutRatio(uint64)(uint64[24],uint64)' | 'setTokenPayoutRatio', {
      argsObj: ValidatorRegistryArgs['obj']['setTokenPayoutRatio(uint64)(uint64[24],uint64)']
      argsTuple: ValidatorRegistryArgs['tuple']['setTokenPayoutRatio(uint64)(uint64[24],uint64)']
      returns: ValidatorRegistryReturns['setTokenPayoutRatio(uint64)(uint64[24],uint64)']
    }>
    & Record<'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void' | 'stakeUpdatedViaRewards', {
      argsObj: ValidatorRegistryArgs['obj']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void']
      argsTuple: ValidatorRegistryArgs['tuple']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void']
      returns: ValidatorRegistryReturns['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void']
    }>
    & Record<'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void' | 'stakeRemoved', {
      argsObj: ValidatorRegistryArgs['obj']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void']
      argsTuple: ValidatorRegistryArgs['tuple']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void']
      returns: ValidatorRegistryReturns['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void']
    }>
    & Record<'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)' | 'findPoolForStaker', {
      argsObj: ValidatorRegistryArgs['obj']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)']
      argsTuple: ValidatorRegistryArgs['tuple']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)']
      returns: ValidatorRegistryReturns['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)']
    }>
    & Record<'movePoolToNode(uint64,uint64,uint64)void' | 'movePoolToNode', {
      argsObj: ValidatorRegistryArgs['obj']['movePoolToNode(uint64,uint64,uint64)void']
      argsTuple: ValidatorRegistryArgs['tuple']['movePoolToNode(uint64,uint64,uint64)void']
      returns: ValidatorRegistryReturns['movePoolToNode(uint64,uint64,uint64)void']
    }>
    & Record<'emptyTokenRewards(uint64,address)uint64' | 'emptyTokenRewards', {
      argsObj: ValidatorRegistryArgs['obj']['emptyTokenRewards(uint64,address)uint64']
      argsTuple: ValidatorRegistryArgs['tuple']['emptyTokenRewards(uint64,address)uint64']
      returns: ValidatorRegistryReturns['emptyTokenRewards(uint64,address)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        stakingPoolInitialized: bigint
        numValidators: bigint
        numStakers: bigint
        totalAlgoStaked: bigint
      }
      maps: {}
    }
    box: {
      keys: {
        stakingPoolApprovalProgram: BinaryState
      }
      maps: {
        validatorList: Map<bigint | number, ValidatorInfo>
        stakerPoolSet: Map<string, [[bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]]>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ValidatorRegistrySignatures = keyof ValidatorRegistryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ValidatorRegistryNonVoidMethodSignatures = keyof ValidatorRegistryTypes['methods'] extends infer T ? T extends keyof ValidatorRegistryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ValidatorRegistry smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ValidatorRegistrySignatures> = ValidatorRegistryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ValidatorRegistry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ValidatorRegistrySignatures> = ValidatorRegistryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ValidatorRegistryTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = ValidatorRegistryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ValidatorRegistryCreateCallParams =
  | Expand<CallParams<ValidatorRegistryArgs['obj']['createApplication()void'] | ValidatorRegistryArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<ValidatorRegistryArgs['obj']['createApplication()void'] | ValidatorRegistryArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type ValidatorRegistryUpdateCallParams =
  | Expand<CallParams<ValidatorRegistryArgs['obj']['updateApplication()void'] | ValidatorRegistryArgs['tuple']['updateApplication()void']> & {method: 'updateApplication'}>
  | Expand<CallParams<ValidatorRegistryArgs['obj']['updateApplication()void'] | ValidatorRegistryArgs['tuple']['updateApplication()void']> & {method: 'updateApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type ValidatorRegistryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ValidatorRegistryCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: ValidatorRegistryUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ValidatorRegistry smart contract
 */
export abstract class ValidatorRegistryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends ValidatorRegistryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return ValidatorRegistryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ValidatorRegistry smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<ValidatorRegistryArgs['obj']['createApplication()void'] | ValidatorRegistryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends ValidatorRegistryUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication()void':
            return ValidatorRegistryParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the ValidatorRegistry smart contract using the updateApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<ValidatorRegistryArgs['obj']['updateApplication()void'] | ValidatorRegistryArgs['tuple']['updateApplication()void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initStakingContract(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initStakingContract(params: CallParams<ValidatorRegistryArgs['obj']['initStakingContract(uint64)void'] | ValidatorRegistryArgs['tuple']['initStakingContract(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initStakingContract(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.approvalProgramSize],
    }
  }
  /**
   * Constructs a no op call for the loadStakingContractData(uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static loadStakingContractData(params: CallParams<ValidatorRegistryArgs['obj']['loadStakingContractData(uint64,byte[])void'] | ValidatorRegistryArgs['tuple']['loadStakingContractData(uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'loadStakingContractData(uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.offset, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the finalizeStakingContract()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static finalizeStakingContract(params: CallParams<ValidatorRegistryArgs['obj']['finalizeStakingContract()void'] | ValidatorRegistryArgs['tuple']['finalizeStakingContract()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'finalizeStakingContract()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the gas()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static gas(params: CallParams<ValidatorRegistryArgs['obj']['gas()void'] | ValidatorRegistryArgs['tuple']['gas()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'gas()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getMbrAmounts()(uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMbrAmounts(params: CallParams<ValidatorRegistryArgs['obj']['getMbrAmounts()(uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getMbrAmounts()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getMbrAmounts()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProtocolConstraints(params: CallParams<ValidatorRegistryArgs['obj']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getNumValidators()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getNumValidators(params: CallParams<ValidatorRegistryArgs['obj']['getNumValidators()uint64'] | ValidatorRegistryArgs['tuple']['getNumValidators()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getNumValidators()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getValidatorConfig(params: CallParams<ValidatorRegistryArgs['obj']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the getValidatorState(uint64)(uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getValidatorState(params: CallParams<ValidatorRegistryArgs['obj']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getValidatorState(uint64)(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the getValidatorOwnerAndManager(uint64)(address,address) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getValidatorOwnerAndManager(params: CallParams<ValidatorRegistryArgs['obj']['getValidatorOwnerAndManager(uint64)(address,address)'] | ValidatorRegistryArgs['tuple']['getValidatorOwnerAndManager(uint64)(address,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getValidatorOwnerAndManager(uint64)(address,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the getPools(uint64)(uint64,uint64,uint64)[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPools(params: CallParams<ValidatorRegistryArgs['obj']['getPools(uint64)(uint64,uint64,uint64)[]'] | ValidatorRegistryArgs['tuple']['getPools(uint64)(uint64,uint64,uint64)[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPools(uint64)(uint64,uint64,uint64)[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the getPoolAppId(uint64,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolAppId(params: CallParams<ValidatorRegistryArgs['obj']['getPoolAppId(uint64,uint64)uint64'] | ValidatorRegistryArgs['tuple']['getPoolAppId(uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolAppId(uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolInfo(params: CallParams<ValidatorRegistryArgs['obj']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolKey],
    }
  }
  /**
   * Constructs a no op call for the getCurMaxStakePerPool(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCurMaxStakePerPool(params: CallParams<ValidatorRegistryArgs['obj']['getCurMaxStakePerPool(uint64)uint64'] | ValidatorRegistryArgs['tuple']['getCurMaxStakePerPool(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCurMaxStakePerPool(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the doesStakerNeedToPayMBR(address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doesStakerNeedToPayMbr(params: CallParams<ValidatorRegistryArgs['obj']['doesStakerNeedToPayMBR(address)bool'] | ValidatorRegistryArgs['tuple']['doesStakerNeedToPayMBR(address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'doesStakerNeedToPayMBR(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.staker],
    }
  }
  /**
   * Constructs a no op call for the getStakedPoolsForAccount(address)(uint64,uint64,uint64)[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getStakedPoolsForAccount(params: CallParams<ValidatorRegistryArgs['obj']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'] | ValidatorRegistryArgs['tuple']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.staker],
    }
  }
  /**
   * Constructs a no op call for the getTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTokenPayoutRatio(params: CallParams<ValidatorRegistryArgs['obj']['getTokenPayoutRatio(uint64)(uint64[24],uint64)'] | ValidatorRegistryArgs['tuple']['getTokenPayoutRatio(uint64)(uint64[24],uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTokenPayoutRatio(uint64)(uint64[24],uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the getNodePoolAssignments(uint64)((uint64[3])[8]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getNodePoolAssignments(params: CallParams<ValidatorRegistryArgs['obj']['getNodePoolAssignments(uint64)((uint64[3])[8])'] | ValidatorRegistryArgs['tuple']['getNodePoolAssignments(uint64)((uint64[3])[8])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getNodePoolAssignments(uint64)((uint64[3])[8])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the getNFDRegistryID()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getNfdRegistryId(params: CallParams<ValidatorRegistryArgs['obj']['getNFDRegistryID()uint64'] | ValidatorRegistryArgs['tuple']['getNFDRegistryID()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getNFDRegistryID()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addValidator(params: CallParams<ValidatorRegistryArgs['obj']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64'] | ValidatorRegistryArgs['tuple']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.nfdName, params.args.config],
    }
  }
  /**
   * Constructs a no op call for the changeValidatorManager(uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeValidatorManager(params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorManager(uint64,address)void'] | ValidatorRegistryArgs['tuple']['changeValidatorManager(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changeValidatorManager(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.manager],
    }
  }
  /**
   * Constructs a no op call for the changeValidatorSunsetInfo(uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeValidatorSunsetInfo(params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorSunsetInfo(uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['changeValidatorSunsetInfo(uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changeValidatorSunsetInfo(uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.sunsettingOn, params.args.sunsettingTo],
    }
  }
  /**
   * Constructs a no op call for the changeValidatorNFD(uint64,uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeValidatorNfd(params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorNFD(uint64,uint64,byte[])void'] | ValidatorRegistryArgs['tuple']['changeValidatorNFD(uint64,uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changeValidatorNFD(uint64,uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.nfdAppId, params.args.nfdName],
    }
  }
  /**
   * Constructs a no op call for the changeValidatorCommissionAddress(uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeValidatorCommissionAddress(params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorCommissionAddress(uint64,address)void'] | ValidatorRegistryArgs['tuple']['changeValidatorCommissionAddress(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changeValidatorCommissionAddress(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.commissionAddress],
    }
  }
  /**
   * Constructs a no op call for the changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeValidatorRewardInfo(params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.entryGatingType, params.args.entryGatingAddress, params.args.entryGatingAssets, params.args.gatingAssetMinBalance, params.args.rewardPerPayout],
    }
  }
  /**
   * Constructs a no op call for the addPool(uint64,uint64)(uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addPool(params: CallParams<ValidatorRegistryArgs['obj']['addPool(uint64,uint64)(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['addPool(uint64,uint64)(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addPool(uint64,uint64)(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.nodeNum],
    }
  }
  /**
   * Constructs a no op call for the addStake(uint64,uint64)(uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addStake(params: CallParams<ValidatorRegistryArgs['obj']['addStake(uint64,uint64)(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['addStake(uint64,uint64)(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addStake(uint64,uint64)(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.valueToVerify],
    }
  }
  /**
   * Constructs a no op call for the setTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setTokenPayoutRatio(params: CallParams<ValidatorRegistryArgs['obj']['setTokenPayoutRatio(uint64)(uint64[24],uint64)'] | ValidatorRegistryArgs['tuple']['setTokenPayoutRatio(uint64)(uint64[24],uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setTokenPayoutRatio(uint64)(uint64[24],uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId],
    }
  }
  /**
   * Constructs a no op call for the stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stakeUpdatedViaRewards(params: CallParams<ValidatorRegistryArgs['obj']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolKey, params.args.algoToAdd, params.args.rewardTokenAmountReserved, params.args.validatorCommission, params.args.saturatedBurnToFeeSink],
    }
  }
  /**
   * Constructs a no op call for the stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stakeRemoved(params: CallParams<ValidatorRegistryArgs['obj']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'] | ValidatorRegistryArgs['tuple']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolKey, params.args.staker, params.args.amountRemoved, params.args.rewardRemoved, params.args.stakerRemoved],
    }
  }
  /**
   * Constructs a no op call for the findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static findPoolForStaker(params: CallParams<ValidatorRegistryArgs['obj']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'] | ValidatorRegistryArgs['tuple']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.staker, params.args.amountToStake],
    }
  }
  /**
   * Constructs a no op call for the movePoolToNode(uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static movePoolToNode(params: CallParams<ValidatorRegistryArgs['obj']['movePoolToNode(uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['movePoolToNode(uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'movePoolToNode(uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.poolAppId, params.args.nodeNum],
    }
  }
  /**
   * Constructs a no op call for the emptyTokenRewards(uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emptyTokenRewards(params: CallParams<ValidatorRegistryArgs['obj']['emptyTokenRewards(uint64,address)uint64'] | ValidatorRegistryArgs['tuple']['emptyTokenRewards(uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emptyTokenRewards(uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.validatorId, params.args.receiver],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ValidatorRegistry smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ValidatorRegistryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ValidatorRegistryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ValidatorRegistryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ValidatorRegistryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ValidatorRegistry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ValidatorRegistryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? ValidatorRegistryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (ValidatorRegistryCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? ValidatorRegistryParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (ValidatorRegistryUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new ValidatorRegistryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ValidatorRegistry smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<ValidatorRegistryArgs['obj']['createApplication()void'] | ValidatorRegistryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(ValidatorRegistryParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the ValidatorRegistry smart contract using the updateApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<ValidatorRegistryArgs['obj']['updateApplication()void'] | ValidatorRegistryArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appFactory.params.deployUpdate(ValidatorRegistryParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ValidatorRegistry smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<ValidatorRegistryArgs['obj']['createApplication()void'] | ValidatorRegistryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(ValidatorRegistryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ValidatorRegistry smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<ValidatorRegistryArgs['obj']['createApplication()void'] | ValidatorRegistryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(ValidatorRegistryParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | ValidatorRegistryReturns['createApplication()void']) }, appClient: new ValidatorRegistryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ValidatorRegistry smart contract
 */
export class ValidatorRegistryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ValidatorRegistryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ValidatorRegistry app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ValidatorRegistryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ValidatorRegistryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ValidatorRegistryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ValidatorRegistryClient> {
    return new ValidatorRegistryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ValidatorRegistryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ValidatorRegistryClient> {
    return new ValidatorRegistryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the ValidatorRegistry smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<ValidatorRegistryArgs['obj']['updateApplication()void'] | ValidatorRegistryArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.params.update(ValidatorRegistryParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the ValidatorRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `initStakingContract(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initStakingContract: (params: CallParams<ValidatorRegistryArgs['obj']['initStakingContract(uint64)void'] | ValidatorRegistryArgs['tuple']['initStakingContract(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.initStakingContract(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `loadStakingContractData(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    loadStakingContractData: (params: CallParams<ValidatorRegistryArgs['obj']['loadStakingContractData(uint64,byte[])void'] | ValidatorRegistryArgs['tuple']['loadStakingContractData(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.loadStakingContractData(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `finalizeStakingContract()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    finalizeStakingContract: (params: CallParams<ValidatorRegistryArgs['obj']['finalizeStakingContract()void'] | ValidatorRegistryArgs['tuple']['finalizeStakingContract()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.finalizeStakingContract(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    gas: (params: CallParams<ValidatorRegistryArgs['obj']['gas()void'] | ValidatorRegistryArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.gas(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getMbrAmounts()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMbrAmounts: (params: CallParams<ValidatorRegistryArgs['obj']['getMbrAmounts()(uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getMbrAmounts()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getMbrAmounts(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getProtocolConstraints: (params: CallParams<ValidatorRegistryArgs['obj']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getProtocolConstraints(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getNumValidators()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getNumValidators: (params: CallParams<ValidatorRegistryArgs['obj']['getNumValidators()uint64'] | ValidatorRegistryArgs['tuple']['getNumValidators()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getNumValidators(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getValidatorConfig: (params: CallParams<ValidatorRegistryArgs['obj']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getValidatorConfig(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getValidatorState(uint64)(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getValidatorState: (params: CallParams<ValidatorRegistryArgs['obj']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getValidatorState(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getValidatorOwnerAndManager(uint64)(address,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getValidatorOwnerAndManager: (params: CallParams<ValidatorRegistryArgs['obj']['getValidatorOwnerAndManager(uint64)(address,address)'] | ValidatorRegistryArgs['tuple']['getValidatorOwnerAndManager(uint64)(address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getValidatorOwnerAndManager(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getPools(uint64)(uint64,uint64,uint64)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPools: (params: CallParams<ValidatorRegistryArgs['obj']['getPools(uint64)(uint64,uint64,uint64)[]'] | ValidatorRegistryArgs['tuple']['getPools(uint64)(uint64,uint64,uint64)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getPools(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getPoolAppId(uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolAppId: (params: CallParams<ValidatorRegistryArgs['obj']['getPoolAppId(uint64,uint64)uint64'] | ValidatorRegistryArgs['tuple']['getPoolAppId(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getPoolAppId(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolInfo: (params: CallParams<ValidatorRegistryArgs['obj']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getPoolInfo(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getCurMaxStakePerPool(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCurMaxStakePerPool: (params: CallParams<ValidatorRegistryArgs['obj']['getCurMaxStakePerPool(uint64)uint64'] | ValidatorRegistryArgs['tuple']['getCurMaxStakePerPool(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getCurMaxStakePerPool(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `doesStakerNeedToPayMBR(address)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doesStakerNeedToPayMbr: (params: CallParams<ValidatorRegistryArgs['obj']['doesStakerNeedToPayMBR(address)bool'] | ValidatorRegistryArgs['tuple']['doesStakerNeedToPayMBR(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.doesStakerNeedToPayMbr(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getStakedPoolsForAccount: (params: CallParams<ValidatorRegistryArgs['obj']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'] | ValidatorRegistryArgs['tuple']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getStakedPoolsForAccount(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getTokenPayoutRatio(uint64)(uint64[24],uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTokenPayoutRatio: (params: CallParams<ValidatorRegistryArgs['obj']['getTokenPayoutRatio(uint64)(uint64[24],uint64)'] | ValidatorRegistryArgs['tuple']['getTokenPayoutRatio(uint64)(uint64[24],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getTokenPayoutRatio(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getNodePoolAssignments(uint64)((uint64[3])[8])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getNodePoolAssignments: (params: CallParams<ValidatorRegistryArgs['obj']['getNodePoolAssignments(uint64)((uint64[3])[8])'] | ValidatorRegistryArgs['tuple']['getNodePoolAssignments(uint64)((uint64[3])[8])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getNodePoolAssignments(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getNFDRegistryID()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getNfdRegistryId: (params: CallParams<ValidatorRegistryArgs['obj']['getNFDRegistryID()uint64'] | ValidatorRegistryArgs['tuple']['getNFDRegistryID()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.getNfdRegistryId(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addValidator: (params: CallParams<ValidatorRegistryArgs['obj']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64'] | ValidatorRegistryArgs['tuple']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.addValidator(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorManager(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeValidatorManager: (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorManager(uint64,address)void'] | ValidatorRegistryArgs['tuple']['changeValidatorManager(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.changeValidatorManager(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorSunsetInfo(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeValidatorSunsetInfo: (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorSunsetInfo(uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['changeValidatorSunsetInfo(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.changeValidatorSunsetInfo(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorNFD(uint64,uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeValidatorNfd: (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorNFD(uint64,uint64,byte[])void'] | ValidatorRegistryArgs['tuple']['changeValidatorNFD(uint64,uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.changeValidatorNfd(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorCommissionAddress(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeValidatorCommissionAddress: (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorCommissionAddress(uint64,address)void'] | ValidatorRegistryArgs['tuple']['changeValidatorCommissionAddress(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.changeValidatorCommissionAddress(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeValidatorRewardInfo: (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.changeValidatorRewardInfo(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `addPool(uint64,uint64)(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addPool: (params: CallParams<ValidatorRegistryArgs['obj']['addPool(uint64,uint64)(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['addPool(uint64,uint64)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.addPool(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `addStake(uint64,uint64)(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addStake: (params: CallParams<ValidatorRegistryArgs['obj']['addStake(uint64,uint64)(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['addStake(uint64,uint64)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.addStake(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `setTokenPayoutRatio(uint64)(uint64[24],uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setTokenPayoutRatio: (params: CallParams<ValidatorRegistryArgs['obj']['setTokenPayoutRatio(uint64)(uint64[24],uint64)'] | ValidatorRegistryArgs['tuple']['setTokenPayoutRatio(uint64)(uint64[24],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.setTokenPayoutRatio(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stakeUpdatedViaRewards: (params: CallParams<ValidatorRegistryArgs['obj']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.stakeUpdatedViaRewards(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stakeRemoved: (params: CallParams<ValidatorRegistryArgs['obj']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'] | ValidatorRegistryArgs['tuple']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.stakeRemoved(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    findPoolForStaker: (params: CallParams<ValidatorRegistryArgs['obj']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'] | ValidatorRegistryArgs['tuple']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.findPoolForStaker(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `movePoolToNode(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    movePoolToNode: (params: CallParams<ValidatorRegistryArgs['obj']['movePoolToNode(uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['movePoolToNode(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.movePoolToNode(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `emptyTokenRewards(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emptyTokenRewards: (params: CallParams<ValidatorRegistryArgs['obj']['emptyTokenRewards(uint64,address)uint64'] | ValidatorRegistryArgs['tuple']['emptyTokenRewards(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ValidatorRegistryParamsFactory.emptyTokenRewards(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the ValidatorRegistry smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<ValidatorRegistryArgs['obj']['updateApplication()void'] | ValidatorRegistryArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.createTransaction.update(ValidatorRegistryParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the ValidatorRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `initStakingContract(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initStakingContract: (params: CallParams<ValidatorRegistryArgs['obj']['initStakingContract(uint64)void'] | ValidatorRegistryArgs['tuple']['initStakingContract(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.initStakingContract(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `loadStakingContractData(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    loadStakingContractData: (params: CallParams<ValidatorRegistryArgs['obj']['loadStakingContractData(uint64,byte[])void'] | ValidatorRegistryArgs['tuple']['loadStakingContractData(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.loadStakingContractData(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `finalizeStakingContract()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    finalizeStakingContract: (params: CallParams<ValidatorRegistryArgs['obj']['finalizeStakingContract()void'] | ValidatorRegistryArgs['tuple']['finalizeStakingContract()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.finalizeStakingContract(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    gas: (params: CallParams<ValidatorRegistryArgs['obj']['gas()void'] | ValidatorRegistryArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.gas(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getMbrAmounts()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMbrAmounts: (params: CallParams<ValidatorRegistryArgs['obj']['getMbrAmounts()(uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getMbrAmounts()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getMbrAmounts(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getProtocolConstraints: (params: CallParams<ValidatorRegistryArgs['obj']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getProtocolConstraints(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getNumValidators()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getNumValidators: (params: CallParams<ValidatorRegistryArgs['obj']['getNumValidators()uint64'] | ValidatorRegistryArgs['tuple']['getNumValidators()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getNumValidators(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getValidatorConfig: (params: CallParams<ValidatorRegistryArgs['obj']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getValidatorConfig(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getValidatorState(uint64)(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getValidatorState: (params: CallParams<ValidatorRegistryArgs['obj']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getValidatorState(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getValidatorOwnerAndManager(uint64)(address,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getValidatorOwnerAndManager: (params: CallParams<ValidatorRegistryArgs['obj']['getValidatorOwnerAndManager(uint64)(address,address)'] | ValidatorRegistryArgs['tuple']['getValidatorOwnerAndManager(uint64)(address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getValidatorOwnerAndManager(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getPools(uint64)(uint64,uint64,uint64)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPools: (params: CallParams<ValidatorRegistryArgs['obj']['getPools(uint64)(uint64,uint64,uint64)[]'] | ValidatorRegistryArgs['tuple']['getPools(uint64)(uint64,uint64,uint64)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getPools(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getPoolAppId(uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolAppId: (params: CallParams<ValidatorRegistryArgs['obj']['getPoolAppId(uint64,uint64)uint64'] | ValidatorRegistryArgs['tuple']['getPoolAppId(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getPoolAppId(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolInfo: (params: CallParams<ValidatorRegistryArgs['obj']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getPoolInfo(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getCurMaxStakePerPool(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCurMaxStakePerPool: (params: CallParams<ValidatorRegistryArgs['obj']['getCurMaxStakePerPool(uint64)uint64'] | ValidatorRegistryArgs['tuple']['getCurMaxStakePerPool(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getCurMaxStakePerPool(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `doesStakerNeedToPayMBR(address)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doesStakerNeedToPayMbr: (params: CallParams<ValidatorRegistryArgs['obj']['doesStakerNeedToPayMBR(address)bool'] | ValidatorRegistryArgs['tuple']['doesStakerNeedToPayMBR(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.doesStakerNeedToPayMbr(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getStakedPoolsForAccount: (params: CallParams<ValidatorRegistryArgs['obj']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'] | ValidatorRegistryArgs['tuple']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getStakedPoolsForAccount(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getTokenPayoutRatio(uint64)(uint64[24],uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTokenPayoutRatio: (params: CallParams<ValidatorRegistryArgs['obj']['getTokenPayoutRatio(uint64)(uint64[24],uint64)'] | ValidatorRegistryArgs['tuple']['getTokenPayoutRatio(uint64)(uint64[24],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getTokenPayoutRatio(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getNodePoolAssignments(uint64)((uint64[3])[8])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getNodePoolAssignments: (params: CallParams<ValidatorRegistryArgs['obj']['getNodePoolAssignments(uint64)((uint64[3])[8])'] | ValidatorRegistryArgs['tuple']['getNodePoolAssignments(uint64)((uint64[3])[8])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getNodePoolAssignments(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getNFDRegistryID()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getNfdRegistryId: (params: CallParams<ValidatorRegistryArgs['obj']['getNFDRegistryID()uint64'] | ValidatorRegistryArgs['tuple']['getNFDRegistryID()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.getNfdRegistryId(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addValidator: (params: CallParams<ValidatorRegistryArgs['obj']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64'] | ValidatorRegistryArgs['tuple']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.addValidator(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorManager(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeValidatorManager: (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorManager(uint64,address)void'] | ValidatorRegistryArgs['tuple']['changeValidatorManager(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.changeValidatorManager(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorSunsetInfo(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeValidatorSunsetInfo: (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorSunsetInfo(uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['changeValidatorSunsetInfo(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.changeValidatorSunsetInfo(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorNFD(uint64,uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeValidatorNfd: (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorNFD(uint64,uint64,byte[])void'] | ValidatorRegistryArgs['tuple']['changeValidatorNFD(uint64,uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.changeValidatorNfd(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorCommissionAddress(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeValidatorCommissionAddress: (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorCommissionAddress(uint64,address)void'] | ValidatorRegistryArgs['tuple']['changeValidatorCommissionAddress(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.changeValidatorCommissionAddress(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeValidatorRewardInfo: (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.changeValidatorRewardInfo(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `addPool(uint64,uint64)(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addPool: (params: CallParams<ValidatorRegistryArgs['obj']['addPool(uint64,uint64)(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['addPool(uint64,uint64)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.addPool(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `addStake(uint64,uint64)(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addStake: (params: CallParams<ValidatorRegistryArgs['obj']['addStake(uint64,uint64)(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['addStake(uint64,uint64)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.addStake(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `setTokenPayoutRatio(uint64)(uint64[24],uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setTokenPayoutRatio: (params: CallParams<ValidatorRegistryArgs['obj']['setTokenPayoutRatio(uint64)(uint64[24],uint64)'] | ValidatorRegistryArgs['tuple']['setTokenPayoutRatio(uint64)(uint64[24],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.setTokenPayoutRatio(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stakeUpdatedViaRewards: (params: CallParams<ValidatorRegistryArgs['obj']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.stakeUpdatedViaRewards(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stakeRemoved: (params: CallParams<ValidatorRegistryArgs['obj']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'] | ValidatorRegistryArgs['tuple']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.stakeRemoved(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    findPoolForStaker: (params: CallParams<ValidatorRegistryArgs['obj']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'] | ValidatorRegistryArgs['tuple']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.findPoolForStaker(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `movePoolToNode(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    movePoolToNode: (params: CallParams<ValidatorRegistryArgs['obj']['movePoolToNode(uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['movePoolToNode(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.movePoolToNode(params))
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `emptyTokenRewards(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emptyTokenRewards: (params: CallParams<ValidatorRegistryArgs['obj']['emptyTokenRewards(uint64,address)uint64'] | ValidatorRegistryArgs['tuple']['emptyTokenRewards(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ValidatorRegistryParamsFactory.emptyTokenRewards(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the ValidatorRegistry smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<ValidatorRegistryArgs['obj']['updateApplication()void'] | ValidatorRegistryArgs['tuple']['updateApplication()void']> & AppClientCompilationParams & SendParams = {args: []}) => {
        const result = await this.appClient.send.update(ValidatorRegistryParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['updateApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the ValidatorRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `initStakingContract(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initStakingContract: async (params: CallParams<ValidatorRegistryArgs['obj']['initStakingContract(uint64)void'] | ValidatorRegistryArgs['tuple']['initStakingContract(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.initStakingContract(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['initStakingContract(uint64)void'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `loadStakingContractData(uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    loadStakingContractData: async (params: CallParams<ValidatorRegistryArgs['obj']['loadStakingContractData(uint64,byte[])void'] | ValidatorRegistryArgs['tuple']['loadStakingContractData(uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.loadStakingContractData(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['loadStakingContractData(uint64,byte[])void'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `finalizeStakingContract()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    finalizeStakingContract: async (params: CallParams<ValidatorRegistryArgs['obj']['finalizeStakingContract()void'] | ValidatorRegistryArgs['tuple']['finalizeStakingContract()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.finalizeStakingContract(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['finalizeStakingContract()void'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `gas()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    gas: async (params: CallParams<ValidatorRegistryArgs['obj']['gas()void'] | ValidatorRegistryArgs['tuple']['gas()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.gas(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['gas()void'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getMbrAmounts()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMbrAmounts: async (params: CallParams<ValidatorRegistryArgs['obj']['getMbrAmounts()(uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getMbrAmounts()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getMbrAmounts(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getMbrAmounts()(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getProtocolConstraints: async (params: CallParams<ValidatorRegistryArgs['obj']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getProtocolConstraints(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getNumValidators()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getNumValidators: async (params: CallParams<ValidatorRegistryArgs['obj']['getNumValidators()uint64'] | ValidatorRegistryArgs['tuple']['getNumValidators()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getNumValidators(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getNumValidators()uint64'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getValidatorConfig: async (params: CallParams<ValidatorRegistryArgs['obj']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getValidatorConfig(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getValidatorState(uint64)(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getValidatorState: async (params: CallParams<ValidatorRegistryArgs['obj']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getValidatorState(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getValidatorState(uint64)(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getValidatorOwnerAndManager(uint64)(address,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getValidatorOwnerAndManager: async (params: CallParams<ValidatorRegistryArgs['obj']['getValidatorOwnerAndManager(uint64)(address,address)'] | ValidatorRegistryArgs['tuple']['getValidatorOwnerAndManager(uint64)(address,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getValidatorOwnerAndManager(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getValidatorOwnerAndManager(uint64)(address,address)'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getPools(uint64)(uint64,uint64,uint64)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPools: async (params: CallParams<ValidatorRegistryArgs['obj']['getPools(uint64)(uint64,uint64,uint64)[]'] | ValidatorRegistryArgs['tuple']['getPools(uint64)(uint64,uint64,uint64)[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getPools(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getPools(uint64)(uint64,uint64,uint64)[]'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getPoolAppId(uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolAppId: async (params: CallParams<ValidatorRegistryArgs['obj']['getPoolAppId(uint64,uint64)uint64'] | ValidatorRegistryArgs['tuple']['getPoolAppId(uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getPoolAppId(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getPoolAppId(uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolInfo: async (params: CallParams<ValidatorRegistryArgs['obj']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getPoolInfo(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getCurMaxStakePerPool(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCurMaxStakePerPool: async (params: CallParams<ValidatorRegistryArgs['obj']['getCurMaxStakePerPool(uint64)uint64'] | ValidatorRegistryArgs['tuple']['getCurMaxStakePerPool(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getCurMaxStakePerPool(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getCurMaxStakePerPool(uint64)uint64'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `doesStakerNeedToPayMBR(address)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doesStakerNeedToPayMbr: async (params: CallParams<ValidatorRegistryArgs['obj']['doesStakerNeedToPayMBR(address)bool'] | ValidatorRegistryArgs['tuple']['doesStakerNeedToPayMBR(address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.doesStakerNeedToPayMbr(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['doesStakerNeedToPayMBR(address)bool'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getStakedPoolsForAccount: async (params: CallParams<ValidatorRegistryArgs['obj']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'] | ValidatorRegistryArgs['tuple']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getStakedPoolsForAccount(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getTokenPayoutRatio(uint64)(uint64[24],uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTokenPayoutRatio: async (params: CallParams<ValidatorRegistryArgs['obj']['getTokenPayoutRatio(uint64)(uint64[24],uint64)'] | ValidatorRegistryArgs['tuple']['getTokenPayoutRatio(uint64)(uint64[24],uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getTokenPayoutRatio(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getTokenPayoutRatio(uint64)(uint64[24],uint64)'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getNodePoolAssignments(uint64)((uint64[3])[8])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getNodePoolAssignments: async (params: CallParams<ValidatorRegistryArgs['obj']['getNodePoolAssignments(uint64)((uint64[3])[8])'] | ValidatorRegistryArgs['tuple']['getNodePoolAssignments(uint64)((uint64[3])[8])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getNodePoolAssignments(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getNodePoolAssignments(uint64)((uint64[3])[8])'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `getNFDRegistryID()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getNfdRegistryId: async (params: CallParams<ValidatorRegistryArgs['obj']['getNFDRegistryID()uint64'] | ValidatorRegistryArgs['tuple']['getNFDRegistryID()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.getNfdRegistryId(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['getNFDRegistryID()uint64'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addValidator: async (params: CallParams<ValidatorRegistryArgs['obj']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64'] | ValidatorRegistryArgs['tuple']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.addValidator(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorManager(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeValidatorManager: async (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorManager(uint64,address)void'] | ValidatorRegistryArgs['tuple']['changeValidatorManager(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.changeValidatorManager(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['changeValidatorManager(uint64,address)void'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorSunsetInfo(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeValidatorSunsetInfo: async (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorSunsetInfo(uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['changeValidatorSunsetInfo(uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.changeValidatorSunsetInfo(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['changeValidatorSunsetInfo(uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorNFD(uint64,uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeValidatorNfd: async (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorNFD(uint64,uint64,byte[])void'] | ValidatorRegistryArgs['tuple']['changeValidatorNFD(uint64,uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.changeValidatorNfd(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['changeValidatorNFD(uint64,uint64,byte[])void'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorCommissionAddress(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeValidatorCommissionAddress: async (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorCommissionAddress(uint64,address)void'] | ValidatorRegistryArgs['tuple']['changeValidatorCommissionAddress(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.changeValidatorCommissionAddress(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['changeValidatorCommissionAddress(uint64,address)void'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeValidatorRewardInfo: async (params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.changeValidatorRewardInfo(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `addPool(uint64,uint64)(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addPool: async (params: CallParams<ValidatorRegistryArgs['obj']['addPool(uint64,uint64)(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['addPool(uint64,uint64)(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.addPool(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['addPool(uint64,uint64)(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `addStake(uint64,uint64)(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addStake: async (params: CallParams<ValidatorRegistryArgs['obj']['addStake(uint64,uint64)(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['addStake(uint64,uint64)(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.addStake(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['addStake(uint64,uint64)(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `setTokenPayoutRatio(uint64)(uint64[24],uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setTokenPayoutRatio: async (params: CallParams<ValidatorRegistryArgs['obj']['setTokenPayoutRatio(uint64)(uint64[24],uint64)'] | ValidatorRegistryArgs['tuple']['setTokenPayoutRatio(uint64)(uint64[24],uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.setTokenPayoutRatio(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['setTokenPayoutRatio(uint64)(uint64[24],uint64)'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stakeUpdatedViaRewards: async (params: CallParams<ValidatorRegistryArgs['obj']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.stakeUpdatedViaRewards(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stakeRemoved: async (params: CallParams<ValidatorRegistryArgs['obj']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'] | ValidatorRegistryArgs['tuple']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.stakeRemoved(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    findPoolForStaker: async (params: CallParams<ValidatorRegistryArgs['obj']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'] | ValidatorRegistryArgs['tuple']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.findPoolForStaker(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `movePoolToNode(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    movePoolToNode: async (params: CallParams<ValidatorRegistryArgs['obj']['movePoolToNode(uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['movePoolToNode(uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.movePoolToNode(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['movePoolToNode(uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the ValidatorRegistry smart contract using the `emptyTokenRewards(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emptyTokenRewards: async (params: CallParams<ValidatorRegistryArgs['obj']['emptyTokenRewards(uint64,address)uint64'] | ValidatorRegistryArgs['tuple']['emptyTokenRewards(uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ValidatorRegistryParamsFactory.emptyTokenRewards(params))
      return {...result, return: result.return as unknown as (undefined | ValidatorRegistryReturns['emptyTokenRewards(uint64,address)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ValidatorRegistryClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ValidatorRegistry app
   */
  state = {
    /**
     * Methods to access global state for the current ValidatorRegistry app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          stakingPoolInitialized: result.stakingPoolInitialized,
          numValidators: result.numValidators,
          numStakers: result.numStakers,
          totalAlgoStaked: result.totalAlgoStaked,
        }
      },
      /**
       * Get the current value of the stakingPoolInitialized key in global state
       */
      stakingPoolInitialized: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("stakingPoolInitialized")) as bigint | undefined },
      /**
       * Get the current value of the numValidators key in global state
       */
      numValidators: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("numValidators")) as bigint | undefined },
      /**
       * Get the current value of the numStakers key in global state
       */
      numStakers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("numStakers")) as bigint | undefined },
      /**
       * Get the current value of the totalAlgoStaked key in global state
       */
      totalAlgoStaked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalAlgoStaked")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ValidatorRegistry app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          stakingPoolApprovalProgram: new BinaryStateValue(result.stakingPoolApprovalProgram),
        }
      },
      /**
       * Get the current value of the stakingPoolApprovalProgram key in box state
       */
      stakingPoolApprovalProgram: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.box.getValue("stakingPoolApprovalProgram")) as Uint8Array | undefined) },
      /**
       * Get values from the validatorList map in box state
       */
      validatorList: {
        /**
         * Get all current values of the validatorList map in box state
         */
        getMap: async (): Promise<Map<bigint, ValidatorInfo>> => { return (await this.appClient.state.box.getMap("validatorList")) as Map<bigint, ValidatorInfo> },
        /**
         * Get a current value of the validatorList map by key from box state
         */
        value: async (key: bigint | number): Promise<ValidatorInfo | undefined> => { return await this.appClient.state.box.getMapValue("validatorList", key) as ValidatorInfo | undefined },
      },
      /**
       * Get values from the stakerPoolSet map in box state
       */
      stakerPoolSet: {
        /**
         * Get all current values of the stakerPoolSet map in box state
         */
        getMap: async (): Promise<Map<string, [[bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]]>> => { return (await this.appClient.state.box.getMap("stakerPoolSet")) as Map<string, [[bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]]> },
        /**
         * Get a current value of the stakerPoolSet map by key from box state
         */
        value: async (key: string): Promise<[[bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]] | undefined> => { return await this.appClient.state.box.getMapValue("stakerPoolSet", key) as [[bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint], [bigint, bigint, bigint]] | undefined },
      },
    },
  }

  public newGroup(): ValidatorRegistryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initStakingContract(uint64)void method call against the ValidatorRegistry contract
       */
      initStakingContract(params: CallParams<ValidatorRegistryArgs['obj']['initStakingContract(uint64)void'] | ValidatorRegistryArgs['tuple']['initStakingContract(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initStakingContract(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a loadStakingContractData(uint64,byte[])void method call against the ValidatorRegistry contract
       */
      loadStakingContractData(params: CallParams<ValidatorRegistryArgs['obj']['loadStakingContractData(uint64,byte[])void'] | ValidatorRegistryArgs['tuple']['loadStakingContractData(uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.loadStakingContractData(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a finalizeStakingContract()void method call against the ValidatorRegistry contract
       */
      finalizeStakingContract(params: CallParams<ValidatorRegistryArgs['obj']['finalizeStakingContract()void'] | ValidatorRegistryArgs['tuple']['finalizeStakingContract()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.finalizeStakingContract(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a gas()void method call against the ValidatorRegistry contract
       */
      gas(params: CallParams<ValidatorRegistryArgs['obj']['gas()void'] | ValidatorRegistryArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.gas(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getMbrAmounts()(uint64,uint64,uint64,uint64) method call against the ValidatorRegistry contract
       */
      getMbrAmounts(params: CallParams<ValidatorRegistryArgs['obj']['getMbrAmounts()(uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getMbrAmounts()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMbrAmounts(params)))
        resultMappers.push((v) => client.decodeReturnValue('getMbrAmounts()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the ValidatorRegistry contract
       */
      getProtocolConstraints(params: CallParams<ValidatorRegistryArgs['obj']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProtocolConstraints(params)))
        resultMappers.push((v) => client.decodeReturnValue('getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getNumValidators()uint64 method call against the ValidatorRegistry contract
       */
      getNumValidators(params: CallParams<ValidatorRegistryArgs['obj']['getNumValidators()uint64'] | ValidatorRegistryArgs['tuple']['getNumValidators()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getNumValidators(params)))
        resultMappers.push((v) => client.decodeReturnValue('getNumValidators()uint64', v))
        return this
      },
      /**
       * Add a getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64) method call against the ValidatorRegistry contract
       */
      getValidatorConfig(params: CallParams<ValidatorRegistryArgs['obj']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getValidatorConfig(params)))
        resultMappers.push((v) => client.decodeReturnValue('getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getValidatorState(uint64)(uint64,uint64,uint64,uint64) method call against the ValidatorRegistry contract
       */
      getValidatorState(params: CallParams<ValidatorRegistryArgs['obj']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getValidatorState(params)))
        resultMappers.push((v) => client.decodeReturnValue('getValidatorState(uint64)(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getValidatorOwnerAndManager(uint64)(address,address) method call against the ValidatorRegistry contract
       */
      getValidatorOwnerAndManager(params: CallParams<ValidatorRegistryArgs['obj']['getValidatorOwnerAndManager(uint64)(address,address)'] | ValidatorRegistryArgs['tuple']['getValidatorOwnerAndManager(uint64)(address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getValidatorOwnerAndManager(params)))
        resultMappers.push((v) => client.decodeReturnValue('getValidatorOwnerAndManager(uint64)(address,address)', v))
        return this
      },
      /**
       * Add a getPools(uint64)(uint64,uint64,uint64)[] method call against the ValidatorRegistry contract
       */
      getPools(params: CallParams<ValidatorRegistryArgs['obj']['getPools(uint64)(uint64,uint64,uint64)[]'] | ValidatorRegistryArgs['tuple']['getPools(uint64)(uint64,uint64,uint64)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPools(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPools(uint64)(uint64,uint64,uint64)[]', v))
        return this
      },
      /**
       * Add a getPoolAppId(uint64,uint64)uint64 method call against the ValidatorRegistry contract
       */
      getPoolAppId(params: CallParams<ValidatorRegistryArgs['obj']['getPoolAppId(uint64,uint64)uint64'] | ValidatorRegistryArgs['tuple']['getPoolAppId(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolAppId(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolAppId(uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64) method call against the ValidatorRegistry contract
       */
      getPoolInfo(params: CallParams<ValidatorRegistryArgs['obj']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getCurMaxStakePerPool(uint64)uint64 method call against the ValidatorRegistry contract
       */
      getCurMaxStakePerPool(params: CallParams<ValidatorRegistryArgs['obj']['getCurMaxStakePerPool(uint64)uint64'] | ValidatorRegistryArgs['tuple']['getCurMaxStakePerPool(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCurMaxStakePerPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCurMaxStakePerPool(uint64)uint64', v))
        return this
      },
      /**
       * Add a doesStakerNeedToPayMBR(address)bool method call against the ValidatorRegistry contract
       */
      doesStakerNeedToPayMbr(params: CallParams<ValidatorRegistryArgs['obj']['doesStakerNeedToPayMBR(address)bool'] | ValidatorRegistryArgs['tuple']['doesStakerNeedToPayMBR(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doesStakerNeedToPayMbr(params)))
        resultMappers.push((v) => client.decodeReturnValue('doesStakerNeedToPayMBR(address)bool', v))
        return this
      },
      /**
       * Add a getStakedPoolsForAccount(address)(uint64,uint64,uint64)[] method call against the ValidatorRegistry contract
       */
      getStakedPoolsForAccount(params: CallParams<ValidatorRegistryArgs['obj']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'] | ValidatorRegistryArgs['tuple']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getStakedPoolsForAccount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]', v))
        return this
      },
      /**
       * Add a getTokenPayoutRatio(uint64)(uint64[24],uint64) method call against the ValidatorRegistry contract
       */
      getTokenPayoutRatio(params: CallParams<ValidatorRegistryArgs['obj']['getTokenPayoutRatio(uint64)(uint64[24],uint64)'] | ValidatorRegistryArgs['tuple']['getTokenPayoutRatio(uint64)(uint64[24],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTokenPayoutRatio(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTokenPayoutRatio(uint64)(uint64[24],uint64)', v))
        return this
      },
      /**
       * Add a getNodePoolAssignments(uint64)((uint64[3])[8]) method call against the ValidatorRegistry contract
       */
      getNodePoolAssignments(params: CallParams<ValidatorRegistryArgs['obj']['getNodePoolAssignments(uint64)((uint64[3])[8])'] | ValidatorRegistryArgs['tuple']['getNodePoolAssignments(uint64)((uint64[3])[8])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getNodePoolAssignments(params)))
        resultMappers.push((v) => client.decodeReturnValue('getNodePoolAssignments(uint64)((uint64[3])[8])', v))
        return this
      },
      /**
       * Add a getNFDRegistryID()uint64 method call against the ValidatorRegistry contract
       */
      getNfdRegistryId(params: CallParams<ValidatorRegistryArgs['obj']['getNFDRegistryID()uint64'] | ValidatorRegistryArgs['tuple']['getNFDRegistryID()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getNfdRegistryId(params)))
        resultMappers.push((v) => client.decodeReturnValue('getNFDRegistryID()uint64', v))
        return this
      },
      /**
       * Add a addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64 method call against the ValidatorRegistry contract
       */
      addValidator(params: CallParams<ValidatorRegistryArgs['obj']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64'] | ValidatorRegistryArgs['tuple']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addValidator(params)))
        resultMappers.push((v) => client.decodeReturnValue('addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64', v))
        return this
      },
      /**
       * Add a changeValidatorManager(uint64,address)void method call against the ValidatorRegistry contract
       */
      changeValidatorManager(params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorManager(uint64,address)void'] | ValidatorRegistryArgs['tuple']['changeValidatorManager(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeValidatorManager(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a changeValidatorSunsetInfo(uint64,uint64,uint64)void method call against the ValidatorRegistry contract
       */
      changeValidatorSunsetInfo(params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorSunsetInfo(uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['changeValidatorSunsetInfo(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeValidatorSunsetInfo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a changeValidatorNFD(uint64,uint64,byte[])void method call against the ValidatorRegistry contract
       */
      changeValidatorNfd(params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorNFD(uint64,uint64,byte[])void'] | ValidatorRegistryArgs['tuple']['changeValidatorNFD(uint64,uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeValidatorNfd(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a changeValidatorCommissionAddress(uint64,address)void method call against the ValidatorRegistry contract
       */
      changeValidatorCommissionAddress(params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorCommissionAddress(uint64,address)void'] | ValidatorRegistryArgs['tuple']['changeValidatorCommissionAddress(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeValidatorCommissionAddress(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void method call against the ValidatorRegistry contract
       */
      changeValidatorRewardInfo(params: CallParams<ValidatorRegistryArgs['obj']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeValidatorRewardInfo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addPool(uint64,uint64)(uint64,uint64,uint64) method call against the ValidatorRegistry contract
       */
      addPool(params: CallParams<ValidatorRegistryArgs['obj']['addPool(uint64,uint64)(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['addPool(uint64,uint64)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('addPool(uint64,uint64)(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a addStake(uint64,uint64)(uint64,uint64,uint64) method call against the ValidatorRegistry contract
       */
      addStake(params: CallParams<ValidatorRegistryArgs['obj']['addStake(uint64,uint64)(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['addStake(uint64,uint64)(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addStake(params)))
        resultMappers.push((v) => client.decodeReturnValue('addStake(uint64,uint64)(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a setTokenPayoutRatio(uint64)(uint64[24],uint64) method call against the ValidatorRegistry contract
       */
      setTokenPayoutRatio(params: CallParams<ValidatorRegistryArgs['obj']['setTokenPayoutRatio(uint64)(uint64[24],uint64)'] | ValidatorRegistryArgs['tuple']['setTokenPayoutRatio(uint64)(uint64[24],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setTokenPayoutRatio(params)))
        resultMappers.push((v) => client.decodeReturnValue('setTokenPayoutRatio(uint64)(uint64[24],uint64)', v))
        return this
      },
      /**
       * Add a stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void method call against the ValidatorRegistry contract
       */
      stakeUpdatedViaRewards(params: CallParams<ValidatorRegistryArgs['obj']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stakeUpdatedViaRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void method call against the ValidatorRegistry contract
       */
      stakeRemoved(params: CallParams<ValidatorRegistryArgs['obj']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'] | ValidatorRegistryArgs['tuple']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stakeRemoved(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool) method call against the ValidatorRegistry contract
       */
      findPoolForStaker(params: CallParams<ValidatorRegistryArgs['obj']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'] | ValidatorRegistryArgs['tuple']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.findPoolForStaker(params)))
        resultMappers.push((v) => client.decodeReturnValue('findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)', v))
        return this
      },
      /**
       * Add a movePoolToNode(uint64,uint64,uint64)void method call against the ValidatorRegistry contract
       */
      movePoolToNode(params: CallParams<ValidatorRegistryArgs['obj']['movePoolToNode(uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['movePoolToNode(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.movePoolToNode(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a emptyTokenRewards(uint64,address)uint64 method call against the ValidatorRegistry contract
       */
      emptyTokenRewards(params: CallParams<ValidatorRegistryArgs['obj']['emptyTokenRewards(uint64,address)uint64'] | ValidatorRegistryArgs['tuple']['emptyTokenRewards(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emptyTokenRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('emptyTokenRewards(uint64,address)uint64', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<ValidatorRegistryArgs['obj']['updateApplication()void'] | ValidatorRegistryArgs['tuple']['updateApplication()void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the ValidatorRegistry contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ValidatorRegistryComposer
  }
}
export type ValidatorRegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initStakingContract(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initStakingContract(params?: CallParams<ValidatorRegistryArgs['obj']['initStakingContract(uint64)void'] | ValidatorRegistryArgs['tuple']['initStakingContract(uint64)void']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['initStakingContract(uint64)void'] | undefined]>

  /**
   * Calls the loadStakingContractData(uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  loadStakingContractData(params?: CallParams<ValidatorRegistryArgs['obj']['loadStakingContractData(uint64,byte[])void'] | ValidatorRegistryArgs['tuple']['loadStakingContractData(uint64,byte[])void']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['loadStakingContractData(uint64,byte[])void'] | undefined]>

  /**
   * Calls the finalizeStakingContract()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  finalizeStakingContract(params?: CallParams<ValidatorRegistryArgs['obj']['finalizeStakingContract()void'] | ValidatorRegistryArgs['tuple']['finalizeStakingContract()void']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['finalizeStakingContract()void'] | undefined]>

  /**
   * Calls the gas()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gas(params?: CallParams<ValidatorRegistryArgs['obj']['gas()void'] | ValidatorRegistryArgs['tuple']['gas()void']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['gas()void'] | undefined]>

  /**
   * Calls the getMbrAmounts()(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMbrAmounts(params?: CallParams<ValidatorRegistryArgs['obj']['getMbrAmounts()(uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getMbrAmounts()(uint64,uint64,uint64,uint64)']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getMbrAmounts()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProtocolConstraints(params?: CallParams<ValidatorRegistryArgs['obj']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getNumValidators()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNumValidators(params?: CallParams<ValidatorRegistryArgs['obj']['getNumValidators()uint64'] | ValidatorRegistryArgs['tuple']['getNumValidators()uint64']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getNumValidators()uint64'] | undefined]>

  /**
   * Calls the getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getValidatorConfig(params?: CallParams<ValidatorRegistryArgs['obj']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getValidatorState(uint64)(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getValidatorState(params?: CallParams<ValidatorRegistryArgs['obj']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getValidatorState(uint64)(uint64,uint64,uint64,uint64)']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getValidatorState(uint64)(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getValidatorOwnerAndManager(uint64)(address,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getValidatorOwnerAndManager(params?: CallParams<ValidatorRegistryArgs['obj']['getValidatorOwnerAndManager(uint64)(address,address)'] | ValidatorRegistryArgs['tuple']['getValidatorOwnerAndManager(uint64)(address,address)']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getValidatorOwnerAndManager(uint64)(address,address)'] | undefined]>

  /**
   * Calls the getPools(uint64)(uint64,uint64,uint64)[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPools(params?: CallParams<ValidatorRegistryArgs['obj']['getPools(uint64)(uint64,uint64,uint64)[]'] | ValidatorRegistryArgs['tuple']['getPools(uint64)(uint64,uint64,uint64)[]']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getPools(uint64)(uint64,uint64,uint64)[]'] | undefined]>

  /**
   * Calls the getPoolAppId(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolAppId(params?: CallParams<ValidatorRegistryArgs['obj']['getPoolAppId(uint64,uint64)uint64'] | ValidatorRegistryArgs['tuple']['getPoolAppId(uint64,uint64)uint64']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getPoolAppId(uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolInfo(params?: CallParams<ValidatorRegistryArgs['obj']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getCurMaxStakePerPool(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurMaxStakePerPool(params?: CallParams<ValidatorRegistryArgs['obj']['getCurMaxStakePerPool(uint64)uint64'] | ValidatorRegistryArgs['tuple']['getCurMaxStakePerPool(uint64)uint64']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getCurMaxStakePerPool(uint64)uint64'] | undefined]>

  /**
   * Calls the doesStakerNeedToPayMBR(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doesStakerNeedToPayMbr(params?: CallParams<ValidatorRegistryArgs['obj']['doesStakerNeedToPayMBR(address)bool'] | ValidatorRegistryArgs['tuple']['doesStakerNeedToPayMBR(address)bool']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['doesStakerNeedToPayMBR(address)bool'] | undefined]>

  /**
   * Calls the getStakedPoolsForAccount(address)(uint64,uint64,uint64)[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStakedPoolsForAccount(params?: CallParams<ValidatorRegistryArgs['obj']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'] | ValidatorRegistryArgs['tuple']['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]'] | undefined]>

  /**
   * Calls the getTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTokenPayoutRatio(params?: CallParams<ValidatorRegistryArgs['obj']['getTokenPayoutRatio(uint64)(uint64[24],uint64)'] | ValidatorRegistryArgs['tuple']['getTokenPayoutRatio(uint64)(uint64[24],uint64)']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getTokenPayoutRatio(uint64)(uint64[24],uint64)'] | undefined]>

  /**
   * Calls the getNodePoolAssignments(uint64)((uint64[3])[8]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNodePoolAssignments(params?: CallParams<ValidatorRegistryArgs['obj']['getNodePoolAssignments(uint64)((uint64[3])[8])'] | ValidatorRegistryArgs['tuple']['getNodePoolAssignments(uint64)((uint64[3])[8])']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getNodePoolAssignments(uint64)((uint64[3])[8])'] | undefined]>

  /**
   * Calls the getNFDRegistryID()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNfdRegistryId(params?: CallParams<ValidatorRegistryArgs['obj']['getNFDRegistryID()uint64'] | ValidatorRegistryArgs['tuple']['getNFDRegistryID()uint64']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['getNFDRegistryID()uint64'] | undefined]>

  /**
   * Calls the addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addValidator(params?: CallParams<ValidatorRegistryArgs['obj']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64'] | ValidatorRegistryArgs['tuple']['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64'] | undefined]>

  /**
   * Calls the changeValidatorManager(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorManager(params?: CallParams<ValidatorRegistryArgs['obj']['changeValidatorManager(uint64,address)void'] | ValidatorRegistryArgs['tuple']['changeValidatorManager(uint64,address)void']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['changeValidatorManager(uint64,address)void'] | undefined]>

  /**
   * Calls the changeValidatorSunsetInfo(uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorSunsetInfo(params?: CallParams<ValidatorRegistryArgs['obj']['changeValidatorSunsetInfo(uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['changeValidatorSunsetInfo(uint64,uint64,uint64)void']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['changeValidatorSunsetInfo(uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the changeValidatorNFD(uint64,uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorNfd(params?: CallParams<ValidatorRegistryArgs['obj']['changeValidatorNFD(uint64,uint64,byte[])void'] | ValidatorRegistryArgs['tuple']['changeValidatorNFD(uint64,uint64,byte[])void']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['changeValidatorNFD(uint64,uint64,byte[])void'] | undefined]>

  /**
   * Calls the changeValidatorCommissionAddress(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorCommissionAddress(params?: CallParams<ValidatorRegistryArgs['obj']['changeValidatorCommissionAddress(uint64,address)void'] | ValidatorRegistryArgs['tuple']['changeValidatorCommissionAddress(uint64,address)void']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['changeValidatorCommissionAddress(uint64,address)void'] | undefined]>

  /**
   * Calls the changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeValidatorRewardInfo(params?: CallParams<ValidatorRegistryArgs['obj']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void'] | undefined]>

  /**
   * Calls the addPool(uint64,uint64)(uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addPool(params?: CallParams<ValidatorRegistryArgs['obj']['addPool(uint64,uint64)(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['addPool(uint64,uint64)(uint64,uint64,uint64)']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['addPool(uint64,uint64)(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the addStake(uint64,uint64)(uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addStake(params?: CallParams<ValidatorRegistryArgs['obj']['addStake(uint64,uint64)(uint64,uint64,uint64)'] | ValidatorRegistryArgs['tuple']['addStake(uint64,uint64)(uint64,uint64,uint64)']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['addStake(uint64,uint64)(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the setTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setTokenPayoutRatio(params?: CallParams<ValidatorRegistryArgs['obj']['setTokenPayoutRatio(uint64)(uint64[24],uint64)'] | ValidatorRegistryArgs['tuple']['setTokenPayoutRatio(uint64)(uint64[24],uint64)']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['setTokenPayoutRatio(uint64)(uint64[24],uint64)'] | undefined]>

  /**
   * Calls the stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeUpdatedViaRewards(params?: CallParams<ValidatorRegistryArgs['obj']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stakeRemoved(params?: CallParams<ValidatorRegistryArgs['obj']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'] | ValidatorRegistryArgs['tuple']['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void'] | undefined]>

  /**
   * Calls the findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  findPoolForStaker(params?: CallParams<ValidatorRegistryArgs['obj']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'] | ValidatorRegistryArgs['tuple']['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)'] | undefined]>

  /**
   * Calls the movePoolToNode(uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  movePoolToNode(params?: CallParams<ValidatorRegistryArgs['obj']['movePoolToNode(uint64,uint64,uint64)void'] | ValidatorRegistryArgs['tuple']['movePoolToNode(uint64,uint64,uint64)void']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['movePoolToNode(uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the emptyTokenRewards(uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emptyTokenRewards(params?: CallParams<ValidatorRegistryArgs['obj']['emptyTokenRewards(uint64,address)uint64'] | ValidatorRegistryArgs['tuple']['emptyTokenRewards(uint64,address)uint64']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['emptyTokenRewards(uint64,address)uint64'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the ValidatorRegistry smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(params?: CallParams<ValidatorRegistryArgs['obj']['updateApplication()void'] | ValidatorRegistryArgs['tuple']['updateApplication()void']>): ValidatorRegistryComposer<[...TReturns, ValidatorRegistryReturns['updateApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the ValidatorRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ValidatorRegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ValidatorRegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ValidatorRegistryComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ValidatorRegistryComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ValidatorRegistryComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ValidatorRegistryComposerResults<TReturns>>
}
export type ValidatorRegistryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


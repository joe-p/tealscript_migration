{
  "version": 3,
  "sources": [
    "/Users/joe/git/joe-p/tealscript_migration/smart_contracts/reti_validator_registry/validatorRegistry.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA2PE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAlNF;;;AAAA;AAkNE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAlLF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAkLE;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA7KF;;;AAAA;AAAA;;;AA6KE;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAxKF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAwKE;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAlKF;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAkKE;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA7JF;;;AAAA;AAAA;;;AA6JE;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAhJF;;;AAAA;;;AAgJE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAvIF;;;AAAA;AAuIE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAnIF;;;AAAA;AAmIE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AArHF;;;AAqHE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAjHF;;;AAiHE;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AApGF;;;AAAA;AAoGE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAhGF;;;AAgGE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA3FF;;;AAAA;AAAA;;;AAAA;AA2FE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AA/EF;;;AAAA;AA+EE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA1EF;;;AAAA;AA0EE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtEF;;;AAAA;AAsEE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAlEF;;;AAAA;AAkEE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA1BF;;;AAAA;AAAA;;;AAAA;;;AA0BE;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtBF;;;AAAA;AAsBE;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AANA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAR+C;;AAU7C;;AATmD;AAUf;AAApC;;AAVmD;AAcf;AAApC;AAbyC;AAcd;AAA3B;AAbsC;;;;;;;;;;;;AAcd;AAAxB;AAb2C;;;;;;;;AAcd;AAA7B;;AAGF;;;AArB+C;;AAsB7C;;AAAA;;;AAGF;;;AAxBqD;AAAA;AAAA;AAAA;AAyB5C;AAAP;;AAzBmD;AA8Bf;AAApC;;AA7ByC;AAAA;AAAA;AAAA;AA4DzC;AAGF;;;AAC4B;;AAAA;AA7DwC;AAAA;AAAA;AA6D3B;AAAA;AAAM;AAAA;AAAA;AAA7C;AAGF;;;AAC4B;;AAAA;AAjEwC;AAAA;AAAA;AAiE3B;AAAA;AAAM;AAAA;;AAAA;AAA7C;AAGF;;;AAC6C;;AAAA;AArEuB;AAAA;AAAA;AAqEV;AAAA;AACtC;AAAA;AAAA;AAAO;AAAA;;;AAAwB;AAAA;;;AAA1C;AAAP;AAGF;;;;AAC8B;;AACa;;AAAA;AA3EyB;AAAA;AAAA;AA2EZ;AAAA;AAAM;;AAAA;;AAAA;AACvC;AAAG;;AAAY;AAAZ;AAAxB;;;AACM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAW;AAAA;AAAf;;;AAGA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;;AAJ0C;;AAAK;AAAL;AAAA;;;;;AAM5C;;AAAA;;AAAA;AAGF;;;AACS;;AAAA;;;AAA6C;;AAAA;AAtFc;AAAA;AAAA;AAsFD;AAAA;;AAAA;AAA1C;;AAAsD;AAAtD;AAAhB;;;;AAAP;AAC0B;;AAAA;AAvFwC;AAAA;AAAA;AAuF3B;AAAA;AAAM;;AAAA;;AAAA;AAAM;;AAAS;AAAT;AAA5C;AAAA;AAAA;AAAA;AAAwD;AAAA;AAA/D;;;;;AAGF;;;AACoC;;AAAA;AAAA;AAAA;AA3FgC;AAAA;AAAA;AA2F5B;AAAA;AAAM;;AAAA;;AAAA;AAAc;;AAAA;;AAAA;AAAS;AAAjB;AAA3C;AAAA;AAAA;AAAA;AAAP;AAGF;;;;;AAC8C;;AAAA;AA/FsB;AAAA;AAAA;AA+FT;AAAA;AAAM;AAAA;AAAA;;AAAA;AAAM;AAAA;AAsM9D;;;;;;;;AArMoC;AAAA;AAAA;AACoB;AAAA;AAAA;AAAO;;;AAAA;;AACtE;;;AAuMO;;;;;;;;;;;;;;;AApMH;;AAAA;AAAJ;;;;;;;AAGA;AAGF;;;AA1G6G;;AAAA;;AAAA;AA2GxE;AAAA;;AAA5B;AAAP;AAGF;;;;;;;;AA9G6G;;AAAA;;AAAA;AAAA;AA+G3E;AAAA;;AAA5B;;;AACK;;AAAP;;AAAA;AAEkC;;AAAA;;AACa;;AAAA;AAAA;AAAA;;AAAA;AAC5B;AAAZ;;AAAe;;AAAY;;AAAZ;AAAxB;;;AACM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAW;AAAA;;;;;AAAf;;;AACE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;;;;;AAFwC;;AAAK;AAAL;AAAA;;;;;AAK5C;;AAAA;;AAAA;AAGF;;;AAC4B;;AAAA;AA9HwC;AAAA;AAAA;AA8H3B;AAAA;AAAM;;;;;;AAAA;AAA7C;AAGF;;;AAC4B;;AAAA;AAlIwC;AAAA;AAAA;AAkI3B;AAAA;AAAA;;AAAvC;AACuC;AAAA;AAAM;;;AAAA;;AAAA;AAA7C;AAOF;;;;;;AAoHgB;;AAAA;;AAAA;AAAiE;;AAA1B;AAA9C;;;;AAAP;AACc;;AAAA;;;AAAA;AAAA;AAAA;;AAAP;;;AAA+C;;AAA2B;;AAA3B;AAA/C;;;;AAAP;AACc;;AAAA;;;AAAA;AAA2E;;AAA7B;AAArD;;;;AAAP;AACc;;AAAA;;;AAAA;AAAiB;;AAAxB;AAAP;AACc;;AAAA;;;AAAA;AAAA;AAAA;;AAAP;;;AAA2B;;AAAuB;;AAAvB;AAA3B;;;;AAAP;AAtHW;;AAAwB;;AAAA;;;AAA5B;AAAP;AA/IyC;AAAA;AAAA;AAAA;AAiJc;AAA3B;AAjJa;AAkJzC;;AAAA;AAEmB;AAAA;AAjJ+C;AAAA;;AAAA;AAiJlE;AAAA;;;AAAA;;AACA;AAAA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAEA;;AAAA;;;;;;;;;;;;;;;;;AAEF;;;AACa;;AAAoC;;AAAA;AAxJmB;AAAA;AAAA;AAwJN;AAAA;AAAA;AAAM;AAAA;AAAA;AAAO;;;AAAlE;;AAAA;AAAP;AACA;;AAAA;;AAAA;;AAGF;;;AACa;;AAAoC;;AAAA;AA7JmB;AAAA;AAAA;AA6JN;AAAA;AAAA;AAAM;AAAA;AAAA;AAAO;;;AAAlE;;AAAA;AAAP;AACA;;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;AACA;;AAAA;AAAA;;;AAAA;AAAA;;AAGF;;;AACa;;AAAoC;;AAAA;AAnKmB;AAAA;AAAA;AAmKN;AAAA;AAAA;AAAM;AAAA;AAAA;AAAO;;;AAAlE;;AAAA;AAAP;AACA;;AAAA;AAAA;;AAAA;AAAA;;AAGF;;;AACa;;AAAoC;;AAAA;AAxKmB;AAAA;AAAA;AAwKN;AAAA;AAAA;AAAM;AAAA;AAAA;AAAO;;;AAAlE;;AAAA;AAAP;AACA;;AAAA;;AAAA;;AAGF;;;AAQa;;AAAoC;;AAAA;AApLmB;AAAA;AAAA;AAoLN;AAAA;AAAA;AAAM;AAAA;AAAA;AAAO;;;AAAlE;;AAAA;AAAP;AACA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AACA;AAAA;;AAAA;;AAAA;AACA;AAAA;;AAAA;;AAAA;AACA;;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;AACA;;AAAA;AAAA;;;AAAA;AAAA;;AAmBF;;;AAEoB;;AAAA;AACE;AAFb;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 264 24 296 576 192 1000000"
    },
    "17": {
      "op": "bytecblock \"v\" 0x151f7c75 \"init\" \"numV\" 0x0000 0x151f7c750000000000000000 0x151f7c75000000000000000000000000000000000000000000000000 \"poolTemplateApprovalBytes\" \"sps\""
    },
    "111": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "113": {
      "op": "bz main_after_if_else@41",
      "stack_out": []
    },
    "116": {
      "op": "pushbytess 0x46f76533 0xb8447b36 0x1b5e82c6 0x79472d83 0x5f7acfd9 0x3172ca9d 0x8a87142d 0xd1366cc3 0x3b045c5c 0x3bab5c22 0x9a7c2248 0x2fa22c4b 0x772a7de4 0x572767d1 0x345485b9 0xfbc63178 0x24498cf4 0xf846dd7a 0x83050501 0x7bbb6c8d 0xf839414a 0x11d737ff 0x3e288972 0xdd5faada 0xdd43d7bf 0xf99ef54d 0xbf7fc7e3 0x3b889b84 0xb16b3b40 0x4df8d86e 0x418fcefc 0xa2dc51b5 0x2873f504 0x0547f4fe 0xcb668358 // method \"updateApplication()void\", method \"createApplication()void\", method \"initStakingContract(uint64)void\", method \"loadStakingContractData(uint64,byte[])void\", method \"finalizeStakingContract()void\", method \"gas()void\", method \"getMbrAmounts()(uint64,uint64,uint64,uint64)\", method \"getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)\", method \"getNumValidators()uint64\", method \"getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)\", method \"getValidatorState(uint64)(uint64,uint64,uint64,uint64)\", method \"getValidatorOwnerAndManager(uint64)(address,address)\", method \"getPools(uint64)(uint64,uint64,uint64)[]\", method \"getPoolAppId(uint64,uint64)uint64\", method \"getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)\", method \"getCurMaxStakePerPool(uint64)uint64\", method \"doesStakerNeedToPayMBR(address)bool\", method \"getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]\", method \"getTokenPayoutRatio(uint64)(uint64[24],uint64)\", method \"getNodePoolAssignments(uint64)((uint64[3])[8])\", method \"getNFDRegistryID()uint64\", method \"addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64\", method \"changeValidatorManager(uint64,address)void\", method \"changeValidatorSunsetInfo(uint64,uint64,uint64)void\", method \"changeValidatorNFD(uint64,uint64,byte[])void\", method \"changeValidatorCommissionAddress(uint64,address)void\", method \"changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void\", method \"addPool(uint64,uint64)(uint64,uint64,uint64)\", method \"addStake(uint64,uint64)(uint64,uint64,uint64)\", method \"setTokenPayoutRatio(uint64)(uint64[24],uint64)\", method \"stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void\", method \"stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void\", method \"findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)\", method \"movePoolToNode(uint64,uint64,uint64)void\", method \"emptyTokenRewards(uint64,address)uint64\"",
      "defined_out": [
        "Method(addPool(uint64,uint64)(uint64,uint64,uint64))",
        "Method(addStake(uint64,uint64)(uint64,uint64,uint64))",
        "Method(addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64)",
        "Method(changeValidatorCommissionAddress(uint64,address)void)",
        "Method(changeValidatorManager(uint64,address)void)",
        "Method(changeValidatorNFD(uint64,uint64,byte[])void)",
        "Method(changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void)",
        "Method(changeValidatorSunsetInfo(uint64,uint64,uint64)void)",
        "Method(createApplication()void)",
        "Method(doesStakerNeedToPayMBR(address)bool)",
        "Method(emptyTokenRewards(uint64,address)uint64)",
        "Method(finalizeStakingContract()void)",
        "Method(findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool))",
        "Method(gas()void)",
        "Method(getCurMaxStakePerPool(uint64)uint64)",
        "Method(getMbrAmounts()(uint64,uint64,uint64,uint64))",
        "Method(getNFDRegistryID()uint64)",
        "Method(getNodePoolAssignments(uint64)((uint64[3])[8]))",
        "Method(getNumValidators()uint64)",
        "Method(getPoolAppId(uint64,uint64)uint64)",
        "Method(getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64))",
        "Method(getPools(uint64)(uint64,uint64,uint64)[])",
        "Method(getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getStakedPoolsForAccount(address)(uint64,uint64,uint64)[])",
        "Method(getTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))",
        "Method(getValidatorOwnerAndManager(uint64)(address,address))",
        "Method(getValidatorState(uint64)(uint64,uint64,uint64,uint64))",
        "Method(initStakingContract(uint64)void)",
        "Method(loadStakingContractData(uint64,byte[])void)",
        "Method(movePoolToNode(uint64,uint64,uint64)void)",
        "Method(setTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void)",
        "Method(stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void)",
        "Method(updateApplication()void)"
      ],
      "stack_out": [
        "Method(updateApplication()void)",
        "Method(createApplication()void)",
        "Method(initStakingContract(uint64)void)",
        "Method(loadStakingContractData(uint64,byte[])void)",
        "Method(finalizeStakingContract()void)",
        "Method(gas()void)",
        "Method(getMbrAmounts()(uint64,uint64,uint64,uint64))",
        "Method(getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getNumValidators()uint64)",
        "Method(getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))",
        "Method(getValidatorState(uint64)(uint64,uint64,uint64,uint64))",
        "Method(getValidatorOwnerAndManager(uint64)(address,address))",
        "Method(getPools(uint64)(uint64,uint64,uint64)[])",
        "Method(getPoolAppId(uint64,uint64)uint64)",
        "Method(getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64))",
        "Method(getCurMaxStakePerPool(uint64)uint64)",
        "Method(doesStakerNeedToPayMBR(address)bool)",
        "Method(getStakedPoolsForAccount(address)(uint64,uint64,uint64)[])",
        "Method(getTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(getNodePoolAssignments(uint64)((uint64[3])[8]))",
        "Method(getNFDRegistryID()uint64)",
        "Method(addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64)",
        "Method(changeValidatorManager(uint64,address)void)",
        "Method(changeValidatorSunsetInfo(uint64,uint64,uint64)void)",
        "Method(changeValidatorNFD(uint64,uint64,byte[])void)",
        "Method(changeValidatorCommissionAddress(uint64,address)void)",
        "Method(changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void)",
        "Method(addPool(uint64,uint64)(uint64,uint64,uint64))",
        "Method(addStake(uint64,uint64)(uint64,uint64,uint64))",
        "Method(setTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void)",
        "Method(stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void)",
        "Method(findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool))",
        "Method(movePoolToNode(uint64,uint64,uint64)void)",
        "Method(emptyTokenRewards(uint64,address)uint64)"
      ]
    },
    "293": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addPool(uint64,uint64)(uint64,uint64,uint64))",
        "Method(addStake(uint64,uint64)(uint64,uint64,uint64))",
        "Method(addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64)",
        "Method(changeValidatorCommissionAddress(uint64,address)void)",
        "Method(changeValidatorManager(uint64,address)void)",
        "Method(changeValidatorNFD(uint64,uint64,byte[])void)",
        "Method(changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void)",
        "Method(changeValidatorSunsetInfo(uint64,uint64,uint64)void)",
        "Method(createApplication()void)",
        "Method(doesStakerNeedToPayMBR(address)bool)",
        "Method(emptyTokenRewards(uint64,address)uint64)",
        "Method(finalizeStakingContract()void)",
        "Method(findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool))",
        "Method(gas()void)",
        "Method(getCurMaxStakePerPool(uint64)uint64)",
        "Method(getMbrAmounts()(uint64,uint64,uint64,uint64))",
        "Method(getNFDRegistryID()uint64)",
        "Method(getNodePoolAssignments(uint64)((uint64[3])[8]))",
        "Method(getNumValidators()uint64)",
        "Method(getPoolAppId(uint64,uint64)uint64)",
        "Method(getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64))",
        "Method(getPools(uint64)(uint64,uint64,uint64)[])",
        "Method(getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getStakedPoolsForAccount(address)(uint64,uint64,uint64)[])",
        "Method(getTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))",
        "Method(getValidatorOwnerAndManager(uint64)(address,address))",
        "Method(getValidatorState(uint64)(uint64,uint64,uint64,uint64))",
        "Method(initStakingContract(uint64)void)",
        "Method(loadStakingContractData(uint64,byte[])void)",
        "Method(movePoolToNode(uint64,uint64,uint64)void)",
        "Method(setTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void)",
        "Method(stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void)",
        "Method(updateApplication()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(updateApplication()void)",
        "Method(createApplication()void)",
        "Method(initStakingContract(uint64)void)",
        "Method(loadStakingContractData(uint64,byte[])void)",
        "Method(finalizeStakingContract()void)",
        "Method(gas()void)",
        "Method(getMbrAmounts()(uint64,uint64,uint64,uint64))",
        "Method(getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getNumValidators()uint64)",
        "Method(getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))",
        "Method(getValidatorState(uint64)(uint64,uint64,uint64,uint64))",
        "Method(getValidatorOwnerAndManager(uint64)(address,address))",
        "Method(getPools(uint64)(uint64,uint64,uint64)[])",
        "Method(getPoolAppId(uint64,uint64)uint64)",
        "Method(getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64))",
        "Method(getCurMaxStakePerPool(uint64)uint64)",
        "Method(doesStakerNeedToPayMBR(address)bool)",
        "Method(getStakedPoolsForAccount(address)(uint64,uint64,uint64)[])",
        "Method(getTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(getNodePoolAssignments(uint64)((uint64[3])[8]))",
        "Method(getNFDRegistryID()uint64)",
        "Method(addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64)",
        "Method(changeValidatorManager(uint64,address)void)",
        "Method(changeValidatorSunsetInfo(uint64,uint64,uint64)void)",
        "Method(changeValidatorNFD(uint64,uint64,byte[])void)",
        "Method(changeValidatorCommissionAddress(uint64,address)void)",
        "Method(changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void)",
        "Method(addPool(uint64,uint64)(uint64,uint64,uint64))",
        "Method(addStake(uint64,uint64)(uint64,uint64,uint64))",
        "Method(setTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void)",
        "Method(stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void)",
        "Method(findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool))",
        "Method(movePoolToNode(uint64,uint64,uint64)void)",
        "Method(emptyTokenRewards(uint64,address)uint64)",
        "tmp%2#0"
      ]
    },
    "296": {
      "op": "match main_updateApplication_route@3 main_createApplication_route@4 main_initStakingContract_route@5 main_loadStakingContractData_route@6 main_finalizeStakingContract_route@7 main_gas_route@8 main_getMbrAmounts_route@9 main_getProtocolConstraints_route@10 main_getNumValidators_route@11 main_getValidatorConfig_route@12 main_getValidatorState_route@13 main_getValidatorOwnerAndManager_route@14 main_getPools_route@15 main_getPoolAppId_route@16 main_getPoolInfo_route@17 main_getCurMaxStakePerPool_route@18 main_doesStakerNeedToPayMBR_route@19 main_getStakedPoolsForAccount_route@20 main_getTokenPayoutRatio_route@21 main_getNodePoolAssignments_route@22 main_getNFDRegistryID_route@23 main_addValidator_route@24 main_changeValidatorManager_route@25 main_changeValidatorSunsetInfo_route@26 main_changeValidatorNFD_route@27 main_changeValidatorCommissionAddress_route@28 main_changeValidatorRewardInfo_route@29 main_addPool_route@30 main_addStake_route@31 main_setTokenPayoutRatio_route@32 main_stakeUpdatedViaRewards_route@33 main_stakeRemoved_route@34 main_findPoolForStaker_route@35 main_movePoolToNode_route@36 main_emptyTokenRewards_route@37",
      "stack_out": []
    },
    "368": {
      "block": "main_after_if_else@41",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "369": {
      "op": "return",
      "stack_out": []
    },
    "370": {
      "block": "main_emptyTokenRewards_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%225#0"
      ],
      "stack_out": [
        "tmp%225#0"
      ]
    },
    "372": {
      "op": "!",
      "defined_out": [
        "tmp%226#0"
      ],
      "stack_out": [
        "tmp%226#0"
      ]
    },
    "373": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "374": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%227#0"
      ],
      "stack_out": [
        "tmp%227#0"
      ]
    },
    "376": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "377": {
      "op": "bytec 5 // 0x151f7c750000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000"
      ],
      "stack_out": [
        "0x151f7c750000000000000000"
      ]
    },
    "379": {
      "op": "log",
      "stack_out": []
    },
    "380": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "381": {
      "op": "return",
      "stack_out": []
    },
    "382": {
      "block": "main_movePoolToNode_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0"
      ]
    },
    "384": {
      "op": "!",
      "defined_out": [
        "tmp%219#0"
      ],
      "stack_out": [
        "tmp%219#0"
      ]
    },
    "385": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "386": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%220#0"
      ],
      "stack_out": [
        "tmp%220#0"
      ]
    },
    "388": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "389": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "390": {
      "op": "return",
      "stack_out": []
    },
    "391": {
      "block": "main_findPoolForStaker_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%210#0"
      ],
      "stack_out": [
        "tmp%210#0"
      ]
    },
    "393": {
      "op": "!",
      "defined_out": [
        "tmp%211#0"
      ],
      "stack_out": [
        "tmp%211#0"
      ]
    },
    "394": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "395": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%212#0"
      ],
      "stack_out": [
        "tmp%212#0"
      ]
    },
    "397": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "398": {
      "op": "pushbytes 0x151f7c7500000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x151f7c7500000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x151f7c7500000000000000000000000000000000000000000000000000"
      ]
    },
    "429": {
      "op": "log",
      "stack_out": []
    },
    "430": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "431": {
      "op": "return",
      "stack_out": []
    },
    "432": {
      "block": "main_stakeRemoved_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "434": {
      "op": "!",
      "defined_out": [
        "tmp%204#0"
      ],
      "stack_out": [
        "tmp%204#0"
      ]
    },
    "435": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "436": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%205#0"
      ],
      "stack_out": [
        "tmp%205#0"
      ]
    },
    "438": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "439": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "440": {
      "op": "return",
      "stack_out": []
    },
    "441": {
      "block": "main_stakeUpdatedViaRewards_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%195#0"
      ]
    },
    "443": {
      "op": "!",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "444": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "445": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%197#0"
      ],
      "stack_out": [
        "tmp%197#0"
      ]
    },
    "447": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "448": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "449": {
      "op": "return",
      "stack_out": []
    },
    "450": {
      "block": "main_setTokenPayoutRatio_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "452": {
      "op": "!",
      "defined_out": [
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%189#0"
      ]
    },
    "453": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "454": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%190#0"
      ]
    },
    "456": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "457": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%26#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%26#0"
      ]
    },
    "460": {
      "op": "btoi",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "461": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.setTokenPayoutRatio",
      "op": "callsub setTokenPayoutRatio",
      "defined_out": [
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0"
      ]
    },
    "464": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0",
        "0x151f7c75"
      ]
    },
    "465": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%193#0"
      ]
    },
    "466": {
      "op": "concat",
      "defined_out": [
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%194#0"
      ]
    },
    "467": {
      "op": "log",
      "stack_out": []
    },
    "468": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "469": {
      "op": "return",
      "stack_out": []
    },
    "470": {
      "block": "main_addStake_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%180#0"
      ]
    },
    "472": {
      "op": "!",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "473": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "474": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "476": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "477": {
      "op": "bytec 6 // 0x151f7c75000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x151f7c75000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x151f7c75000000000000000000000000000000000000000000000000"
      ]
    },
    "479": {
      "op": "log",
      "stack_out": []
    },
    "480": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "481": {
      "op": "return",
      "stack_out": []
    },
    "482": {
      "block": "main_addPool_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "484": {
      "op": "!",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "485": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "486": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "488": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "489": {
      "op": "bytec 6 // 0x151f7c75000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x151f7c75000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x151f7c75000000000000000000000000000000000000000000000000"
      ]
    },
    "491": {
      "op": "log",
      "stack_out": []
    },
    "492": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "493": {
      "op": "return",
      "stack_out": []
    },
    "494": {
      "block": "main_changeValidatorRewardInfo_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "496": {
      "op": "!",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "497": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "498": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "500": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "501": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%18#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%18#0"
      ]
    },
    "504": {
      "op": "btoi",
      "defined_out": [
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0"
      ]
    },
    "505": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%19#0",
        "tmp%168#0"
      ],
      "stack_out": [
        "tmp%168#0",
        "reinterpret_Encoded(uint64)%19#0"
      ]
    },
    "508": {
      "op": "btoi",
      "defined_out": [
        "tmp%168#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%168#0",
        "tmp%169#0"
      ]
    },
    "509": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%4#0",
        "tmp%168#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%168#0",
        "tmp%169#0",
        "reinterpret_Encoded(uint8[32])%4#0"
      ]
    },
    "512": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_Encoded(uint64[4])%0#0",
        "reinterpret_Encoded(uint8[32])%4#0",
        "tmp%168#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%168#0",
        "tmp%169#0",
        "reinterpret_Encoded(uint8[32])%4#0",
        "reinterpret_Encoded(uint64[4])%0#0"
      ]
    },
    "515": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_Encoded(uint64)%20#0",
        "reinterpret_Encoded(uint64[4])%0#0",
        "reinterpret_Encoded(uint8[32])%4#0",
        "tmp%168#0",
        "tmp%169#0"
      ],
      "stack_out": [
        "tmp%168#0",
        "tmp%169#0",
        "reinterpret_Encoded(uint8[32])%4#0",
        "reinterpret_Encoded(uint64[4])%0#0",
        "reinterpret_Encoded(uint64)%20#0"
      ]
    },
    "518": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint64[4])%0#0",
        "reinterpret_Encoded(uint8[32])%4#0",
        "tmp%168#0",
        "tmp%169#0",
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%168#0",
        "tmp%169#0",
        "reinterpret_Encoded(uint8[32])%4#0",
        "reinterpret_Encoded(uint64[4])%0#0",
        "tmp%170#0"
      ]
    },
    "519": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_Encoded(uint64)%21#0",
        "reinterpret_Encoded(uint64[4])%0#0",
        "reinterpret_Encoded(uint8[32])%4#0",
        "tmp%168#0",
        "tmp%169#0",
        "tmp%170#0"
      ],
      "stack_out": [
        "tmp%168#0",
        "tmp%169#0",
        "reinterpret_Encoded(uint8[32])%4#0",
        "reinterpret_Encoded(uint64[4])%0#0",
        "tmp%170#0",
        "reinterpret_Encoded(uint64)%21#0"
      ]
    },
    "522": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_Encoded(uint64[4])%0#0",
        "reinterpret_Encoded(uint8[32])%4#0",
        "tmp%168#0",
        "tmp%169#0",
        "tmp%170#0",
        "tmp%171#0"
      ],
      "stack_out": [
        "tmp%168#0",
        "tmp%169#0",
        "reinterpret_Encoded(uint8[32])%4#0",
        "reinterpret_Encoded(uint64[4])%0#0",
        "tmp%170#0",
        "tmp%171#0"
      ]
    },
    "523": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.changeValidatorRewardInfo",
      "op": "callsub changeValidatorRewardInfo",
      "stack_out": []
    },
    "526": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "527": {
      "op": "return",
      "stack_out": []
    },
    "528": {
      "block": "main_changeValidatorCommissionAddress_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "530": {
      "op": "!",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "531": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "532": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "534": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "535": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%17#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%17#0"
      ]
    },
    "538": {
      "op": "btoi",
      "defined_out": [
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0"
      ]
    },
    "539": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%3#0",
        "tmp%163#0"
      ],
      "stack_out": [
        "tmp%163#0",
        "reinterpret_Encoded(uint8[32])%3#0"
      ]
    },
    "542": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.changeValidatorCommissionAddress",
      "op": "callsub changeValidatorCommissionAddress",
      "stack_out": []
    },
    "545": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "546": {
      "op": "return",
      "stack_out": []
    },
    "547": {
      "block": "main_changeValidatorNFD_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "549": {
      "op": "!",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "550": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "551": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "553": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "554": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%15#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%15#0"
      ]
    },
    "557": {
      "op": "btoi",
      "defined_out": [
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0"
      ]
    },
    "558": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%16#0",
        "tmp%157#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "reinterpret_Encoded(uint64)%16#0"
      ]
    },
    "561": {
      "op": "btoi",
      "defined_out": [
        "tmp%157#0",
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%158#0"
      ]
    },
    "562": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%2#0",
        "tmp%157#0",
        "tmp%158#0"
      ],
      "stack_out": [
        "tmp%157#0",
        "tmp%158#0",
        "reinterpret_Encoded(len+uint8[])%2#0"
      ]
    },
    "565": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.changeValidatorNFD",
      "op": "callsub changeValidatorNFD",
      "stack_out": []
    },
    "568": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "569": {
      "op": "return",
      "stack_out": []
    },
    "570": {
      "block": "main_changeValidatorSunsetInfo_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "572": {
      "op": "!",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "573": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "574": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "576": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "577": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%12#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%12#0"
      ]
    },
    "580": {
      "op": "btoi",
      "defined_out": [
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0"
      ]
    },
    "581": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%13#0",
        "tmp%150#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "reinterpret_Encoded(uint64)%13#0"
      ]
    },
    "584": {
      "op": "btoi",
      "defined_out": [
        "tmp%150#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%151#0"
      ]
    },
    "585": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(uint64)%14#0",
        "tmp%150#0",
        "tmp%151#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%151#0",
        "reinterpret_Encoded(uint64)%14#0"
      ]
    },
    "588": {
      "op": "btoi",
      "defined_out": [
        "tmp%150#0",
        "tmp%151#0",
        "tmp%152#0"
      ],
      "stack_out": [
        "tmp%150#0",
        "tmp%151#0",
        "tmp%152#0"
      ]
    },
    "589": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.changeValidatorSunsetInfo",
      "op": "callsub changeValidatorSunsetInfo",
      "stack_out": []
    },
    "592": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "593": {
      "op": "return",
      "stack_out": []
    },
    "594": {
      "block": "main_changeValidatorManager_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "596": {
      "op": "!",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "597": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "598": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "600": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "601": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%11#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%11#0"
      ]
    },
    "604": {
      "op": "btoi",
      "defined_out": [
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0"
      ]
    },
    "605": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%2#0",
        "tmp%145#0"
      ],
      "stack_out": [
        "tmp%145#0",
        "reinterpret_Encoded(uint8[32])%2#0"
      ]
    },
    "608": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.changeValidatorManager",
      "op": "callsub changeValidatorManager",
      "stack_out": []
    },
    "611": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "612": {
      "op": "return",
      "stack_out": []
    },
    "613": {
      "block": "main_addValidator_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "615": {
      "op": "!",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "616": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "617": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "619": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "620": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0"
      ]
    },
    "623": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64,uint8[32],uint8[32],uint64,uint64,uint8[32],uint64[4],uint64,uint64,uint64,uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%1#0",
        "reinterpret_Encoded(uint64,uint8[32],uint8[32],uint64,uint64,uint8[32],uint64[4],uint64,uint64,uint64,uint64,uint64,uint8[32],uint64,uint64,uint64,uint64,uint64)%0#0"
      ]
    },
    "626": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.addValidator",
      "op": "callsub addValidator",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "629": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "630": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%4#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "631": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%4#0"
      ]
    },
    "632": {
      "op": "concat",
      "defined_out": [
        "tmp%140#0"
      ],
      "stack_out": [
        "tmp%140#0"
      ]
    },
    "633": {
      "op": "log",
      "stack_out": []
    },
    "634": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "635": {
      "op": "return",
      "stack_out": []
    },
    "636": {
      "block": "main_getNFDRegistryID_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "638": {
      "op": "!",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "639": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "640": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "642": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "643": {
      "op": "bytec 5 // 0x151f7c750000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000"
      ],
      "stack_out": [
        "0x151f7c750000000000000000"
      ]
    },
    "645": {
      "op": "log",
      "stack_out": []
    },
    "646": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "647": {
      "op": "return",
      "stack_out": []
    },
    "648": {
      "block": "main_getNodePoolAssignments_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "650": {
      "op": "!",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "651": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "652": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "654": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "655": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "658": {
      "op": "btoi",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "659": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getNodePoolAssignments",
      "op": "callsub getNodePoolAssignments",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "662": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0",
        "0x151f7c75"
      ]
    },
    "663": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%125#0"
      ]
    },
    "664": {
      "op": "concat",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "665": {
      "op": "log",
      "stack_out": []
    },
    "666": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "667": {
      "op": "return",
      "stack_out": []
    },
    "668": {
      "block": "main_getTokenPayoutRatio_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "670": {
      "op": "!",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "671": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "672": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "674": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "675": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "678": {
      "op": "btoi",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "679": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getTokenPayoutRatio",
      "op": "callsub getTokenPayoutRatio",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "682": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0",
        "0x151f7c75"
      ]
    },
    "683": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%118#0"
      ]
    },
    "684": {
      "op": "concat",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "685": {
      "op": "log",
      "stack_out": []
    },
    "686": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "687": {
      "op": "return",
      "stack_out": []
    },
    "688": {
      "block": "main_getStakedPoolsForAccount_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "690": {
      "op": "!",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "691": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "692": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "694": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "695": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%1#0"
      ]
    },
    "698": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getStakedPoolsForAccount",
      "op": "callsub getStakedPoolsForAccount",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "701": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0",
        "0x151f7c75"
      ]
    },
    "702": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%111#0"
      ]
    },
    "703": {
      "op": "concat",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "704": {
      "op": "log",
      "stack_out": []
    },
    "705": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "706": {
      "op": "return",
      "stack_out": []
    },
    "707": {
      "block": "main_doesStakerNeedToPayMBR_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "709": {
      "op": "!",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "710": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "711": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "713": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "714": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint8[32])%0#0"
      ]
    },
    "717": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.doesStakerNeedToPayMBR",
      "op": "callsub doesStakerNeedToPayMBR",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "720": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0",
        "0x00"
      ]
    },
    "723": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0",
        "0x00",
        "0"
      ]
    },
    "724": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "tmp%104#0"
      ]
    },
    "726": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "727": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "728": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "729": {
      "op": "concat",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "730": {
      "op": "log",
      "stack_out": []
    },
    "731": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "732": {
      "op": "return",
      "stack_out": []
    },
    "733": {
      "block": "main_getCurMaxStakePerPool_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "735": {
      "op": "!",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "736": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "737": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "739": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "740": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%8#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%8#0"
      ]
    },
    "743": {
      "op": "btoi",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "744": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getCurMaxStakePerPool",
      "op": "callsub getCurMaxStakePerPool",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "747": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "748": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%2#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "749": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "750": {
      "op": "concat",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "751": {
      "op": "log",
      "stack_out": []
    },
    "752": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "753": {
      "op": "return",
      "stack_out": []
    },
    "754": {
      "block": "main_getPoolInfo_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "756": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "757": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "758": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "760": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "761": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64,uint64,uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64,uint64,uint64)%0#0"
      ]
    },
    "764": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getPoolInfo",
      "op": "callsub getPoolInfo",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "767": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0",
        "0x151f7c75"
      ]
    },
    "768": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%90#0"
      ]
    },
    "769": {
      "op": "concat",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "770": {
      "op": "log",
      "stack_out": []
    },
    "771": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "772": {
      "op": "return",
      "stack_out": []
    },
    "773": {
      "block": "main_getPoolAppId_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "775": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "776": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "777": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "779": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "780": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%6#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%6#0"
      ]
    },
    "783": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "784": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(uint64)%7#0",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "reinterpret_Encoded(uint64)%7#0"
      ]
    },
    "787": {
      "op": "btoi",
      "defined_out": [
        "tmp%81#0",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "tmp%82#0"
      ]
    },
    "788": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getPoolAppId",
      "op": "callsub getPoolAppId",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "791": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "792": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "793": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "794": {
      "op": "concat",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "795": {
      "op": "log",
      "stack_out": []
    },
    "796": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "797": {
      "op": "return",
      "stack_out": []
    },
    "798": {
      "block": "main_getPools_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "800": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "801": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "802": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "804": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "805": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%5#0"
      ]
    },
    "808": {
      "op": "btoi",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "809": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getPools",
      "op": "callsub getPools",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "812": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "0x151f7c75"
      ]
    },
    "813": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%75#0"
      ]
    },
    "814": {
      "op": "concat",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "815": {
      "op": "log",
      "stack_out": []
    },
    "816": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "817": {
      "op": "return",
      "stack_out": []
    },
    "818": {
      "block": "main_getValidatorOwnerAndManager_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "820": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "821": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "822": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "824": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "825": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%4#0"
      ]
    },
    "828": {
      "op": "btoi",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "829": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getValidatorOwnerAndManager",
      "op": "callsub getValidatorOwnerAndManager",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "832": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "0x151f7c75"
      ]
    },
    "833": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%68#0"
      ]
    },
    "834": {
      "op": "concat",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "835": {
      "op": "log",
      "stack_out": []
    },
    "836": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "837": {
      "op": "return",
      "stack_out": []
    },
    "838": {
      "block": "main_getValidatorState_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "840": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "841": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "842": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "844": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "845": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%3#0"
      ]
    },
    "848": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "849": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getValidatorState",
      "op": "callsub getValidatorState",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "852": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "0x151f7c75"
      ]
    },
    "853": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%61#0"
      ]
    },
    "854": {
      "op": "concat",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "855": {
      "op": "log",
      "stack_out": []
    },
    "856": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "857": {
      "op": "return",
      "stack_out": []
    },
    "858": {
      "block": "main_getValidatorConfig_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "860": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "861": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "862": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "864": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "865": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%2#0"
      ]
    },
    "868": {
      "op": "btoi",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "869": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getValidatorConfig",
      "op": "callsub getValidatorConfig",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "872": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "0x151f7c75"
      ]
    },
    "873": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%54#0"
      ]
    },
    "874": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "875": {
      "op": "log",
      "stack_out": []
    },
    "876": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "877": {
      "op": "return",
      "stack_out": []
    },
    "878": {
      "block": "main_getNumValidators_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "880": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "881": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "882": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "884": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "885": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getNumValidators",
      "op": "callsub getNumValidators",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "888": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "889": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "890": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "891": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "892": {
      "op": "log",
      "stack_out": []
    },
    "893": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "894": {
      "op": "return",
      "stack_out": []
    },
    "895": {
      "block": "main_getProtocolConstraints_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "897": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "898": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "899": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "901": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "902": {
      "op": "pushbytes 0x151f7c75000000000000000100000000000f4240000000000000000000000000000f424000000000000f424000003faa25226000000110d9316ec0000000b5e620f480000000000000000008000000000000000300000000000000c8",
      "defined_out": [
        "0x151f7c75000000000000000100000000000f4240000000000000000000000000000f424000000000000f424000003faa25226000000110d9316ec0000000b5e620f480000000000000000008000000000000000300000000000000c8"
      ],
      "stack_out": [
        "0x151f7c75000000000000000100000000000f4240000000000000000000000000000f424000000000000f424000003faa25226000000110d9316ec0000000b5e620f480000000000000000008000000000000000300000000000000c8"
      ]
    },
    "996": {
      "op": "log",
      "stack_out": []
    },
    "997": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "998": {
      "op": "return",
      "stack_out": []
    },
    "999": {
      "block": "main_getMbrAmounts_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1001": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1002": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1003": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1005": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1006": {
      "op": "pushbytes 0x151f7c7500000000000632540000000000139b880000000004c64f540000000000012174",
      "defined_out": [
        "0x151f7c7500000000000632540000000000139b880000000004c64f540000000000012174"
      ],
      "stack_out": [
        "0x151f7c7500000000000632540000000000139b880000000004c64f540000000000012174"
      ]
    },
    "1044": {
      "op": "log",
      "stack_out": []
    },
    "1045": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1046": {
      "op": "return",
      "stack_out": []
    },
    "1047": {
      "block": "main_gas_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1049": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1050": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1051": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1053": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1054": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1055": {
      "op": "return",
      "stack_out": []
    },
    "1056": {
      "block": "main_finalizeStakingContract_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1058": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1059": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1060": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1062": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1063": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.finalizeStakingContract",
      "op": "callsub finalizeStakingContract"
    },
    "1066": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1067": {
      "op": "return",
      "stack_out": []
    },
    "1068": {
      "block": "main_loadStakingContractData_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1070": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1071": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1072": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1074": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1075": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "1078": {
      "op": "btoi",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "1079": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "1082": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "1085": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.loadStakingContractData",
      "op": "callsub loadStakingContractData",
      "stack_out": []
    },
    "1088": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1089": {
      "op": "return",
      "stack_out": []
    },
    "1090": {
      "block": "main_initStakingContract_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1092": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1093": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1094": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1096": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1097": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "1100": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1101": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.initStakingContract",
      "op": "callsub initStakingContract",
      "stack_out": []
    },
    "1104": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1105": {
      "op": "return",
      "stack_out": []
    },
    "1106": {
      "block": "main_createApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1108": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1109": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1110": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1112": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1113": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1114": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.createApplication",
      "op": "callsub createApplication"
    },
    "1117": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1118": {
      "op": "return",
      "stack_out": []
    },
    "1119": {
      "block": "main_updateApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1121": {
      "op": "pushint 4 // UpdateApplication",
      "defined_out": [
        "UpdateApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "UpdateApplication"
      ]
    },
    "1123": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1124": {
      "error": "OnCompletion is not UpdateApplication",
      "op": "assert // OnCompletion is not UpdateApplication",
      "stack_out": []
    },
    "1125": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1127": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1128": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.updateApplication",
      "op": "callsub updateApplication"
    },
    "1131": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1132": {
      "op": "return",
      "stack_out": []
    },
    "1133": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.updateApplication",
      "params": {},
      "block": "updateApplication",
      "stack_in": [],
      "op": "bytec 7 // \"poolTemplateApprovalBytes\"",
      "defined_out": [
        "\"poolTemplateApprovalBytes\""
      ],
      "stack_out": [
        "\"poolTemplateApprovalBytes\""
      ]
    },
    "1135": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1136": {
      "op": "pop",
      "stack_out": []
    },
    "1137": {
      "op": "bytec_2 // \"init\"",
      "defined_out": [
        "\"init\""
      ],
      "stack_out": [
        "\"init\""
      ]
    },
    "1138": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"init\"",
        "0"
      ],
      "stack_out": [
        "\"init\"",
        "0"
      ]
    },
    "1139": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1140": {
      "retsub": true,
      "op": "retsub"
    },
    "1141": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.createApplication",
      "params": {},
      "block": "createApplication",
      "stack_in": [],
      "op": "bytec_2 // \"init\"",
      "defined_out": [
        "\"init\""
      ],
      "stack_out": [
        "\"init\""
      ]
    },
    "1142": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"init\"",
        "0"
      ],
      "stack_out": [
        "\"init\"",
        "0"
      ]
    },
    "1143": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1144": {
      "op": "bytec_3 // \"numV\"",
      "defined_out": [
        "\"numV\""
      ],
      "stack_out": [
        "\"numV\""
      ]
    },
    "1145": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"numV\"",
        "0"
      ]
    },
    "1146": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1147": {
      "op": "pushbytes \"numStakers\"",
      "defined_out": [
        "\"numStakers\""
      ],
      "stack_out": [
        "\"numStakers\""
      ]
    },
    "1159": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"numStakers\"",
        "0"
      ]
    },
    "1160": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1161": {
      "op": "pushbytes \"staked\"",
      "defined_out": [
        "\"staked\""
      ],
      "stack_out": [
        "\"staked\""
      ]
    },
    "1169": {
      "op": "intc_1 // 0",
      "stack_out": [
        "\"staked\"",
        "0"
      ]
    },
    "1170": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1171": {
      "retsub": true,
      "op": "retsub"
    },
    "1172": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.initStakingContract",
      "params": {
        "approvalProgramSize#0": "uint64"
      },
      "block": "initStakingContract",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1175": {
      "op": "bytec 7 // \"poolTemplateApprovalBytes\"",
      "defined_out": [
        "\"poolTemplateApprovalBytes\""
      ],
      "stack_out": [
        "\"poolTemplateApprovalBytes\""
      ]
    },
    "1177": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"poolTemplateApprovalBytes\"",
        "approvalProgramSize#0 (copy)"
      ],
      "stack_out": [
        "\"poolTemplateApprovalBytes\"",
        "approvalProgramSize#0 (copy)"
      ]
    },
    "1179": {
      "op": "box_create",
      "defined_out": [
        "{box_create}"
      ],
      "stack_out": [
        "{box_create}"
      ]
    },
    "1180": {
      "op": "pop",
      "stack_out": []
    },
    "1181": {
      "retsub": true,
      "op": "retsub"
    },
    "1182": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.loadStakingContractData",
      "params": {
        "offset#0": "uint64",
        "data#0": "bytes"
      },
      "block": "loadStakingContractData",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1185": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1186": {
      "op": "bytec_2 // \"init\"",
      "defined_out": [
        "\"init\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"init\""
      ]
    },
    "1187": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1188": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1189": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1190": {
      "op": "assert",
      "stack_out": []
    },
    "1191": {
      "retsub": true,
      "op": "retsub"
    },
    "1192": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.finalizeStakingContract",
      "params": {},
      "block": "finalizeStakingContract",
      "stack_in": [],
      "op": "bytec_2 // \"init\"",
      "defined_out": [
        "\"init\""
      ],
      "stack_out": [
        "\"init\""
      ]
    },
    "1193": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"init\"",
        "1"
      ],
      "stack_out": [
        "\"init\"",
        "1"
      ]
    },
    "1194": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1195": {
      "retsub": true,
      "op": "retsub"
    },
    "1196": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getNumValidators",
      "params": {},
      "block": "getNumValidators",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1197": {
      "op": "bytec_3 // \"numV\"",
      "defined_out": [
        "\"numV\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"numV\""
      ]
    },
    "1198": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1199": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1200": {
      "retsub": true,
      "op": "retsub"
    },
    "1201": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getValidatorConfig",
      "params": {
        "validatorId#0": "uint64"
      },
      "block": "getValidatorConfig",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1204": {
      "op": "frame_dig -1",
      "defined_out": [
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "validatorId#0 (copy)"
      ]
    },
    "1206": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1207": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1208": {
      "op": "swap",
      "stack_out": [
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1209": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1210": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1211": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "1212": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "0"
      ]
    },
    "1213": {
      "op": "intc_2 // 264",
      "defined_out": [
        "0",
        "264",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "0",
        "264"
      ]
    },
    "1214": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "1215": {
      "retsub": true,
      "op": "retsub"
    },
    "1216": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getValidatorState",
      "params": {
        "validatorId#0": "uint64"
      },
      "block": "getValidatorState",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1219": {
      "op": "frame_dig -1",
      "defined_out": [
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "validatorId#0 (copy)"
      ]
    },
    "1221": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1222": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1223": {
      "op": "swap",
      "stack_out": [
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1224": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1225": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1226": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "1227": {
      "op": "intc_2 // 264",
      "defined_out": [
        "264",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "264"
      ]
    },
    "1228": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "264",
        "32",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "264",
        "32"
      ]
    },
    "1230": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "1231": {
      "retsub": true,
      "op": "retsub"
    },
    "1232": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getValidatorOwnerAndManager",
      "params": {
        "validatorId#0": "uint64"
      },
      "block": "getValidatorOwnerAndManager",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1235": {
      "op": "frame_dig -1",
      "defined_out": [
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "validatorId#0 (copy)"
      ]
    },
    "1237": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1238": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1239": {
      "op": "swap",
      "stack_out": [
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1240": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1241": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%1#0",
        "validator#0"
      ],
      "stack_out": [
        "validator#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1242": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "validator#0"
      ]
    },
    "1243": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "validator#0"
      ],
      "stack_out": [
        "validator#0",
        "0"
      ]
    },
    "1244": {
      "op": "intc_2 // 264",
      "defined_out": [
        "0",
        "264",
        "validator#0"
      ],
      "stack_out": [
        "validator#0",
        "0",
        "264"
      ]
    },
    "1245": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "1246": {
      "op": "dup",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%0#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%0#0 (copy)"
      ]
    },
    "1247": {
      "op": "extract 8 32",
      "defined_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "1250": {
      "op": "swap",
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%extract%0#0"
      ]
    },
    "1251": {
      "op": "extract 40 32",
      "defined_out": [
        "aggregate%extract%1#0",
        "aggregate%extract%2#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%extract%2#0"
      ]
    },
    "1254": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "1255": {
      "retsub": true,
      "op": "retsub"
    },
    "1256": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getPools",
      "params": {
        "validatorId#0": "uint64"
      },
      "block": "getPools",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1259": {
      "op": "intc_1 // 0",
      "stack_out": [
        "aggregate%encoded_element%0#0"
      ]
    },
    "1260": {
      "op": "bytec 4 // 0x0000"
    },
    "1262": {
      "op": "frame_dig -1",
      "defined_out": [
        "retData#0",
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "validatorId#0 (copy)"
      ]
    },
    "1264": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "encoded_value%0#0"
      ]
    },
    "1265": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1266": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1267": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1268": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1269": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "aggregate%box_get%0#0"
      ]
    },
    "1270": {
      "op": "intc 4 // 296",
      "defined_out": [
        "296",
        "aggregate%box_get%0#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "aggregate%box_get%0#0",
        "296"
      ]
    },
    "1272": {
      "op": "intc 5 // 576",
      "defined_out": [
        "296",
        "576",
        "aggregate%box_get%0#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "aggregate%box_get%0#0",
        "296",
        "576"
      ]
    },
    "1274": {
      "op": "extract3",
      "defined_out": [
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0"
      ]
    },
    "1275": {
      "op": "intc_1 // 0",
      "defined_out": [
        "i#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0"
      ]
    },
    "1276": {
      "block": "getPools_while_top@1",
      "stack_in": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "i#0"
      ]
    },
    "1278": {
      "op": "intc_3 // 24",
      "defined_out": [
        "24",
        "i#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "i#0",
        "24"
      ]
    },
    "1279": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "1280": {
      "op": "bz getPools_block@6",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0"
      ]
    },
    "1283": {
      "op": "frame_dig 3",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "i#0"
      ]
    },
    "1285": {
      "op": "intc_3 // 24",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "i#0",
        "24"
      ]
    },
    "1286": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1287": {
      "op": "frame_dig 2",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "i#0",
        "poolSet#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "aggregate%bytes_offset%0#0",
        "poolSet#0"
      ]
    },
    "1289": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "poolSet#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1290": {
      "op": "intc_3 // 24",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "poolSet#0",
        "aggregate%bytes_offset%0#0",
        "24"
      ]
    },
    "1291": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "1292": {
      "op": "dup",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "1293": {
      "op": "frame_bury 0",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "1295": {
      "op": "intc_1 // 0",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "aggregate%encoded_element%0#0",
        "0"
      ]
    },
    "1296": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0",
        "values%2#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "values%2#0"
      ]
    },
    "1297": {
      "op": "bz getPools_block@6",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0"
      ]
    },
    "1300": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "retData#0"
      ]
    },
    "1302": {
      "op": "dup",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0",
        "retData#0",
        "retData#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "retData#0",
        "retData#0 (copy)"
      ]
    },
    "1303": {
      "op": "frame_dig 0",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "retData#0",
        "retData#0 (copy)",
        "aggregate%encoded_element%0#0"
      ]
    },
    "1305": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "concat%0#0",
        "i#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "retData#0",
        "concat%0#0"
      ]
    },
    "1306": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "concat%0#0",
        "retData#0"
      ]
    },
    "1307": {
      "op": "intc_1 // 0",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "concat%0#0",
        "retData#0",
        "0"
      ]
    },
    "1308": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "i#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1309": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%encoded_element%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "i#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "1310": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%encoded_element%0#0",
        "concat%0#0",
        "i#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "1311": {
      "op": "itob",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "as_bytes%0#0",
        "concat%0#0",
        "i#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "1312": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "i#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "1315": {
      "op": "replace2 0",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "retData#0"
      ]
    },
    "1317": {
      "op": "frame_bury 1",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0"
      ]
    },
    "1319": {
      "op": "frame_dig 3",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "i#0"
      ]
    },
    "1321": {
      "op": "intc_0 // 1",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1322": {
      "op": "+",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "i#0"
      ]
    },
    "1323": {
      "op": "frame_bury 3",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0"
      ]
    },
    "1325": {
      "op": "b getPools_while_top@1"
    },
    "1328": {
      "block": "getPools_block@6",
      "stack_in": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "retData#0",
        "poolSet#0",
        "i#0",
        "retData#0"
      ]
    },
    "1330": {
      "op": "frame_bury 0"
    },
    "1332": {
      "retsub": true,
      "op": "retsub"
    },
    "1333": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getPoolAppId",
      "params": {
        "validatorId#0": "uint64",
        "poolId#0": "uint64"
      },
      "block": "getPoolAppId",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1336": {
      "op": "frame_dig -1",
      "defined_out": [
        "poolId#0 (copy)"
      ],
      "stack_out": [
        "poolId#0 (copy)"
      ]
    },
    "1338": {
      "op": "bz getPoolAppId_bool_false@3",
      "stack_out": []
    },
    "1341": {
      "op": "frame_dig -2",
      "defined_out": [
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "validatorId#0 (copy)"
      ]
    },
    "1343": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1344": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1345": {
      "op": "swap",
      "stack_out": [
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1346": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1347": {
      "op": "box_len",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1348": {
      "op": "bury 1",
      "stack_out": [
        "aggregate%box_get%1#0"
      ]
    },
    "1350": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": []
    },
    "1351": {
      "op": "frame_dig -1",
      "stack_out": [
        "poolId#0 (copy)"
      ]
    },
    "1353": {
      "op": "intc_3 // 24",
      "defined_out": [
        "24",
        "poolId#0 (copy)"
      ],
      "stack_out": [
        "poolId#0 (copy)",
        "24"
      ]
    },
    "1354": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1355": {
      "op": "bz getPoolAppId_bool_false@3",
      "stack_out": []
    },
    "1358": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1359": {
      "block": "getPoolAppId_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "1360": {
      "op": "frame_dig -2",
      "defined_out": [
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "validatorId#0 (copy)"
      ]
    },
    "1362": {
      "op": "itob",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "1363": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "\"v\""
      ]
    },
    "1364": {
      "op": "swap",
      "stack_out": [
        "\"v\"",
        "encoded_value%1#0"
      ]
    },
    "1365": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0"
      ]
    },
    "1366": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ],
      "stack_out": [
        "aggregate%box_get%2#0",
        "aggregate%box_get%3#0"
      ]
    },
    "1367": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%2#0"
      ]
    },
    "1368": {
      "op": "intc 4 // 296",
      "defined_out": [
        "296",
        "aggregate%box_get%2#0"
      ],
      "stack_out": [
        "aggregate%box_get%2#0",
        "296"
      ]
    },
    "1370": {
      "op": "intc 5 // 576",
      "defined_out": [
        "296",
        "576",
        "aggregate%box_get%2#0"
      ],
      "stack_out": [
        "aggregate%box_get%2#0",
        "296",
        "576"
      ]
    },
    "1372": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0"
      ]
    },
    "1373": {
      "op": "frame_dig -1",
      "defined_out": [
        "aggregate%extract%1#0",
        "poolId#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "poolId#0 (copy)"
      ]
    },
    "1375": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%1#0",
        "poolId#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "poolId#0 (copy)",
        "1"
      ]
    },
    "1376": {
      "op": "-",
      "defined_out": [
        "aggregate%extract%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "tmp%2#0"
      ]
    },
    "1377": {
      "op": "intc_3 // 24",
      "defined_out": [
        "24",
        "aggregate%extract%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "tmp%2#0",
        "24"
      ]
    },
    "1378": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1379": {
      "op": "intc_3 // 24",
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%bytes_offset%0#0",
        "24"
      ]
    },
    "1380": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0"
      ]
    },
    "1381": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%encoded_element%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "0"
      ]
    },
    "1382": {
      "op": "extract_uint64",
      "defined_out": [
        "values%3#0"
      ],
      "stack_out": [
        "values%3#0"
      ]
    },
    "1383": {
      "retsub": true,
      "op": "retsub"
    },
    "1384": {
      "block": "getPoolAppId_bool_false@3",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "1385": {
      "op": "b getPoolAppId_bool_merge@4"
    },
    "1388": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getPoolInfo",
      "params": {
        "poolKey#0": "bytes"
      },
      "block": "getPoolInfo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1391": {
      "op": "frame_dig -1",
      "defined_out": [
        "poolKey#0 (copy)"
      ],
      "stack_out": [
        "poolKey#0 (copy)"
      ]
    },
    "1393": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "poolKey#0 (copy)"
      ],
      "stack_out": [
        "poolKey#0 (copy)",
        "0"
      ]
    },
    "1394": {
      "op": "extract_uint64",
      "defined_out": [
        "values%0#0"
      ],
      "stack_out": [
        "values%0#0"
      ]
    },
    "1395": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1396": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1397": {
      "op": "swap",
      "stack_out": [
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1398": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1399": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1400": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "1401": {
      "op": "intc 4 // 296",
      "defined_out": [
        "296",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "296"
      ]
    },
    "1403": {
      "op": "intc 5 // 576",
      "defined_out": [
        "296",
        "576",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "296",
        "576"
      ]
    },
    "1405": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0"
      ]
    },
    "1406": {
      "op": "frame_dig -1",
      "stack_out": [
        "aggregate%extract%1#0",
        "poolKey#0 (copy)"
      ]
    },
    "1408": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "aggregate%extract%1#0",
        "poolKey#0 (copy)"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "poolKey#0 (copy)",
        "8"
      ]
    },
    "1410": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%extract%1#0",
        "values%2#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "values%2#0"
      ]
    },
    "1411": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%extract%1#0",
        "values%2#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "values%2#0",
        "1"
      ]
    },
    "1412": {
      "op": "-",
      "defined_out": [
        "aggregate%extract%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "tmp%0#0"
      ]
    },
    "1413": {
      "op": "intc_3 // 24",
      "defined_out": [
        "24",
        "aggregate%extract%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "tmp%0#0",
        "24"
      ]
    },
    "1414": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "aggregate%extract%1#0"
      ],
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1415": {
      "op": "intc_3 // 24",
      "stack_out": [
        "aggregate%extract%1#0",
        "aggregate%bytes_offset%0#0",
        "24"
      ]
    },
    "1416": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0"
      ]
    },
    "1417": {
      "retsub": true,
      "op": "retsub"
    },
    "1418": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getCurMaxStakePerPool",
      "params": {
        "validatorId#0": "uint64"
      },
      "block": "getCurMaxStakePerPool",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1421": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "maxPerPool#0"
      ]
    },
    "1423": {
      "op": "frame_dig -1",
      "defined_out": [
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "maxPerPool#0",
        "validatorId#0 (copy)"
      ]
    },
    "1425": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "encoded_value%0#0"
      ]
    },
    "1426": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1427": {
      "op": "swap",
      "stack_out": [
        "maxPerPool#0",
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1428": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1429": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1430": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maxPerPool#0",
        "aggregate%box_get%0#0"
      ]
    },
    "1431": {
      "op": "dup",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ],
      "stack_out": [
        "maxPerPool#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "1432": {
      "op": "intc_2 // 264",
      "defined_out": [
        "264",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ],
      "stack_out": [
        "maxPerPool#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "264"
      ]
    },
    "1433": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "264",
        "32",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ],
      "stack_out": [
        "maxPerPool#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "264",
        "32"
      ]
    },
    "1435": {
      "op": "extract3",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "aggregate%box_get%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1436": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0",
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "aggregate%box_get%0#0",
        "aggregate%extract%0#0",
        "0"
      ]
    },
    "1437": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%box_get%0#0",
        "numPools#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "aggregate%box_get%0#0",
        "numPools#0"
      ]
    },
    "1438": {
      "op": "pushint 300000000000000 // 300000000000000",
      "defined_out": [
        "300000000000000",
        "aggregate%box_get%0#0",
        "numPools#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "aggregate%box_get%0#0",
        "numPools#0",
        "300000000000000"
      ]
    },
    "1446": {
      "op": "swap",
      "stack_out": [
        "maxPerPool#0",
        "aggregate%box_get%0#0",
        "300000000000000",
        "numPools#0"
      ]
    },
    "1447": {
      "op": "/",
      "defined_out": [
        "aggregate%box_get%0#0",
        "hardMaxDividedBetweenPools#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "aggregate%box_get%0#0",
        "hardMaxDividedBetweenPools#0"
      ]
    },
    "1448": {
      "op": "swap",
      "defined_out": [
        "aggregate%box_get%0#0",
        "hardMaxDividedBetweenPools#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "aggregate%box_get%0#0"
      ]
    },
    "1449": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "aggregate%box_get%0#0",
        "0"
      ]
    },
    "1450": {
      "op": "intc_2 // 264",
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "aggregate%box_get%0#0",
        "0",
        "264"
      ]
    },
    "1451": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%2#0",
        "hardMaxDividedBetweenPools#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "aggregate%extract%2#0"
      ]
    },
    "1452": {
      "op": "pushint 232 // 232",
      "defined_out": [
        "232",
        "aggregate%extract%2#0",
        "hardMaxDividedBetweenPools#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "aggregate%extract%2#0",
        "232"
      ]
    },
    "1455": {
      "op": "extract_uint64",
      "defined_out": [
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#0"
      ]
    },
    "1456": {
      "op": "dup",
      "defined_out": [
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#0",
        "maxPerPool#7"
      ],
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7",
        "maxPerPool#0"
      ]
    },
    "1457": {
      "op": "bnz getCurMaxStakePerPool_after_if_else@2",
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7"
      ]
    },
    "1460": {
      "op": "pushint 70000000000000 // 70000000000000",
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7",
        "maxPerPool#7"
      ]
    },
    "1468": {
      "op": "frame_bury 2",
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7"
      ]
    },
    "1470": {
      "block": "getCurMaxStakePerPool_after_if_else@2",
      "stack_in": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "maxPerPool#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7",
        "maxPerPool#0"
      ]
    },
    "1472": {
      "op": "dup",
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7",
        "maxPerPool#0",
        "maxPerPool#0"
      ]
    },
    "1473": {
      "op": "frame_bury 0",
      "defined_out": [
        "maxPerPool#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7",
        "maxPerPool#0"
      ]
    },
    "1475": {
      "op": "frame_dig 1",
      "defined_out": [
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7",
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0"
      ]
    },
    "1477": {
      "op": ">",
      "defined_out": [
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7",
        "tmp%4#0"
      ]
    },
    "1478": {
      "op": "bz getCurMaxStakePerPool_after_if_else@4",
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7"
      ]
    },
    "1481": {
      "op": "frame_dig 1",
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7",
        "maxPerPool#0"
      ]
    },
    "1483": {
      "op": "frame_bury 0",
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7"
      ]
    },
    "1485": {
      "block": "getCurMaxStakePerPool_after_if_else@4",
      "stack_in": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "maxPerPool#0"
      ],
      "stack_out": [
        "maxPerPool#0",
        "hardMaxDividedBetweenPools#0",
        "maxPerPool#7",
        "maxPerPool#0"
      ]
    },
    "1486": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.doesStakerNeedToPayMBR",
      "params": {
        "staker#0": "bytes"
      },
      "block": "doesStakerNeedToPayMBR",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1489": {
      "op": "bytec 8 // \"sps\"",
      "defined_out": [
        "\"sps\""
      ],
      "stack_out": [
        "\"sps\""
      ]
    },
    "1491": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"sps\"",
        "staker#0 (copy)"
      ],
      "stack_out": [
        "\"sps\"",
        "staker#0 (copy)"
      ]
    },
    "1493": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1494": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1495": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1497": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1498": {
      "retsub": true,
      "op": "retsub"
    },
    "1499": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getStakedPoolsForAccount",
      "params": {
        "staker#0": "bytes"
      },
      "block": "getStakedPoolsForAccount",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1502": {
      "op": "intc_1 // 0",
      "stack_out": [
        "aggregate%encoded_element%0#0"
      ]
    },
    "1503": {
      "op": "dupn 3",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9"
      ]
    },
    "1505": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0"
      ]
    },
    "1507": {
      "op": "bytec 8 // \"sps\"",
      "defined_out": [
        "\"sps\""
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "\"sps\""
      ]
    },
    "1509": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"sps\"",
        "staker#0 (copy)"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "\"sps\"",
        "staker#0 (copy)"
      ]
    },
    "1511": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1512": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1513": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1514": {
      "op": "bury 1",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1516": {
      "op": "bnz getStakedPoolsForAccount_after_if_else@2",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1519": {
      "op": "bytec 4 // 0x0000",
      "defined_out": [
        "0x0000",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "0x0000"
      ]
    },
    "1521": {
      "op": "frame_bury 0"
    },
    "1523": {
      "retsub": true,
      "op": "retsub"
    },
    "1524": {
      "block": "getStakedPoolsForAccount_after_if_else@2",
      "stack_in": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ],
      "op": "bytec 4 // 0x0000",
      "defined_out": [
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "retData#0"
      ]
    },
    "1526": {
      "op": "frame_bury 2",
      "defined_out": [
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1528": {
      "op": "frame_dig 5",
      "defined_out": [
        "box_prefixed_key%0#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1530": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%1#0",
        "box_prefixed_key%0#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "poolSet#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1531": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%1#0",
        "poolSet#0"
      ]
    },
    "1532": {
      "op": "frame_bury 1",
      "defined_out": [
        "aggregate%box_get%1#0",
        "box_prefixed_key%0#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1534": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1535": {
      "op": "intc_1 // 0",
      "defined_out": [
        "box_prefixed_key%0#0",
        "i#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "i#0"
      ]
    },
    "1536": {
      "op": "frame_bury 4",
      "defined_out": [
        "box_prefixed_key%0#0",
        "i#0",
        "poolSet#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1538": {
      "block": "getStakedPoolsForAccount_while_top@3",
      "stack_in": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "i#0"
      ]
    },
    "1540": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "i#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "i#0",
        "6"
      ]
    },
    "1542": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "1543": {
      "op": "bz getStakedPoolsForAccount_after_while@7",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1546": {
      "op": "frame_dig 4",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "i#0"
      ]
    },
    "1548": {
      "op": "intc_3 // 24",
      "defined_out": [
        "24",
        "i#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "i#0",
        "24"
      ]
    },
    "1549": {
      "op": "*",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "i#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1550": {
      "op": "frame_dig 1",
      "defined_out": [
        "aggregate%bytes_offset%0#0",
        "i#0",
        "poolSet#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "aggregate%bytes_offset%0#0",
        "poolSet#0"
      ]
    },
    "1552": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "poolSet#0",
        "aggregate%bytes_offset%0#0"
      ]
    },
    "1553": {
      "op": "intc_3 // 24",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "poolSet#0",
        "aggregate%bytes_offset%0#0",
        "24"
      ]
    },
    "1554": {
      "error": "index access is out of bounds",
      "op": "extract3 // on error: index access is out of bounds",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "1555": {
      "op": "dup",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "aggregate%encoded_element%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "1556": {
      "op": "frame_bury 0",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "aggregate%encoded_element%0#0"
      ]
    },
    "1558": {
      "op": "intc_1 // 0",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "aggregate%encoded_element%0#0",
        "0"
      ]
    },
    "1559": {
      "op": "extract_uint64",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0",
        "values%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "values%1#0"
      ]
    },
    "1560": {
      "op": "frame_dig 2",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0",
        "retData#9",
        "values%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "values%1#0",
        "retData#9"
      ]
    },
    "1562": {
      "op": "frame_bury 3",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0",
        "retData#9",
        "values%1#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "values%1#0"
      ]
    },
    "1564": {
      "op": "bz getStakedPoolsForAccount_after_if_else@6",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1567": {
      "op": "frame_dig 2",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0",
        "retData#0",
        "retData#9"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "retData#0"
      ]
    },
    "1569": {
      "op": "dup",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "i#0",
        "poolSet#0",
        "retData#0",
        "retData#0 (copy)",
        "retData#9"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "retData#0",
        "retData#0 (copy)"
      ]
    },
    "1570": {
      "op": "frame_dig 0",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "retData#0",
        "retData#0 (copy)",
        "aggregate%encoded_element%0#0"
      ]
    },
    "1572": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "concat%0#0",
        "i#0",
        "poolSet#0",
        "retData#0",
        "retData#9"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "retData#0",
        "concat%0#0"
      ]
    },
    "1573": {
      "op": "swap",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "concat%0#0",
        "retData#0"
      ]
    },
    "1574": {
      "op": "intc_1 // 0",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "concat%0#0",
        "retData#0",
        "0"
      ]
    },
    "1575": {
      "op": "extract_uint16",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "i#0",
        "poolSet#0",
        "retData#0",
        "retData#9"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "1576": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "aggregate%encoded_element%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "i#0",
        "poolSet#0",
        "retData#0",
        "retData#9"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "1577": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "aggregate%encoded_element%0#0",
        "concat%0#0",
        "i#0",
        "poolSet#0",
        "retData#0",
        "retData#9"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "concat%0#0",
        "add%0#0"
      ]
    },
    "1578": {
      "op": "itob",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "as_bytes%0#0",
        "concat%0#0",
        "i#0",
        "poolSet#0",
        "retData#0",
        "retData#9"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "1579": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%encoded_element%0#0",
        "as_u16_bytes%0#0",
        "concat%0#0",
        "i#0",
        "poolSet#0",
        "retData#0",
        "retData#9"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "1582": {
      "op": "replace2 0",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "retData#9"
      ]
    },
    "1584": {
      "op": "frame_bury 3",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1586": {
      "block": "getStakedPoolsForAccount_after_if_else@6",
      "stack_in": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "retData#0"
      ]
    },
    "1588": {
      "op": "frame_bury 2",
      "defined_out": [
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1590": {
      "op": "frame_dig 4",
      "defined_out": [
        "i#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "i#0"
      ]
    },
    "1592": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "i#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "i#0",
        "1"
      ]
    },
    "1593": {
      "op": "+",
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "i#0"
      ]
    },
    "1594": {
      "op": "frame_bury 4",
      "defined_out": [
        "i#0",
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1596": {
      "op": "b getStakedPoolsForAccount_while_top@3"
    },
    "1599": {
      "block": "getStakedPoolsForAccount_after_while@7",
      "stack_in": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "retData#0"
      ],
      "stack_out": [
        "aggregate%encoded_element%0#0",
        "poolSet#0",
        "retData#0",
        "retData#9",
        "i#0",
        "box_prefixed_key%0#0",
        "retData#0"
      ]
    },
    "1601": {
      "op": "frame_bury 0"
    },
    "1603": {
      "retsub": true,
      "op": "retsub"
    },
    "1604": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getTokenPayoutRatio",
      "params": {
        "validatorId#0": "uint64"
      },
      "block": "getTokenPayoutRatio",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1607": {
      "op": "frame_dig -1",
      "defined_out": [
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "validatorId#0 (copy)"
      ]
    },
    "1609": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1610": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1611": {
      "op": "swap",
      "stack_out": [
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1612": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1613": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1614": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "1615": {
      "op": "pushints 872 200 // 872, 200",
      "defined_out": [
        "200",
        "872",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "872",
        "200"
      ]
    },
    "1621": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "1622": {
      "retsub": true,
      "op": "retsub"
    },
    "1623": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getNodePoolAssignments",
      "params": {
        "validatorId#0": "uint64"
      },
      "block": "getNodePoolAssignments",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1626": {
      "op": "frame_dig -1",
      "defined_out": [
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "validatorId#0 (copy)"
      ]
    },
    "1628": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "1629": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1630": {
      "op": "swap",
      "stack_out": [
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1631": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1632": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1633": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1634": {
      "op": "bury 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1636": {
      "op": "assert",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1637": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1638": {
      "op": "pop",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "1639": {
      "op": "pushint 1072 // 1072",
      "defined_out": [
        "1072",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "1072"
      ]
    },
    "1642": {
      "op": "intc 6 // 192",
      "defined_out": [
        "1072",
        "192",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "1072",
        "192"
      ]
    },
    "1644": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0"
      ],
      "stack_out": [
        "aggregate%extract%0#0"
      ]
    },
    "1645": {
      "retsub": true,
      "op": "retsub"
    },
    "1646": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.addValidator",
      "params": {
        "nfdName#0": "bytes",
        "config#0": "bytes"
      },
      "block": "addValidator",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1649": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "values%2#0"
      ]
    },
    "1651": {
      "op": "dup",
      "stack_out": [
        "values%2#0",
        "values%7#0"
      ]
    },
    "1652": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "config#0 (copy)"
      ]
    },
    "1654": {
      "op": "pushint 80 // 80",
      "defined_out": [
        "80",
        "config#0 (copy)"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "config#0 (copy)",
        "80"
      ]
    },
    "1656": {
      "op": "extract_uint64",
      "defined_out": [
        "values%0#1"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%0#1"
      ]
    },
    "1657": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "values%0#1"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%0#1",
        "4"
      ]
    },
    "1659": {
      "op": "<=",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "tmp%1#1"
      ]
    },
    "1660": {
      "op": "bz addValidator_bool_false@4",
      "stack_out": [
        "values%2#0",
        "values%7#0"
      ]
    },
    "1663": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "and_result%0#0"
      ]
    },
    "1664": {
      "block": "addValidator_bool_merge@5",
      "stack_in": [
        "values%2#0",
        "values%7#0",
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "values%2#0",
        "values%7#0"
      ]
    },
    "1665": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "config#0 (copy)"
      ]
    },
    "1667": {
      "op": "pushint 176 // 176",
      "defined_out": [
        "176",
        "config#0 (copy)"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "config#0 (copy)",
        "176"
      ]
    },
    "1670": {
      "op": "extract_uint64",
      "defined_out": [
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%2#0"
      ]
    },
    "1671": {
      "op": "dup",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%2#0",
        "values%2#0"
      ]
    },
    "1672": {
      "op": "frame_bury 0",
      "defined_out": [
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%2#0"
      ]
    },
    "1674": {
      "op": "bz addValidator_bool_false@8",
      "stack_out": [
        "values%2#0",
        "values%7#0"
      ]
    },
    "1677": {
      "op": "frame_dig 0",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%2#0"
      ]
    },
    "1679": {
      "op": "intc 7 // 1000000",
      "defined_out": [
        "1000000",
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%2#0",
        "1000000"
      ]
    },
    "1681": {
      "op": "<=",
      "defined_out": [
        "tmp%3#0",
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "tmp%3#0"
      ]
    },
    "1682": {
      "op": "bz addValidator_bool_false@8",
      "stack_out": [
        "values%2#0",
        "values%7#0"
      ]
    },
    "1685": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%1#0",
        "values%2#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "and_result%1#0"
      ]
    },
    "1686": {
      "block": "addValidator_bool_merge@9",
      "stack_in": [
        "values%2#0",
        "values%7#0",
        "and_result%1#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "values%2#0",
        "values%7#0"
      ]
    },
    "1687": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "config#0 (copy)"
      ]
    },
    "1689": {
      "op": "pushint 184 // 184",
      "defined_out": [
        "184",
        "config#0 (copy)"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "config#0 (copy)",
        "184"
      ]
    },
    "1692": {
      "op": "extract_uint64",
      "defined_out": [
        "values%4#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%4#0"
      ]
    },
    "1693": {
      "op": "intc 7 // 1000000",
      "defined_out": [
        "1000000",
        "values%4#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%4#0",
        "1000000"
      ]
    },
    "1695": {
      "op": "<=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "tmp%5#0"
      ]
    },
    "1696": {
      "op": "bz addValidator_bool_false@12",
      "stack_out": [
        "values%2#0",
        "values%7#0"
      ]
    },
    "1699": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%2#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "and_result%2#0"
      ]
    },
    "1700": {
      "block": "addValidator_bool_merge@13",
      "stack_in": [
        "values%2#0",
        "values%7#0",
        "and_result%2#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "values%2#0",
        "values%7#0"
      ]
    },
    "1701": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "config#0 (copy)"
      ]
    },
    "1703": {
      "op": "pushint 224 // 224",
      "defined_out": [
        "224",
        "config#0 (copy)"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "config#0 (copy)",
        "224"
      ]
    },
    "1706": {
      "op": "extract_uint64",
      "defined_out": [
        "values%6#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%6#0"
      ]
    },
    "1707": {
      "op": "intc 7 // 1000000",
      "defined_out": [
        "1000000",
        "values%6#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%6#0",
        "1000000"
      ]
    },
    "1709": {
      "op": ">=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "tmp%6#0"
      ]
    },
    "1710": {
      "op": "assert",
      "stack_out": [
        "values%2#0",
        "values%7#0"
      ]
    },
    "1711": {
      "op": "frame_dig -1",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "config#0 (copy)"
      ]
    },
    "1713": {
      "op": "pushint 240 // 240",
      "defined_out": [
        "240",
        "config#0 (copy)"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "config#0 (copy)",
        "240"
      ]
    },
    "1716": {
      "op": "extract_uint64",
      "defined_out": [
        "values%7#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%7#0"
      ]
    },
    "1717": {
      "op": "dup",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%7#0",
        "values%7#0"
      ]
    },
    "1718": {
      "op": "frame_bury 1",
      "defined_out": [
        "values%7#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%7#0"
      ]
    },
    "1720": {
      "op": "bz addValidator_bool_false@16",
      "stack_out": [
        "values%2#0",
        "values%7#0"
      ]
    },
    "1723": {
      "op": "frame_dig 1",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%7#0"
      ]
    },
    "1725": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "values%7#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "values%7#0",
        "3"
      ]
    },
    "1727": {
      "op": "<=",
      "defined_out": [
        "tmp%8#0",
        "values%7#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "tmp%8#0"
      ]
    },
    "1728": {
      "op": "bz addValidator_bool_false@16",
      "stack_out": [
        "values%2#0",
        "values%7#0"
      ]
    },
    "1731": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%3#0",
        "values%7#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "and_result%3#0"
      ]
    },
    "1732": {
      "block": "addValidator_bool_merge@17",
      "stack_in": [
        "values%2#0",
        "values%7#0",
        "and_result%3#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "values%2#0",
        "values%7#0"
      ]
    },
    "1733": {
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1735": {
      "op": "frame_dig -1",
      "defined_out": [
        "config#0 (copy)",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "reinterpret_bytes[32]%0#0",
        "config#0 (copy)"
      ]
    },
    "1737": {
      "op": "extract 8 32",
      "defined_out": [
        "aggregate%extract%5#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "reinterpret_bytes[32]%0#0",
        "aggregate%extract%5#0"
      ]
    },
    "1740": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "tmp%0#0"
      ]
    },
    "1741": {
      "op": "assert",
      "stack_out": [
        "values%2#0",
        "values%7#0"
      ]
    },
    "1742": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "0"
      ]
    },
    "1743": {
      "op": "bytec_3 // \"numV\"",
      "defined_out": [
        "\"numV\"",
        "0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "0",
        "\"numV\""
      ]
    },
    "1744": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1745": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "maybe_value%0#0"
      ]
    },
    "1746": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "maybe_value%0#0",
        "1"
      ]
    },
    "1747": {
      "op": "+",
      "defined_out": [
        "validatorId#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0"
      ]
    },
    "1748": {
      "op": "bytec_3 // \"numV\"",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "\"numV\""
      ]
    },
    "1749": {
      "op": "dig 1",
      "defined_out": [
        "\"numV\"",
        "validatorId#0",
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "\"numV\"",
        "validatorId#0 (copy)"
      ]
    },
    "1751": {
      "op": "app_global_put",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0"
      ]
    },
    "1752": {
      "op": "dup",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "validatorId#0 (copy)"
      ]
    },
    "1753": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "validatorId#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "encoded_value%0#0"
      ]
    },
    "1754": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0",
        "validatorId#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1755": {
      "op": "dig 1",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "validatorId#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "encoded_value%0#0",
        "\"v\"",
        "encoded_value%0#0 (copy)"
      ]
    },
    "1757": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "validatorId#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1758": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0",
        "validatorId#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1759": {
      "op": "pushint 1264 // 1264",
      "defined_out": [
        "1264",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "encoded_value%0#0",
        "validatorId#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "1264"
      ]
    },
    "1762": {
      "op": "box_create",
      "defined_out": [
        "box_prefixed_key%0#0",
        "encoded_value%0#0",
        "validatorId#0",
        "{box_create}"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "{box_create}"
      ]
    },
    "1763": {
      "op": "pop",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1764": {
      "op": "dup",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1765": {
      "op": "intc_1 // 0",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "0"
      ]
    },
    "1766": {
      "op": "frame_dig -1",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "0",
        "config#0 (copy)"
      ]
    },
    "1768": {
      "op": "box_replace",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1769": {
      "op": "intc_1 // 0",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "encoded_value%0#0",
        "box_prefixed_key%0#0",
        "0"
      ]
    },
    "1770": {
      "op": "uncover 2",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0",
        "box_prefixed_key%0#0",
        "0",
        "encoded_value%0#0"
      ]
    },
    "1772": {
      "op": "box_replace",
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "validatorId#0"
      ]
    },
    "1773": {
      "op": "frame_bury 0"
    },
    "1775": {
      "retsub": true,
      "op": "retsub"
    },
    "1776": {
      "block": "addValidator_bool_false@16",
      "stack_in": [
        "values%2#0",
        "values%7#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%3#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "and_result%3#0"
      ]
    },
    "1777": {
      "op": "b addValidator_bool_merge@17"
    },
    "1780": {
      "block": "addValidator_bool_false@12",
      "stack_in": [
        "values%2#0",
        "values%7#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%2#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "and_result%2#0"
      ]
    },
    "1781": {
      "op": "b addValidator_bool_merge@13"
    },
    "1784": {
      "block": "addValidator_bool_false@8",
      "stack_in": [
        "values%2#0",
        "values%7#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "and_result%1#0"
      ]
    },
    "1785": {
      "op": "b addValidator_bool_merge@9"
    },
    "1788": {
      "block": "addValidator_bool_false@4",
      "stack_in": [
        "values%2#0",
        "values%7#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "values%2#0",
        "values%7#0",
        "and_result%0#0"
      ]
    },
    "1789": {
      "op": "b addValidator_bool_merge@5"
    },
    "1792": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.changeValidatorManager",
      "params": {
        "validatorId#0": "uint64",
        "manager#0": "bytes"
      },
      "block": "changeValidatorManager",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1795": {
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1797": {
      "op": "frame_dig -2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "validatorId#0 (copy)"
      ]
    },
    "1799": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "encoded_value%0#0"
      ]
    },
    "1800": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1801": {
      "op": "swap",
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1802": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1803": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1804": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1805": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "1806": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "0"
      ]
    },
    "1807": {
      "op": "intc_2 // 264",
      "defined_out": [
        "0",
        "264",
        "aggregate%box_get%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "0",
        "264"
      ]
    },
    "1808": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1809": {
      "op": "extract 8 32",
      "defined_out": [
        "aggregate%extract%1#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "1812": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%extract%1#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1814": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "1815": {
      "op": "assert",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1816": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "40"
      ]
    },
    "1818": {
      "op": "frame_dig -1",
      "defined_out": [
        "40",
        "box_prefixed_key%0#0",
        "manager#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "40",
        "manager#0 (copy)"
      ]
    },
    "1820": {
      "op": "box_replace",
      "stack_out": []
    },
    "1821": {
      "retsub": true,
      "op": "retsub"
    },
    "1822": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.changeValidatorSunsetInfo",
      "params": {
        "validatorId#0": "uint64",
        "sunsettingOn#0": "uint64",
        "sunsettingTo#0": "uint64"
      },
      "block": "changeValidatorSunsetInfo",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1825": {
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1827": {
      "op": "frame_dig -3",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "validatorId#0 (copy)"
      ]
    },
    "1829": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "encoded_value%0#0"
      ]
    },
    "1830": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1831": {
      "op": "swap",
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1832": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1833": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1834": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1835": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "1836": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "0"
      ]
    },
    "1837": {
      "op": "intc_2 // 264",
      "defined_out": [
        "0",
        "264",
        "aggregate%box_get%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "0",
        "264"
      ]
    },
    "1838": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1839": {
      "op": "extract 8 32",
      "defined_out": [
        "aggregate%extract%1#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "1842": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%extract%1#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1844": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "1845": {
      "op": "assert",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1846": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "sunsettingOn#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "sunsettingOn#0 (copy)"
      ]
    },
    "1848": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1849": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1851": {
      "op": "pushint 248 // 248",
      "defined_out": [
        "248",
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0 (copy)",
        "248"
      ]
    },
    "1854": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "248",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1856": {
      "op": "box_replace",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1857": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "sunsettingTo#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "sunsettingTo#0 (copy)"
      ]
    },
    "1859": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1860": {
      "op": "pushint 256 // 256"
    },
    "1863": {
      "op": "swap",
      "defined_out": [
        "256",
        "aggregate%val_as_bytes%1#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "256",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1864": {
      "op": "box_replace",
      "stack_out": []
    },
    "1865": {
      "retsub": true,
      "op": "retsub"
    },
    "1866": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.changeValidatorNFD",
      "params": {
        "validatorId#0": "uint64",
        "nfdAppID#0": "uint64",
        "nfdName#0": "bytes"
      },
      "block": "changeValidatorNFD",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1869": {
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1871": {
      "op": "frame_dig -3",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "validatorId#0 (copy)"
      ]
    },
    "1873": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "encoded_value%0#0"
      ]
    },
    "1874": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1875": {
      "op": "swap",
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1876": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1877": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1878": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1879": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "1880": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "0"
      ]
    },
    "1881": {
      "op": "intc_2 // 264",
      "defined_out": [
        "0",
        "264",
        "aggregate%box_get%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "0",
        "264"
      ]
    },
    "1882": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1883": {
      "op": "extract 8 32",
      "defined_out": [
        "aggregate%extract%1#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "1886": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%extract%1#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1888": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "1889": {
      "op": "assert",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1890": {
      "op": "frame_dig -2",
      "defined_out": [
        "box_prefixed_key%0#0",
        "nfdAppID#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "nfdAppID#0 (copy)"
      ]
    },
    "1892": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1893": {
      "op": "pushint 72 // 72"
    },
    "1895": {
      "op": "swap",
      "defined_out": [
        "72",
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "72",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1896": {
      "op": "box_replace",
      "stack_out": []
    },
    "1897": {
      "retsub": true,
      "op": "retsub"
    },
    "1898": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.changeValidatorCommissionAddress",
      "params": {
        "validatorId#0": "uint64",
        "commissionAddress#0": "bytes"
      },
      "block": "changeValidatorCommissionAddress",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1901": {
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1903": {
      "op": "frame_dig -2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "validatorId#0 (copy)"
      ]
    },
    "1905": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "encoded_value%0#0"
      ]
    },
    "1906": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1907": {
      "op": "swap",
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1908": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1909": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1910": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1911": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "1912": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "0"
      ]
    },
    "1913": {
      "op": "intc_2 // 264",
      "defined_out": [
        "0",
        "264",
        "aggregate%box_get%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "0",
        "264"
      ]
    },
    "1914": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1915": {
      "op": "extract 8 32",
      "defined_out": [
        "aggregate%extract%1#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "1918": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%extract%1#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1920": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "1921": {
      "op": "assert",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1922": {
      "op": "intc 6 // 192",
      "defined_out": [
        "192",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "192"
      ]
    },
    "1924": {
      "op": "frame_dig -1",
      "defined_out": [
        "192",
        "box_prefixed_key%0#0",
        "commissionAddress#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "192",
        "commissionAddress#0 (copy)"
      ]
    },
    "1926": {
      "op": "box_replace",
      "stack_out": []
    },
    "1927": {
      "retsub": true,
      "op": "retsub"
    },
    "1928": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.changeValidatorRewardInfo",
      "params": {
        "validatorId#0": "uint64",
        "EntryGatingType#0": "uint64",
        "EntryGatingAddress#0": "bytes",
        "EntryGatingAssets#0": "bytes",
        "GatingAssetMinBalance#0": "uint64",
        "RewardPerPayout#0": "uint64"
      },
      "block": "changeValidatorRewardInfo",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "1931": {
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1933": {
      "op": "frame_dig -6",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "validatorId#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "validatorId#0 (copy)"
      ]
    },
    "1935": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "encoded_value%0#0"
      ]
    },
    "1936": {
      "op": "bytec_0 // \"v\"",
      "defined_out": [
        "\"v\"",
        "encoded_value%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "encoded_value%0#0",
        "\"v\""
      ]
    },
    "1937": {
      "op": "swap",
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "\"v\"",
        "encoded_value%0#0"
      ]
    },
    "1938": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0"
      ]
    },
    "1939": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1940": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "1941": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "1942": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "0"
      ]
    },
    "1943": {
      "op": "intc_2 // 264",
      "defined_out": [
        "0",
        "264",
        "aggregate%box_get%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%box_get%0#0",
        "0",
        "264"
      ]
    },
    "1944": {
      "op": "extract3",
      "defined_out": [
        "aggregate%extract%0#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%extract%0#0"
      ]
    },
    "1945": {
      "op": "extract 8 32",
      "defined_out": [
        "aggregate%extract%1#0",
        "box_prefixed_key%0#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "box_prefixed_key%0#0",
        "aggregate%extract%1#0"
      ]
    },
    "1948": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%extract%1#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1950": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "1951": {
      "op": "assert",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1952": {
      "op": "frame_dig -5",
      "defined_out": [
        "EntryGatingType#0 (copy)",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "EntryGatingType#0 (copy)"
      ]
    },
    "1954": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1955": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1957": {
      "op": "pushint 80 // 80",
      "defined_out": [
        "80",
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%0#0",
        "box_prefixed_key%0#0 (copy)",
        "80"
      ]
    },
    "1959": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "80",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1961": {
      "op": "box_replace",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1962": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1963": {
      "op": "pushint 88 // 88",
      "defined_out": [
        "88",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "88"
      ]
    },
    "1965": {
      "op": "frame_dig -4",
      "defined_out": [
        "88",
        "EntryGatingAddress#0 (copy)",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "88",
        "EntryGatingAddress#0 (copy)"
      ]
    },
    "1967": {
      "op": "box_replace",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1968": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1969": {
      "op": "pushint 120 // 120",
      "defined_out": [
        "120",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "120"
      ]
    },
    "1971": {
      "op": "frame_dig -3",
      "defined_out": [
        "120",
        "EntryGatingAssets#0 (copy)",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "120",
        "EntryGatingAssets#0 (copy)"
      ]
    },
    "1973": {
      "op": "box_replace",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1974": {
      "op": "frame_dig -2",
      "defined_out": [
        "GatingAssetMinBalance#0 (copy)",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "GatingAssetMinBalance#0 (copy)"
      ]
    },
    "1976": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%1#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1977": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%1#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "1979": {
      "op": "pushint 152 // 152",
      "defined_out": [
        "152",
        "aggregate%val_as_bytes%1#0",
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%1#0",
        "box_prefixed_key%0#0 (copy)",
        "152"
      ]
    },
    "1982": {
      "op": "uncover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)",
        "152",
        "aggregate%val_as_bytes%1#0"
      ]
    },
    "1984": {
      "op": "box_replace",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "1985": {
      "op": "frame_dig -1",
      "defined_out": [
        "RewardPerPayout#0 (copy)",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "RewardPerPayout#0 (copy)"
      ]
    },
    "1987": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%2#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "1988": {
      "op": "pushint 168 // 168"
    },
    "1991": {
      "op": "swap",
      "defined_out": [
        "168",
        "aggregate%val_as_bytes%2#0",
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "168",
        "aggregate%val_as_bytes%2#0"
      ]
    },
    "1992": {
      "op": "box_replace",
      "stack_out": []
    },
    "1993": {
      "retsub": true,
      "op": "retsub"
    },
    "1994": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.setTokenPayoutRatio",
      "params": {
        "validatorId#0": "uint64"
      },
      "block": "setTokenPayoutRatio",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1997": {
      "op": "intc 6 // 192",
      "defined_out": [
        "192"
      ],
      "stack_out": [
        "192"
      ]
    },
    "1999": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2000": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2001": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "2002": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "2003": {
      "retsub": true,
      "op": "retsub"
    }
  }
}
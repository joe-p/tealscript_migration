{
  "version": 3,
  "sources": [
    "/Users/joe/git/joe-p/tealscript_migration/smart_contracts/reti_validator_registry/validatorRegistry.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAiNE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAxKF;;;AAAA;AAwKE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAzHF;;;AAAA;AAyHE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAlHF;;;AAAA;AAkHE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAFA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAFA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAyGA;;;AAEoB;AAAA;AACE;AAFb;AAAA;AAAP;AAMF;;;AAEW;AAAA;AADT;AA8CF;;;AAEoB;AAAA;AACE;AAFb;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 192"
    },
    "7": {
      "op": "bytecblock 0x151f7c750000000000000000 0x151f7c75 0x151f7c75000000000000000000000000000000000000000000000000 0x151f7c750000 0x151f7c750000000000000000000000000000000000000000000000000000000000000000"
    },
    "100": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "102": {
      "op": "bz main_after_if_else@41",
      "stack_out": []
    },
    "105": {
      "op": "pushbytess 0x46f76533 0xb8447b36 0x1b5e82c6 0x79472d83 0x5f7acfd9 0x3172ca9d 0x8a87142d 0xd1366cc3 0x3b045c5c 0x3bab5c22 0x9a7c2248 0x2fa22c4b 0x772a7de4 0x572767d1 0x345485b9 0xfbc63178 0x24498cf4 0xf846dd7a 0x83050501 0x7bbb6c8d 0xf839414a 0x11d737ff 0x3e288972 0xdd5faada 0xdd43d7bf 0xf99ef54d 0xbf7fc7e3 0x3b889b84 0xb16b3b40 0x4df8d86e 0x418fcefc 0xa2dc51b5 0x2873f504 0x0547f4fe 0xcb668358 // method \"updateApplication()void\", method \"createApplication()void\", method \"initStakingContract(uint64)void\", method \"loadStakingContractData(uint64,byte[])void\", method \"finalizeStakingContract()void\", method \"gas()void\", method \"getMbrAmounts()(uint64,uint64,uint64,uint64)\", method \"getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)\", method \"getNumValidators()uint64\", method \"getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)\", method \"getValidatorState(uint64)(uint64,uint64,uint64,uint64)\", method \"getValidatorOwnerAndManager(uint64)(address,address)\", method \"getPools(uint64)(uint64,uint64,uint64)[]\", method \"getPoolAppId(uint64,uint64)uint64\", method \"getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)\", method \"getCurMaxStakePerPool(uint64)uint64\", method \"doesStakerNeedToPayMBR(address)bool\", method \"getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]\", method \"getTokenPayoutRatio(uint64)(uint64[24],uint64)\", method \"getNodePoolAssignments(uint64)((uint64[3])[8])\", method \"getNFDRegistryID()uint64\", method \"addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64\", method \"changeValidatorManager(uint64,address)void\", method \"changeValidatorSunsetInfo(uint64,uint64,uint64)void\", method \"changeValidatorNFD(uint64,uint64,byte[])void\", method \"changeValidatorCommissionAddress(uint64,address)void\", method \"changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void\", method \"addPool(uint64,uint64)(uint64,uint64,uint64)\", method \"addStake(uint64,uint64)(uint64,uint64,uint64)\", method \"setTokenPayoutRatio(uint64)(uint64[24],uint64)\", method \"stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void\", method \"stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void\", method \"findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)\", method \"movePoolToNode(uint64,uint64,uint64)void\", method \"emptyTokenRewards(uint64,address)uint64\"",
      "defined_out": [
        "Method(addPool(uint64,uint64)(uint64,uint64,uint64))",
        "Method(addStake(uint64,uint64)(uint64,uint64,uint64))",
        "Method(addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64)",
        "Method(changeValidatorCommissionAddress(uint64,address)void)",
        "Method(changeValidatorManager(uint64,address)void)",
        "Method(changeValidatorNFD(uint64,uint64,byte[])void)",
        "Method(changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void)",
        "Method(changeValidatorSunsetInfo(uint64,uint64,uint64)void)",
        "Method(createApplication()void)",
        "Method(doesStakerNeedToPayMBR(address)bool)",
        "Method(emptyTokenRewards(uint64,address)uint64)",
        "Method(finalizeStakingContract()void)",
        "Method(findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool))",
        "Method(gas()void)",
        "Method(getCurMaxStakePerPool(uint64)uint64)",
        "Method(getMbrAmounts()(uint64,uint64,uint64,uint64))",
        "Method(getNFDRegistryID()uint64)",
        "Method(getNodePoolAssignments(uint64)((uint64[3])[8]))",
        "Method(getNumValidators()uint64)",
        "Method(getPoolAppId(uint64,uint64)uint64)",
        "Method(getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64))",
        "Method(getPools(uint64)(uint64,uint64,uint64)[])",
        "Method(getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getStakedPoolsForAccount(address)(uint64,uint64,uint64)[])",
        "Method(getTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))",
        "Method(getValidatorOwnerAndManager(uint64)(address,address))",
        "Method(getValidatorState(uint64)(uint64,uint64,uint64,uint64))",
        "Method(initStakingContract(uint64)void)",
        "Method(loadStakingContractData(uint64,byte[])void)",
        "Method(movePoolToNode(uint64,uint64,uint64)void)",
        "Method(setTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void)",
        "Method(stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void)",
        "Method(updateApplication()void)"
      ],
      "stack_out": [
        "Method(updateApplication()void)",
        "Method(createApplication()void)",
        "Method(initStakingContract(uint64)void)",
        "Method(loadStakingContractData(uint64,byte[])void)",
        "Method(finalizeStakingContract()void)",
        "Method(gas()void)",
        "Method(getMbrAmounts()(uint64,uint64,uint64,uint64))",
        "Method(getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getNumValidators()uint64)",
        "Method(getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))",
        "Method(getValidatorState(uint64)(uint64,uint64,uint64,uint64))",
        "Method(getValidatorOwnerAndManager(uint64)(address,address))",
        "Method(getPools(uint64)(uint64,uint64,uint64)[])",
        "Method(getPoolAppId(uint64,uint64)uint64)",
        "Method(getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64))",
        "Method(getCurMaxStakePerPool(uint64)uint64)",
        "Method(doesStakerNeedToPayMBR(address)bool)",
        "Method(getStakedPoolsForAccount(address)(uint64,uint64,uint64)[])",
        "Method(getTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(getNodePoolAssignments(uint64)((uint64[3])[8]))",
        "Method(getNFDRegistryID()uint64)",
        "Method(addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64)",
        "Method(changeValidatorManager(uint64,address)void)",
        "Method(changeValidatorSunsetInfo(uint64,uint64,uint64)void)",
        "Method(changeValidatorNFD(uint64,uint64,byte[])void)",
        "Method(changeValidatorCommissionAddress(uint64,address)void)",
        "Method(changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void)",
        "Method(addPool(uint64,uint64)(uint64,uint64,uint64))",
        "Method(addStake(uint64,uint64)(uint64,uint64,uint64))",
        "Method(setTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void)",
        "Method(stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void)",
        "Method(findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool))",
        "Method(movePoolToNode(uint64,uint64,uint64)void)",
        "Method(emptyTokenRewards(uint64,address)uint64)"
      ]
    },
    "282": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addPool(uint64,uint64)(uint64,uint64,uint64))",
        "Method(addStake(uint64,uint64)(uint64,uint64,uint64))",
        "Method(addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64)",
        "Method(changeValidatorCommissionAddress(uint64,address)void)",
        "Method(changeValidatorManager(uint64,address)void)",
        "Method(changeValidatorNFD(uint64,uint64,byte[])void)",
        "Method(changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void)",
        "Method(changeValidatorSunsetInfo(uint64,uint64,uint64)void)",
        "Method(createApplication()void)",
        "Method(doesStakerNeedToPayMBR(address)bool)",
        "Method(emptyTokenRewards(uint64,address)uint64)",
        "Method(finalizeStakingContract()void)",
        "Method(findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool))",
        "Method(gas()void)",
        "Method(getCurMaxStakePerPool(uint64)uint64)",
        "Method(getMbrAmounts()(uint64,uint64,uint64,uint64))",
        "Method(getNFDRegistryID()uint64)",
        "Method(getNodePoolAssignments(uint64)((uint64[3])[8]))",
        "Method(getNumValidators()uint64)",
        "Method(getPoolAppId(uint64,uint64)uint64)",
        "Method(getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64))",
        "Method(getPools(uint64)(uint64,uint64,uint64)[])",
        "Method(getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getStakedPoolsForAccount(address)(uint64,uint64,uint64)[])",
        "Method(getTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))",
        "Method(getValidatorOwnerAndManager(uint64)(address,address))",
        "Method(getValidatorState(uint64)(uint64,uint64,uint64,uint64))",
        "Method(initStakingContract(uint64)void)",
        "Method(loadStakingContractData(uint64,byte[])void)",
        "Method(movePoolToNode(uint64,uint64,uint64)void)",
        "Method(setTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void)",
        "Method(stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void)",
        "Method(updateApplication()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(updateApplication()void)",
        "Method(createApplication()void)",
        "Method(initStakingContract(uint64)void)",
        "Method(loadStakingContractData(uint64,byte[])void)",
        "Method(finalizeStakingContract()void)",
        "Method(gas()void)",
        "Method(getMbrAmounts()(uint64,uint64,uint64,uint64))",
        "Method(getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getNumValidators()uint64)",
        "Method(getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))",
        "Method(getValidatorState(uint64)(uint64,uint64,uint64,uint64))",
        "Method(getValidatorOwnerAndManager(uint64)(address,address))",
        "Method(getPools(uint64)(uint64,uint64,uint64)[])",
        "Method(getPoolAppId(uint64,uint64)uint64)",
        "Method(getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64))",
        "Method(getCurMaxStakePerPool(uint64)uint64)",
        "Method(doesStakerNeedToPayMBR(address)bool)",
        "Method(getStakedPoolsForAccount(address)(uint64,uint64,uint64)[])",
        "Method(getTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(getNodePoolAssignments(uint64)((uint64[3])[8]))",
        "Method(getNFDRegistryID()uint64)",
        "Method(addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64)",
        "Method(changeValidatorManager(uint64,address)void)",
        "Method(changeValidatorSunsetInfo(uint64,uint64,uint64)void)",
        "Method(changeValidatorNFD(uint64,uint64,byte[])void)",
        "Method(changeValidatorCommissionAddress(uint64,address)void)",
        "Method(changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void)",
        "Method(addPool(uint64,uint64)(uint64,uint64,uint64))",
        "Method(addStake(uint64,uint64)(uint64,uint64,uint64))",
        "Method(setTokenPayoutRatio(uint64)(uint64[24],uint64))",
        "Method(stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void)",
        "Method(stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void)",
        "Method(findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool))",
        "Method(movePoolToNode(uint64,uint64,uint64)void)",
        "Method(emptyTokenRewards(uint64,address)uint64)",
        "tmp%2#0"
      ]
    },
    "285": {
      "op": "match main_updateApplication_route@3 main_createApplication_route@4 main_initStakingContract_route@5 main_loadStakingContractData_route@6 main_finalizeStakingContract_route@7 main_gas_route@8 main_getMbrAmounts_route@9 main_getProtocolConstraints_route@10 main_getNumValidators_route@11 main_getValidatorConfig_route@12 main_getValidatorState_route@13 main_getValidatorOwnerAndManager_route@14 main_getPools_route@15 main_getPoolAppId_route@16 main_getPoolInfo_route@17 main_getCurMaxStakePerPool_route@18 main_doesStakerNeedToPayMBR_route@19 main_getStakedPoolsForAccount_route@20 main_getTokenPayoutRatio_route@21 main_getNodePoolAssignments_route@22 main_getNFDRegistryID_route@23 main_addValidator_route@24 main_changeValidatorManager_route@25 main_changeValidatorSunsetInfo_route@26 main_changeValidatorNFD_route@27 main_changeValidatorCommissionAddress_route@28 main_changeValidatorRewardInfo_route@29 main_addPool_route@30 main_addStake_route@31 main_setTokenPayoutRatio_route@32 main_stakeUpdatedViaRewards_route@33 main_stakeRemoved_route@34 main_findPoolForStaker_route@35 main_movePoolToNode_route@36 main_emptyTokenRewards_route@37",
      "stack_out": []
    },
    "357": {
      "block": "main_after_if_else@41",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "358": {
      "op": "return",
      "stack_out": []
    },
    "359": {
      "block": "main_emptyTokenRewards_route@37",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%225#0"
      ],
      "stack_out": [
        "tmp%225#0"
      ]
    },
    "361": {
      "op": "!",
      "defined_out": [
        "tmp%226#0"
      ],
      "stack_out": [
        "tmp%226#0"
      ]
    },
    "362": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "363": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%227#0"
      ],
      "stack_out": [
        "tmp%227#0"
      ]
    },
    "365": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "366": {
      "op": "bytec_0 // 0x151f7c750000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000"
      ],
      "stack_out": [
        "0x151f7c750000000000000000"
      ]
    },
    "367": {
      "op": "log",
      "stack_out": []
    },
    "368": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "369": {
      "op": "return",
      "stack_out": []
    },
    "370": {
      "block": "main_movePoolToNode_route@36",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%218#0"
      ],
      "stack_out": [
        "tmp%218#0"
      ]
    },
    "372": {
      "op": "!",
      "defined_out": [
        "tmp%219#0"
      ],
      "stack_out": [
        "tmp%219#0"
      ]
    },
    "373": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "374": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%220#0"
      ],
      "stack_out": [
        "tmp%220#0"
      ]
    },
    "376": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "377": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "378": {
      "op": "return",
      "stack_out": []
    },
    "379": {
      "block": "main_findPoolForStaker_route@35",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%210#0"
      ],
      "stack_out": [
        "tmp%210#0"
      ]
    },
    "381": {
      "op": "!",
      "defined_out": [
        "tmp%211#0"
      ],
      "stack_out": [
        "tmp%211#0"
      ]
    },
    "382": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "383": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%212#0"
      ],
      "stack_out": [
        "tmp%212#0"
      ]
    },
    "385": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "386": {
      "op": "pushbytes 0x151f7c7500000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x151f7c7500000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x151f7c7500000000000000000000000000000000000000000000000000"
      ]
    },
    "417": {
      "op": "log",
      "stack_out": []
    },
    "418": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "419": {
      "op": "return",
      "stack_out": []
    },
    "420": {
      "block": "main_stakeRemoved_route@34",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%203#0"
      ],
      "stack_out": [
        "tmp%203#0"
      ]
    },
    "422": {
      "op": "!",
      "defined_out": [
        "tmp%204#0"
      ],
      "stack_out": [
        "tmp%204#0"
      ]
    },
    "423": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "424": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%205#0"
      ],
      "stack_out": [
        "tmp%205#0"
      ]
    },
    "426": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "427": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "428": {
      "op": "return",
      "stack_out": []
    },
    "429": {
      "block": "main_stakeUpdatedViaRewards_route@33",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%195#0"
      ],
      "stack_out": [
        "tmp%195#0"
      ]
    },
    "431": {
      "op": "!",
      "defined_out": [
        "tmp%196#0"
      ],
      "stack_out": [
        "tmp%196#0"
      ]
    },
    "432": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "433": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%197#0"
      ],
      "stack_out": [
        "tmp%197#0"
      ]
    },
    "435": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "436": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "437": {
      "op": "return",
      "stack_out": []
    },
    "438": {
      "block": "main_setTokenPayoutRatio_route@32",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%188#0"
      ],
      "stack_out": [
        "tmp%188#0"
      ]
    },
    "440": {
      "op": "!",
      "defined_out": [
        "tmp%189#0"
      ],
      "stack_out": [
        "tmp%189#0"
      ]
    },
    "441": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "442": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%190#0"
      ],
      "stack_out": [
        "tmp%190#0"
      ]
    },
    "444": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "445": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%26#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%26#0"
      ]
    },
    "448": {
      "op": "btoi",
      "defined_out": [
        "tmp%192#0"
      ],
      "stack_out": [
        "tmp%192#0"
      ]
    },
    "449": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.setTokenPayoutRatio",
      "op": "callsub setTokenPayoutRatio",
      "defined_out": [
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0"
      ]
    },
    "452": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%193#0"
      ],
      "stack_out": [
        "tmp%193#0",
        "0x151f7c75"
      ]
    },
    "453": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%193#0"
      ]
    },
    "454": {
      "op": "concat",
      "defined_out": [
        "tmp%194#0"
      ],
      "stack_out": [
        "tmp%194#0"
      ]
    },
    "455": {
      "op": "log",
      "stack_out": []
    },
    "456": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "457": {
      "op": "return",
      "stack_out": []
    },
    "458": {
      "block": "main_addStake_route@31",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%180#0"
      ],
      "stack_out": [
        "tmp%180#0"
      ]
    },
    "460": {
      "op": "!",
      "defined_out": [
        "tmp%181#0"
      ],
      "stack_out": [
        "tmp%181#0"
      ]
    },
    "461": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "462": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%182#0"
      ],
      "stack_out": [
        "tmp%182#0"
      ]
    },
    "464": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "465": {
      "op": "bytec_2 // 0x151f7c75000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x151f7c75000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x151f7c75000000000000000000000000000000000000000000000000"
      ]
    },
    "466": {
      "op": "log",
      "stack_out": []
    },
    "467": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "468": {
      "op": "return",
      "stack_out": []
    },
    "469": {
      "block": "main_addPool_route@30",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%172#0"
      ],
      "stack_out": [
        "tmp%172#0"
      ]
    },
    "471": {
      "op": "!",
      "defined_out": [
        "tmp%173#0"
      ],
      "stack_out": [
        "tmp%173#0"
      ]
    },
    "472": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "473": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%174#0"
      ],
      "stack_out": [
        "tmp%174#0"
      ]
    },
    "475": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "476": {
      "op": "bytec_2 // 0x151f7c75000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x151f7c75000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x151f7c75000000000000000000000000000000000000000000000000"
      ]
    },
    "477": {
      "op": "log",
      "stack_out": []
    },
    "478": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "479": {
      "op": "return",
      "stack_out": []
    },
    "480": {
      "block": "main_changeValidatorRewardInfo_route@29",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%164#0"
      ],
      "stack_out": [
        "tmp%164#0"
      ]
    },
    "482": {
      "op": "!",
      "defined_out": [
        "tmp%165#0"
      ],
      "stack_out": [
        "tmp%165#0"
      ]
    },
    "483": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "484": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%166#0"
      ],
      "stack_out": [
        "tmp%166#0"
      ]
    },
    "486": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "487": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "488": {
      "op": "return",
      "stack_out": []
    },
    "489": {
      "block": "main_changeValidatorCommissionAddress_route@28",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%159#0"
      ],
      "stack_out": [
        "tmp%159#0"
      ]
    },
    "491": {
      "op": "!",
      "defined_out": [
        "tmp%160#0"
      ],
      "stack_out": [
        "tmp%160#0"
      ]
    },
    "492": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "493": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%161#0"
      ],
      "stack_out": [
        "tmp%161#0"
      ]
    },
    "495": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "496": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "497": {
      "op": "return",
      "stack_out": []
    },
    "498": {
      "block": "main_changeValidatorNFD_route@27",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%153#0"
      ],
      "stack_out": [
        "tmp%153#0"
      ]
    },
    "500": {
      "op": "!",
      "defined_out": [
        "tmp%154#0"
      ],
      "stack_out": [
        "tmp%154#0"
      ]
    },
    "501": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "502": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%155#0"
      ],
      "stack_out": [
        "tmp%155#0"
      ]
    },
    "504": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "505": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "506": {
      "op": "return",
      "stack_out": []
    },
    "507": {
      "block": "main_changeValidatorSunsetInfo_route@26",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%146#0"
      ],
      "stack_out": [
        "tmp%146#0"
      ]
    },
    "509": {
      "op": "!",
      "defined_out": [
        "tmp%147#0"
      ],
      "stack_out": [
        "tmp%147#0"
      ]
    },
    "510": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "511": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%148#0"
      ],
      "stack_out": [
        "tmp%148#0"
      ]
    },
    "513": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "514": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "515": {
      "op": "return",
      "stack_out": []
    },
    "516": {
      "block": "main_changeValidatorManager_route@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%141#0"
      ],
      "stack_out": [
        "tmp%141#0"
      ]
    },
    "518": {
      "op": "!",
      "defined_out": [
        "tmp%142#0"
      ],
      "stack_out": [
        "tmp%142#0"
      ]
    },
    "519": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "520": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%143#0"
      ],
      "stack_out": [
        "tmp%143#0"
      ]
    },
    "522": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "523": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "524": {
      "op": "return",
      "stack_out": []
    },
    "525": {
      "block": "main_addValidator_route@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "527": {
      "op": "!",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "528": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "529": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "531": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "532": {
      "op": "bytec_0 // 0x151f7c750000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000"
      ],
      "stack_out": [
        "0x151f7c750000000000000000"
      ]
    },
    "533": {
      "op": "log",
      "stack_out": []
    },
    "534": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "535": {
      "op": "return",
      "stack_out": []
    },
    "536": {
      "block": "main_getNFDRegistryID_route@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "538": {
      "op": "!",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "539": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "540": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "542": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "543": {
      "op": "bytec_0 // 0x151f7c750000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000"
      ],
      "stack_out": [
        "0x151f7c750000000000000000"
      ]
    },
    "544": {
      "op": "log",
      "stack_out": []
    },
    "545": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "546": {
      "op": "return",
      "stack_out": []
    },
    "547": {
      "block": "main_getNodePoolAssignments_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "549": {
      "op": "!",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "550": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "551": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "553": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "554": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%10#0"
      ]
    },
    "557": {
      "op": "btoi",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "558": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getNodePoolAssignments",
      "op": "callsub getNodePoolAssignments",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "561": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0",
        "0x151f7c75"
      ]
    },
    "562": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%125#0"
      ]
    },
    "563": {
      "op": "concat",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "564": {
      "op": "log",
      "stack_out": []
    },
    "565": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "566": {
      "op": "return",
      "stack_out": []
    },
    "567": {
      "block": "main_getTokenPayoutRatio_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "569": {
      "op": "!",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "570": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "571": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "573": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "574": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%9#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%9#0"
      ]
    },
    "577": {
      "op": "btoi",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "578": {
      "callsub": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getTokenPayoutRatio",
      "op": "callsub getTokenPayoutRatio",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "581": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0",
        "0x151f7c75"
      ]
    },
    "582": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%118#0"
      ]
    },
    "583": {
      "op": "concat",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "584": {
      "op": "log",
      "stack_out": []
    },
    "585": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "586": {
      "op": "return",
      "stack_out": []
    },
    "587": {
      "block": "main_getStakedPoolsForAccount_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "589": {
      "op": "!",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "590": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "591": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "593": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "594": {
      "op": "bytec_3 // 0x151f7c750000",
      "defined_out": [
        "0x151f7c750000"
      ],
      "stack_out": [
        "0x151f7c750000"
      ]
    },
    "595": {
      "op": "log",
      "stack_out": []
    },
    "596": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "597": {
      "op": "return",
      "stack_out": []
    },
    "598": {
      "block": "main_doesStakerNeedToPayMBR_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "600": {
      "op": "!",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "601": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "602": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "604": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "605": {
      "op": "pushbytes 0x151f7c7500",
      "defined_out": [
        "0x151f7c7500"
      ],
      "stack_out": [
        "0x151f7c7500"
      ]
    },
    "612": {
      "op": "log",
      "stack_out": []
    },
    "613": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "614": {
      "op": "return",
      "stack_out": []
    },
    "615": {
      "block": "main_getCurMaxStakePerPool_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "617": {
      "op": "!",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "618": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "619": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "621": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "622": {
      "op": "bytec_0 // 0x151f7c750000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000"
      ],
      "stack_out": [
        "0x151f7c750000000000000000"
      ]
    },
    "623": {
      "op": "log",
      "stack_out": []
    },
    "624": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "625": {
      "op": "return",
      "stack_out": []
    },
    "626": {
      "block": "main_getPoolInfo_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "628": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "629": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "630": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "632": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "633": {
      "op": "bytec_2 // 0x151f7c75000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x151f7c75000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x151f7c75000000000000000000000000000000000000000000000000"
      ]
    },
    "634": {
      "op": "log",
      "stack_out": []
    },
    "635": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "636": {
      "op": "return",
      "stack_out": []
    },
    "637": {
      "block": "main_getPoolAppId_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "639": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "640": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "641": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "643": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "644": {
      "op": "bytec_0 // 0x151f7c750000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000"
      ],
      "stack_out": [
        "0x151f7c750000000000000000"
      ]
    },
    "645": {
      "op": "log",
      "stack_out": []
    },
    "646": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "647": {
      "op": "return",
      "stack_out": []
    },
    "648": {
      "block": "main_getPools_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "650": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "651": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "652": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "654": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "655": {
      "op": "bytec_3 // 0x151f7c750000",
      "defined_out": [
        "0x151f7c750000"
      ],
      "stack_out": [
        "0x151f7c750000"
      ]
    },
    "656": {
      "op": "log",
      "stack_out": []
    },
    "657": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "658": {
      "op": "return",
      "stack_out": []
    },
    "659": {
      "block": "main_getValidatorOwnerAndManager_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "661": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "662": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "663": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "665": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "666": {
      "op": "pushbytes base32(CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ],
      "stack_out": [
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "736": {
      "op": "log",
      "stack_out": []
    },
    "737": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "738": {
      "op": "return",
      "stack_out": []
    },
    "739": {
      "block": "main_getValidatorState_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "741": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "742": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "743": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "745": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "746": {
      "op": "bytec 4 // 0x151f7c750000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x151f7c750000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "748": {
      "op": "log",
      "stack_out": []
    },
    "749": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "750": {
      "op": "return",
      "stack_out": []
    },
    "751": {
      "block": "main_getValidatorConfig_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "753": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "754": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "755": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "757": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "758": {
      "op": "pushbytes base32(CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA)",
      "defined_out": [
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ],
      "stack_out": [
        "CUPXY5IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
      ]
    },
    "1029": {
      "op": "log",
      "stack_out": []
    },
    "1030": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1031": {
      "op": "return",
      "stack_out": []
    },
    "1032": {
      "block": "main_getNumValidators_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1034": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1035": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1036": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "1038": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1039": {
      "op": "bytec_0 // 0x151f7c750000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000"
      ],
      "stack_out": [
        "0x151f7c750000000000000000"
      ]
    },
    "1040": {
      "op": "log",
      "stack_out": []
    },
    "1041": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1042": {
      "op": "return",
      "stack_out": []
    },
    "1043": {
      "block": "main_getProtocolConstraints_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1045": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "1046": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1047": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "1049": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1050": {
      "op": "pushbytes 0x151f7c7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x151f7c7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x151f7c7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1144": {
      "op": "log",
      "stack_out": []
    },
    "1145": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1146": {
      "op": "return",
      "stack_out": []
    },
    "1147": {
      "block": "main_getMbrAmounts_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1149": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "1150": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1151": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1153": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1154": {
      "op": "bytec 4 // 0x151f7c750000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "0x151f7c750000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1156": {
      "op": "log",
      "stack_out": []
    },
    "1157": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1158": {
      "op": "return",
      "stack_out": []
    },
    "1159": {
      "block": "main_gas_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1161": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1162": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1163": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1165": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1166": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1167": {
      "op": "return",
      "stack_out": []
    },
    "1168": {
      "block": "main_finalizeStakingContract_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1170": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1171": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1172": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1174": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1175": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1176": {
      "op": "return",
      "stack_out": []
    },
    "1177": {
      "block": "main_loadStakingContractData_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1179": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1180": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1181": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1183": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1184": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1185": {
      "op": "return",
      "stack_out": []
    },
    "1186": {
      "block": "main_initStakingContract_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1188": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1189": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1190": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1192": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1193": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1194": {
      "op": "return",
      "stack_out": []
    },
    "1195": {
      "block": "main_createApplication_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1197": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1198": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1199": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1201": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1202": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1203": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1204": {
      "op": "return",
      "stack_out": []
    },
    "1205": {
      "block": "main_updateApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1207": {
      "op": "pushint 4 // UpdateApplication",
      "defined_out": [
        "UpdateApplication",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "UpdateApplication"
      ]
    },
    "1209": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1210": {
      "error": "OnCompletion is not UpdateApplication",
      "op": "assert // OnCompletion is not UpdateApplication",
      "stack_out": []
    },
    "1211": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1213": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1214": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1215": {
      "op": "return",
      "stack_out": []
    },
    "1216": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getTokenPayoutRatio",
      "params": {
        "validatorId#0": "uint64"
      },
      "block": "getTokenPayoutRatio",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1219": {
      "op": "intc_2 // 192",
      "defined_out": [
        "192"
      ],
      "stack_out": [
        "192"
      ]
    },
    "1220": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1221": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1222": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1223": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "1224": {
      "retsub": true,
      "op": "retsub"
    },
    "1225": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.getNodePoolAssignments",
      "params": {
        "validatorId#0": "uint64"
      },
      "block": "getNodePoolAssignments",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1228": {
      "op": "intc_2 // 192",
      "defined_out": [
        "192"
      ],
      "stack_out": [
        "192"
      ]
    },
    "1229": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1230": {
      "retsub": true,
      "op": "retsub"
    },
    "1231": {
      "subroutine": "smart_contracts/reti_validator_registry/validatorRegistry.algo.ts::ValidatorRegistry.setTokenPayoutRatio",
      "params": {
        "validatorId#0": "uint64"
      },
      "block": "setTokenPayoutRatio",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1234": {
      "op": "intc_2 // 192",
      "defined_out": [
        "192"
      ],
      "stack_out": [
        "192"
      ]
    },
    "1235": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1236": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1237": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "1238": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "1239": {
      "retsub": true,
      "op": "retsub"
    }
  }
}
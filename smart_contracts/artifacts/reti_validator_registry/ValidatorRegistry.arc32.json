{
    "hints": {
        "updateApplication()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "createApplication()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "initStakingContract(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "loadStakingContractData(uint64,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "finalizeStakingContract()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "gas()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getMbrAmounts()(uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "MbrAmounts",
                    "elements": [
                        [
                            "addValidatorMbr",
                            "uint64"
                        ],
                        [
                            "addPoolMbr",
                            "uint64"
                        ],
                        [
                            "poolInitMbr",
                            "uint64"
                        ],
                        [
                            "addStakerMbr",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Constraints",
                    "elements": [
                        [
                            "epochPayoutRoundsMin",
                            "uint64"
                        ],
                        [
                            "epochPayoutRoundsMax",
                            "uint64"
                        ],
                        [
                            "minPctToValidatorWFourDecimals",
                            "uint64"
                        ],
                        [
                            "maxPctToValidatorWFourDecimals",
                            "uint64"
                        ],
                        [
                            "minEntryStake",
                            "uint64"
                        ],
                        [
                            "maxAlgoPerPool",
                            "uint64"
                        ],
                        [
                            "maxAlgoPerValidator",
                            "uint64"
                        ],
                        [
                            "amtConsideredSaturated",
                            "uint64"
                        ],
                        [
                            "maxNodes",
                            "uint64"
                        ],
                        [
                            "maxPoolsPerNode",
                            "uint64"
                        ],
                        [
                            "maxStakersPerPool",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getNumValidators()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getValidatorConfig(uint64)(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ValidatorConfig",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "manager",
                            "address"
                        ],
                        [
                            "nfdForInfo",
                            "uint64"
                        ],
                        [
                            "entryGatingType",
                            "uint64"
                        ],
                        [
                            "entryGatingAddress",
                            "address"
                        ],
                        [
                            "entryGatingAssets",
                            "uint64[4]"
                        ],
                        [
                            "gatingAssetMinBalance",
                            "uint64"
                        ],
                        [
                            "rewardTokenId",
                            "uint64"
                        ],
                        [
                            "rewardPerPayout",
                            "uint64"
                        ],
                        [
                            "epochRoundLength",
                            "uint64"
                        ],
                        [
                            "percentToValidator",
                            "uint64"
                        ],
                        [
                            "validatorCommissionAddress",
                            "address"
                        ],
                        [
                            "minEntryStake",
                            "uint64"
                        ],
                        [
                            "maxAlgoPerPool",
                            "uint64"
                        ],
                        [
                            "poolsPerNode",
                            "uint64"
                        ],
                        [
                            "sunsettingOn",
                            "uint64"
                        ],
                        [
                            "sunsettingTo",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getValidatorState(uint64)(uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ValidatorCurState",
                    "elements": [
                        [
                            "numPools",
                            "uint64"
                        ],
                        [
                            "totalStakers",
                            "uint64"
                        ],
                        [
                            "totalAlgoStaked",
                            "uint64"
                        ],
                        [
                            "rewardTokenHeldBack",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getValidatorOwnerAndManager(uint64)(address,address)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPools(uint64)(uint64,uint64,uint64)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoolAppId(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoolInfo((uint64,uint64,uint64))(uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "poolKey": {
                    "name": "ValidatorPoolKey",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "poolId",
                            "uint64"
                        ],
                        [
                            "poolAppId",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "PoolInfo",
                    "elements": [
                        [
                            "poolAppId",
                            "uint64"
                        ],
                        [
                            "totalStakers",
                            "uint64"
                        ],
                        [
                            "totalAlgoStaked",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getCurMaxStakePerPool(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "doesStakerNeedToPayMBR(address)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTokenPayoutRatio(uint64)(uint64[24],uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PoolTokenPayoutRatio",
                    "elements": [
                        [
                            "poolPctOfWhole",
                            "uint64[24]"
                        ],
                        [
                            "updatedForPayout",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getNodePoolAssignments(uint64)((uint64[3])[8])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "NodePoolAssignmentConfig",
                    "elements": [
                        [
                            "nodes",
                            "(uint64[3])[8]"
                        ]
                    ]
                }
            }
        },
        "getNFDRegistryID()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addValidator(byte[],(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64))uint64": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "config": {
                    "name": "ValidatorConfig",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "manager",
                            "address"
                        ],
                        [
                            "nfdForInfo",
                            "uint64"
                        ],
                        [
                            "entryGatingType",
                            "uint64"
                        ],
                        [
                            "entryGatingAddress",
                            "address"
                        ],
                        [
                            "entryGatingAssets",
                            "uint64[4]"
                        ],
                        [
                            "gatingAssetMinBalance",
                            "uint64"
                        ],
                        [
                            "rewardTokenId",
                            "uint64"
                        ],
                        [
                            "rewardPerPayout",
                            "uint64"
                        ],
                        [
                            "epochRoundLength",
                            "uint64"
                        ],
                        [
                            "percentToValidator",
                            "uint64"
                        ],
                        [
                            "validatorCommissionAddress",
                            "address"
                        ],
                        [
                            "minEntryStake",
                            "uint64"
                        ],
                        [
                            "maxAlgoPerPool",
                            "uint64"
                        ],
                        [
                            "poolsPerNode",
                            "uint64"
                        ],
                        [
                            "sunsettingOn",
                            "uint64"
                        ],
                        [
                            "sunsettingTo",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "changeValidatorManager(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "changeValidatorSunsetInfo(uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "changeValidatorNFD(uint64,uint64,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "changeValidatorCommissionAddress(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "changeValidatorRewardInfo(uint64,uint64,address,uint64[4],uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addPool(uint64,uint64)(uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ValidatorPoolKey",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "poolId",
                            "uint64"
                        ],
                        [
                            "poolAppId",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "addStake(uint64,uint64)(uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ValidatorPoolKey",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "poolId",
                            "uint64"
                        ],
                        [
                            "poolAppId",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "setTokenPayoutRatio(uint64)(uint64[24],uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PoolTokenPayoutRatio",
                    "elements": [
                        [
                            "poolPctOfWhole",
                            "uint64[24]"
                        ],
                        [
                            "updatedForPayout",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "poolKey": {
                    "name": "ValidatorPoolKey",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "poolId",
                            "uint64"
                        ],
                        [
                            "poolAppId",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "poolKey": {
                    "name": "ValidatorPoolKey",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "poolId",
                            "uint64"
                        ],
                        [
                            "poolAppId",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "movePoolToNode(uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "emptyTokenRewards(uint64,address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "numStakers": {
                    "type": "uint64",
                    "key": "numStakers"
                },
                "numValidators": {
                    "type": "uint64",
                    "key": "numV"
                },
                "stakingPoolInitialized": {
                    "type": "uint64",
                    "key": "init"
                },
                "totalAlgoStaked": {
                    "type": "uint64",
                    "key": "staked"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ValidatorRegistry",
        "desc": "ValidatorRegistry is the 'master contract' for the reti pooling protocol.\nA single immutable instance of this is deployed.  All state for all validators including information about their\npools and nodes is stored via this contract in global state and box storage.  Data in the pools themselves is stored\nwithin the StakingPool contract instance, also in global state and box storage.\nSee the StakingPool contract comments for details on how this contract creates new instances of them.",
        "methods": [
            {
                "name": "updateApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "initStakingContract",
                "args": [
                    {
                        "type": "uint64",
                        "name": "approvalProgramSize"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "loadStakingContractData",
                "args": [
                    {
                        "type": "uint64",
                        "name": "offset"
                    },
                    {
                        "type": "byte[]",
                        "name": "data"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "finalizeStakingContract",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "gas",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getMbrAmounts",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "getProtocolConstraints",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "getNumValidators",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getValidatorConfig",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "getValidatorState",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "getValidatorOwnerAndManager",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(address,address)"
                }
            },
            {
                "name": "getPools",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)[]"
                }
            },
            {
                "name": "getPoolAppId",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "uint64",
                        "name": "poolId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getPoolInfo",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64)",
                        "name": "poolKey"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)"
                }
            },
            {
                "name": "getCurMaxStakePerPool",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "doesStakerNeedToPayMBR",
                "args": [
                    {
                        "type": "address",
                        "name": "staker"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "getStakedPoolsForAccount",
                "args": [
                    {
                        "type": "address",
                        "name": "staker"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)[]"
                }
            },
            {
                "name": "getTokenPayoutRatio",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64[24],uint64)"
                }
            },
            {
                "name": "getNodePoolAssignments",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "((uint64[3])[8])"
                }
            },
            {
                "name": "getNFDRegistryID",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "addValidator",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "nfdName"
                    },
                    {
                        "type": "(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)",
                        "name": "config"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "changeValidatorManager",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "address",
                        "name": "manager"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "changeValidatorSunsetInfo",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "uint64",
                        "name": "sunsettingOn"
                    },
                    {
                        "type": "uint64",
                        "name": "sunsettingTo"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "changeValidatorNFD",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "uint64",
                        "name": "nfdAppID"
                    },
                    {
                        "type": "byte[]",
                        "name": "nfdName"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "changeValidatorCommissionAddress",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "address",
                        "name": "commissionAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "changeValidatorRewardInfo",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "uint64",
                        "name": "EntryGatingType"
                    },
                    {
                        "type": "address",
                        "name": "EntryGatingAddress"
                    },
                    {
                        "type": "uint64[4]",
                        "name": "EntryGatingAssets"
                    },
                    {
                        "type": "uint64",
                        "name": "GatingAssetMinBalance"
                    },
                    {
                        "type": "uint64",
                        "name": "RewardPerPayout"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "addPool",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "uint64",
                        "name": "nodeNum"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)"
                }
            },
            {
                "name": "addStake",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "uint64",
                        "name": "valueToVerify"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)"
                }
            },
            {
                "name": "setTokenPayoutRatio",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64[24],uint64)"
                }
            },
            {
                "name": "stakeUpdatedViaRewards",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64)",
                        "name": "poolKey"
                    },
                    {
                        "type": "uint64",
                        "name": "algoToAdd"
                    },
                    {
                        "type": "uint64",
                        "name": "rewardTokenAmountReserved"
                    },
                    {
                        "type": "uint64",
                        "name": "validatorCommission"
                    },
                    {
                        "type": "uint64",
                        "name": "saturatedBurnToFeeSink"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "stakeRemoved",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64)",
                        "name": "poolKey"
                    },
                    {
                        "type": "address",
                        "name": "staker"
                    },
                    {
                        "type": "uint64",
                        "name": "amountRemoved"
                    },
                    {
                        "type": "uint64",
                        "name": "rewardRemoved"
                    },
                    {
                        "type": "bool",
                        "name": "stakerRemoved"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "findPoolForStaker",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "address",
                        "name": "staker"
                    },
                    {
                        "type": "uint64",
                        "name": "amountToStake"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "((uint64,uint64,uint64),bool,bool)"
                }
            },
            {
                "name": "movePoolToNode",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "uint64",
                        "name": "poolAppId"
                    },
                    {
                        "type": "uint64",
                        "name": "nodeNum"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "emptyTokenRewards",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "address",
                        "name": "receiver"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}
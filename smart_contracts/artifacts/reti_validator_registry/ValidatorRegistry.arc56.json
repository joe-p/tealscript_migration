{
    "name": "ValidatorRegistry",
    "structs": {
        "Constraints": [
            {
                "name": "epochPayoutRoundsMin",
                "type": "uint64"
            },
            {
                "name": "epochPayoutRoundsMax",
                "type": "uint64"
            },
            {
                "name": "minPctToValidatorWFourDecimals",
                "type": "uint64"
            },
            {
                "name": "maxPctToValidatorWFourDecimals",
                "type": "uint64"
            },
            {
                "name": "minEntryStake",
                "type": "uint64"
            },
            {
                "name": "maxAlgoPerPool",
                "type": "uint64"
            },
            {
                "name": "maxAlgoPerValidator",
                "type": "uint64"
            },
            {
                "name": "amtConsideredSaturated",
                "type": "uint64"
            },
            {
                "name": "maxNodes",
                "type": "uint64"
            },
            {
                "name": "maxPoolsPerNode",
                "type": "uint64"
            },
            {
                "name": "maxStakersPerPool",
                "type": "uint64"
            }
        ],
        "MbrAmounts": [
            {
                "name": "addValidatorMbr",
                "type": "uint64"
            },
            {
                "name": "addPoolMbr",
                "type": "uint64"
            },
            {
                "name": "poolInitMbr",
                "type": "uint64"
            },
            {
                "name": "addStakerMbr",
                "type": "uint64"
            }
        ],
        "NodePoolAssignmentConfig": [
            {
                "name": "nodes",
                "type": "(uint64[3])[8]"
            }
        ],
        "PoolInfo": [
            {
                "name": "poolAppId",
                "type": "uint64"
            },
            {
                "name": "totalStakers",
                "type": "uint64"
            },
            {
                "name": "totalAlgoStaked",
                "type": "uint64"
            }
        ],
        "PoolTokenPayoutRatio": [
            {
                "name": "poolPctOfWhole",
                "type": "uint64[24]"
            },
            {
                "name": "updatedForPayout",
                "type": "uint64"
            }
        ],
        "ValidatorConfig": [
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "owner",
                "type": "address"
            },
            {
                "name": "manager",
                "type": "address"
            },
            {
                "name": "nfdForInfo",
                "type": "uint64"
            },
            {
                "name": "entryGatingType",
                "type": "uint64"
            },
            {
                "name": "entryGatingAddress",
                "type": "address"
            },
            {
                "name": "entryGatingAssets",
                "type": "uint64[4]"
            },
            {
                "name": "gatingAssetMinBalance",
                "type": "uint64"
            },
            {
                "name": "rewardTokenId",
                "type": "uint64"
            },
            {
                "name": "rewardPerPayout",
                "type": "uint64"
            },
            {
                "name": "epochRoundLength",
                "type": "uint64"
            },
            {
                "name": "percentToValidator",
                "type": "uint64"
            },
            {
                "name": "validatorCommissionAddress",
                "type": "address"
            },
            {
                "name": "minEntryStake",
                "type": "uint64"
            },
            {
                "name": "maxAlgoPerPool",
                "type": "uint64"
            },
            {
                "name": "poolsPerNode",
                "type": "uint64"
            },
            {
                "name": "sunsettingOn",
                "type": "uint64"
            },
            {
                "name": "sunsettingTo",
                "type": "uint64"
            }
        ],
        "ValidatorCurState": [
            {
                "name": "numPools",
                "type": "uint64"
            },
            {
                "name": "totalStakers",
                "type": "uint64"
            },
            {
                "name": "totalAlgoStaked",
                "type": "uint64"
            },
            {
                "name": "rewardTokenHeldBack",
                "type": "uint64"
            }
        ],
        "ValidatorInfo": [
            {
                "name": "config",
                "type": "ValidatorConfig"
            },
            {
                "name": "state",
                "type": "ValidatorCurState"
            },
            {
                "name": "pools",
                "type": "(uint64,uint64,uint64)[24]"
            },
            {
                "name": "tokenPayoutRatio",
                "type": "PoolTokenPayoutRatio"
            },
            {
                "name": "nodePoolAssignments",
                "type": "NodePoolAssignmentConfig"
            }
        ],
        "ValidatorPoolKey": [
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "poolId",
                "type": "uint64"
            },
            {
                "name": "poolAppId",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "updateApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "initStakingContract",
            "args": [
                {
                    "type": "uint64",
                    "name": "approvalProgramSize"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "loadStakingContractData",
            "args": [
                {
                    "type": "uint64",
                    "name": "offset"
                },
                {
                    "type": "byte[]",
                    "name": "data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "finalizeStakingContract",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "gas",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getMbrAmounts",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)",
                "struct": "MbrAmounts"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getProtocolConstraints",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                "struct": "Constraints"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getNumValidators",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getValidatorConfig",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                }
            ],
            "returns": {
                "type": "(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)",
                "struct": "ValidatorConfig"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getValidatorState",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)",
                "struct": "ValidatorCurState"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getValidatorOwnerAndManager",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                }
            ],
            "returns": {
                "type": "(address,address)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPools",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPoolAppId",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                },
                {
                    "type": "uint64",
                    "name": "poolId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPoolInfo",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "struct": "ValidatorPoolKey",
                    "name": "poolKey"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64)",
                "struct": "PoolInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getCurMaxStakePerPool",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "doesStakerNeedToPayMBR",
            "args": [
                {
                    "type": "address",
                    "name": "staker"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getStakedPoolsForAccount",
            "args": [
                {
                    "type": "address",
                    "name": "staker"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64)[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getTokenPayoutRatio",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                }
            ],
            "returns": {
                "type": "(uint64[24],uint64)",
                "struct": "PoolTokenPayoutRatio"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getNodePoolAssignments",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                }
            ],
            "returns": {
                "type": "((uint64[3])[8])",
                "struct": "NodePoolAssignmentConfig"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getNFDRegistryID",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addValidator",
            "args": [
                {
                    "type": "byte[]",
                    "name": "nfdName"
                },
                {
                    "type": "(uint64,address,address,uint64,uint64,address,uint64[4],uint64,uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64,uint64)",
                    "struct": "ValidatorConfig",
                    "name": "config"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "changeValidatorManager",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                },
                {
                    "type": "address",
                    "name": "manager"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "changeValidatorSunsetInfo",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                },
                {
                    "type": "uint64",
                    "name": "sunsettingOn"
                },
                {
                    "type": "uint64",
                    "name": "sunsettingTo"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "changeValidatorNFD",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                },
                {
                    "type": "uint64",
                    "name": "nfdAppID"
                },
                {
                    "type": "byte[]",
                    "name": "nfdName"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "changeValidatorCommissionAddress",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                },
                {
                    "type": "address",
                    "name": "commissionAddress"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "changeValidatorRewardInfo",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                },
                {
                    "type": "uint64",
                    "name": "EntryGatingType"
                },
                {
                    "type": "address",
                    "name": "EntryGatingAddress"
                },
                {
                    "type": "uint64[4]",
                    "name": "EntryGatingAssets"
                },
                {
                    "type": "uint64",
                    "name": "GatingAssetMinBalance"
                },
                {
                    "type": "uint64",
                    "name": "RewardPerPayout"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addPool",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                },
                {
                    "type": "uint64",
                    "name": "nodeNum"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64)",
                "struct": "ValidatorPoolKey"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addStake",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                },
                {
                    "type": "uint64",
                    "name": "valueToVerify"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64)",
                "struct": "ValidatorPoolKey"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setTokenPayoutRatio",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                }
            ],
            "returns": {
                "type": "(uint64[24],uint64)",
                "struct": "PoolTokenPayoutRatio"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "stakeUpdatedViaRewards",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "struct": "ValidatorPoolKey",
                    "name": "poolKey"
                },
                {
                    "type": "uint64",
                    "name": "algoToAdd"
                },
                {
                    "type": "uint64",
                    "name": "rewardTokenAmountReserved"
                },
                {
                    "type": "uint64",
                    "name": "validatorCommission"
                },
                {
                    "type": "uint64",
                    "name": "saturatedBurnToFeeSink"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "stakeRemoved",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "struct": "ValidatorPoolKey",
                    "name": "poolKey"
                },
                {
                    "type": "address",
                    "name": "staker"
                },
                {
                    "type": "uint64",
                    "name": "amountRemoved"
                },
                {
                    "type": "uint64",
                    "name": "rewardRemoved"
                },
                {
                    "type": "bool",
                    "name": "stakerRemoved"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "findPoolForStaker",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                },
                {
                    "type": "address",
                    "name": "staker"
                },
                {
                    "type": "uint64",
                    "name": "amountToStake"
                }
            ],
            "returns": {
                "type": "((uint64,uint64,uint64),bool,bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "movePoolToNode",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                },
                {
                    "type": "uint64",
                    "name": "poolAppId"
                },
                {
                    "type": "uint64",
                    "name": "nodeNum"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "emptyTokenRewards",
            "args": [
                {
                    "type": "uint64",
                    "name": "validatorId"
                },
                {
                    "type": "address",
                    "name": "receiver"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "ValidatorRegistry is the 'master contract' for the reti pooling protocol.\nA single immutable instance of this is deployed.  All state for all validators including information about their\npools and nodes is stored via this contract in global state and box storage.  Data in the pools themselves is stored\nwithin the StakingPool contract instance, also in global state and box storage.\nSee the StakingPool contract comments for details on how this contract creates new instances of them.",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "stakingPoolInitialized": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "aW5pdA=="
                },
                "numValidators": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bnVtVg=="
                },
                "numStakers": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bnVtU3Rha2Vycw=="
                },
                "totalAlgoStaked": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3Rha2Vk"
                }
            },
            "local": {},
            "box": {
                "stakingPoolApprovalProgram": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "cG9vbFRlbXBsYXRlQXBwcm92YWxCeXRlcw=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "validatorList": {
                    "keyType": "uint64",
                    "valueType": "ValidatorInfo",
                    "prefix": "dg=="
                },
                "stakerPoolSet": {
                    "keyType": "address",
                    "valueType": "(uint64,uint64,uint64)[6]",
                    "prefix": "c3Bz"
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        362,
                        373,
                        382,
                        423,
                        432,
                        441,
                        461,
                        472,
                        483,
                        492,
                        501,
                        510,
                        519,
                        528,
                        539,
                        550,
                        570,
                        590,
                        601,
                        618,
                        629,
                        640,
                        651,
                        662,
                        742,
                        754,
                        1035,
                        1046,
                        1150,
                        1162,
                        1171,
                        1180,
                        1189,
                        1198
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1210
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        1202
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        365,
                        376,
                        385,
                        426,
                        435,
                        444,
                        464,
                        475,
                        486,
                        495,
                        504,
                        513,
                        522,
                        531,
                        542,
                        553,
                        573,
                        593,
                        604,
                        621,
                        632,
                        643,
                        654,
                        665,
                        745,
                        757,
                        1038,
                        1049,
                        1153,
                        1165,
                        1174,
                        1183,
                        1192,
                        1213
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAQDAASYFDBUffHUAAAAAAAAAAAQVH3x1HBUffHUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGFR98dQAAJBUffHUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEbQQD8giMERvdlMwS4RHs2BBtegsYEeUctgwRfes/ZBDFyyp0EiocULQTRNmzDBDsEXFwEO6tcIgSafCJIBC+iLEsEdyp95ARXJ2fRBDRUhbkE+8YxeAQkSYz0BPhG3XoEgwUFAQR7u2yNBPg5QUoEEdc3/wQ+KIlyBN1fqtoE3UPXvwT5nvVNBL9/x+MEO4ibhASxaztABE342G4EQY/O/ASi3FG1BChz9QQEBUf0/gTLZoNYNhoAjiMDUANGAz0DNAMrAyIDFgKuAqMBigF+AS4BIwEYAQ0BAgDxAOYA0gC+ALMAqACfAJYAjQCEAHsAcABlAFEASAA/ABYADQACI0MxGRREMRhEKLAiQzEZFEQxGEQiQzEZFEQxGESAHRUffHUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsCJDMRkURDEYRCJDMRkURDEYRCJDMRkURDEYRDYaAReIAwspTFCwIkMxGRREMRhEKrAiQzEZFEQxGEQqsCJDMRkURDEYRCJDMRkURDEYRCJDMRkURDEYRCJDMRkURDEYRCJDMRkURDEYRCJDMRkURDEYRCiwIkMxGRREMRhEKLAiQzEZFEQxGEQ2GgEXiAKYKUxQsCJDMRkURDEYRDYaAReIAnspTFCwIkMxGRREMRhEK7AiQzEZFEQxGESABRUffHUAsCJDMRkURDEYRCiwIkMxGRREMRhEKrAiQzEZFEQxGEQosCJDMRkURDEYRCuwIkMxGRREMRhEgEQVH3x1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAiQzEZFEQxGEQnBLAiQzEZFEQxGESAjAIVH3x1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsCJDMRkURDEYRCiwIkMxGRREMRhEgFwVH3x1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAiQzEZFEQxGEQnBLAiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGEQiQzEZFEQxGBREIkMxGYEEEkQxGEQiQ4oBASSvIxZQiYoBASSviYoBASSvIxZQiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}
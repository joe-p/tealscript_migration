{
    "hints": {
        "updateApplication()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "createApplication(uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "gas()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "initStorage(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addStake(pay,address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "removeStake(address,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claimTokens()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getStakerInfo(address)(address,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "StakedInfo",
                    "elements": [
                        [
                            "account",
                            "address"
                        ],
                        [
                            "balance",
                            "uint64"
                        ],
                        [
                            "totalRewarded",
                            "uint64"
                        ],
                        [
                            "rewardTokenBalance",
                            "uint64"
                        ],
                        [
                            "entryRound",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "payTokenReward(address,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateAlgodVer(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "epochBalanceUpdate()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "goOffline()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "linkToNFD(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "poolKey": {
                    "name": "ValidatorPoolKey",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "poolId",
                            "uint64"
                        ],
                        [
                            "poolAppId",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "PoolTokenPayoutRatio",
                    "elements": [
                        [
                            "poolPctOfWhole",
                            "uint64[24]"
                        ],
                        [
                            "updatedForPayout",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 11
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "algodVer": {
                    "type": "bytes",
                    "key": "algodVer"
                },
                "binRoundStart": {
                    "type": "uint64",
                    "key": "binRoundStart"
                },
                "creatingValidatorContractAppId": {
                    "type": "uint64",
                    "key": "creatorApp"
                },
                "epochNumber": {
                    "type": "uint64",
                    "key": "epochNumber"
                },
                "lastPayout": {
                    "type": "uint64",
                    "key": "lastPayout"
                },
                "minEntryStake": {
                    "type": "uint64",
                    "key": "minEntryStake"
                },
                "numStakers": {
                    "type": "uint64",
                    "key": "numStakers"
                },
                "poolId": {
                    "type": "uint64",
                    "key": "poolId"
                },
                "rewardAccumulator": {
                    "type": "uint64",
                    "key": "rewardAccumulator"
                },
                "roundsPerDay": {
                    "type": "uint64",
                    "key": "roundsPerDay"
                },
                "stakeAccumulator": {
                    "type": "bytes",
                    "key": "stakeAccumulator"
                },
                "totalAlgoStaked": {
                    "type": "uint64",
                    "key": "staked"
                },
                "validatorId": {
                    "type": "uint64",
                    "key": "validatorId"
                },
                "weightedMovingAverage": {
                    "type": "bytes",
                    "key": "ewma"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "StakingPool",
        "desc": "StakingPool contract has a new instance deployed per staking pool added by any validator.  A single instance\nis initially immutably deployed, and the id of that instance is used as a construction parameter in the immutable\ninstance of the master ValidatorRegistry contract.  It then uses that StakingPool instance as a 'factory template'\nfor subsequent pool creations - using the on-chain bytecode of that deployed instance to create a new identical\ninstance.\n\nEach instance is explicitly 'linked' to the validator master via its creation parameters.  The validator master\ncontract only allows calls from staking pool contract instances that match data that only the validator master\nauthoritatively has (validator id X, pool Y - has to come from contract address of that pool).  Calls the pools\nvalidate coming from the validator are only allowed if it matches the validator id it was created with.",
        "methods": [
            {
                "name": "updateApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "uint64",
                        "name": "creatingContractId",
                        "desc": "- id of contract that constructed us - the validator application (single global instance)"
                    },
                    {
                        "type": "uint64",
                        "name": "validatorId",
                        "desc": "- id of validator we're a staking pool of"
                    },
                    {
                        "type": "uint64",
                        "name": "poolId",
                        "desc": "- which pool id are we"
                    },
                    {
                        "type": "uint64",
                        "name": "minEntryStake",
                        "desc": "- minimum amount to be in pool, but also minimum amount balance can't go below (without removing all!)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Initialize the staking pool w/ owner and manager, but can only be created by the validator contract."
            },
            {
                "name": "gas",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost"
            },
            {
                "name": "initStorage",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbrPayment",
                        "desc": "payment from caller which covers mbr increase of new staking pools' storage"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Called after we're created and then funded, so we can create our large stakers ledger storage\nCaller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost\nIf this is pool 1 AND the validator has specified a reward token, opt-in to that token\nso that the validator can seed the pool with future rewards of that token."
            },
            {
                "name": "addStake",
                "args": [
                    {
                        "type": "pay",
                        "name": "stakedAmountPayment",
                        "desc": "prior payment coming from validator contract to us on behalf of staker."
                    },
                    {
                        "type": "address",
                        "name": "staker",
                        "desc": "- The account adding new stake"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "new 'entry round' round number of stake add"
                },
                "desc": "Adds stake to the given account.\nCan ONLY be called by the validator contract that created us\nMust receive payment from the validator contract for amount being staked."
            },
            {
                "name": "removeStake",
                "args": [
                    {
                        "type": "address",
                        "name": "staker",
                        "desc": "- account to remove.  normally same as sender, but the validator owner or manager can also call\nthis to remove the specified staker explicitly. The removed stake MUST only go to the staker of course.  This is\nso a validator can shut down a poool and refund the stakers.  It can also be used to kick out stakers who no longer\nmeet the gating requirements (determined by the node daemon)."
                    },
                    {
                        "type": "uint64",
                        "name": "amountToUnstake",
                        "desc": "- The amount of stake to be removed.  Specify 0 to remove all stake."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in\nfull. Also notifies the validator contract for this pools validator of the staker / balance changes."
            },
            {
                "name": "claimTokens",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Claims all the available reward tokens a staker has available, sending their entire balance to the staker from\npool 1 (either directly, or via validator->pool1 to pay it out)\nAlso notifies the validator contract for this pools validator of the staker / balance changes."
            },
            {
                "name": "getStakerInfo",
                "args": [
                    {
                        "type": "address",
                        "name": "staker",
                        "desc": "- The address of the staker."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(address,uint64,uint64,uint64,uint64)",
                    "desc": "- The staked information for the given staker."
                },
                "desc": "Retrieves the staked information for a given staker."
            },
            {
                "name": "payTokenReward",
                "args": [
                    {
                        "type": "address",
                        "name": "staker",
                        "desc": "- the staker account to send rewards to"
                    },
                    {
                        "type": "uint64",
                        "name": "rewardToken",
                        "desc": "- id of reward token (to avoid re-entrancy in calling validator back to get id)"
                    },
                    {
                        "type": "uint64",
                        "name": "amountToSend",
                        "desc": "- amount to send the staker (there is significant trust here(!) - also why only validator can call us"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "[Internal protocol method] Remove a specified amount of 'community token' rewards for a staker.\nThis can ONLY be called by our validator and only if we're pool 1 - with the token.\nNote: this can also be called by validator as part of OWNER wanting to send the reward tokens\nsomewhere else (ie if they're sunsetting their validator and need the reward tokens back).\nIt's up to the validator to ensure that the balance in rewardTokenHeldBack is honored."
            },
            {
                "name": "updateAlgodVer",
                "args": [
                    {
                        "type": "string",
                        "name": "algodVer",
                        "desc": "- string representing the algorand node daemon version (reti node daemon composes its own meta version)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update the (honor system) algod version for the node associated to this pool.  The node management daemon\nshould compare its current nodes version to the version stored in global state, updating when different.\nThe reti node daemon composes its own version string using format:\n{major}.{minor}.{build} {branch} [{commit hash}],\nie: 3.22.0 rel/stable [6b508975]\n[ ONLY OWNER OR MANAGER CAN CALL ]"
            },
            {
                "name": "epochBalanceUpdate",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)\nstakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance\ncompounds over time and staker can remove that amount at will.\nThe validator is paid their percentage each epoch payout.\n\nNote: ANYONE can call this."
            },
            {
                "name": "goOnline",
                "args": [
                    {
                        "type": "pay",
                        "name": "feePayment",
                        "desc": "- payment to cover extra fee of going online if offline - or 0 if not renewal"
                    },
                    {
                        "type": "byte[]",
                        "name": "votePK",
                        "desc": "- The vote public key."
                    },
                    {
                        "type": "byte[]",
                        "name": "selectionPK",
                        "desc": "- The selection public key."
                    },
                    {
                        "type": "byte[]",
                        "name": "stateProofPK",
                        "desc": "- The state proof public key."
                    },
                    {
                        "type": "uint64",
                        "name": "voteFirst",
                        "desc": "- The first vote index."
                    },
                    {
                        "type": "uint64",
                        "name": "voteLast",
                        "desc": "- The last vote index."
                    },
                    {
                        "type": "uint64",
                        "name": "voteKeyDilution",
                        "desc": "- The vote key dilution value."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Registers a staking pool key online against a participation key.\n[ ONLY OWNER OR MANAGER CAN CALL ]"
            },
            {
                "name": "goOffline",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Marks a staking pool key OFFLINE.\n[ ONLY OWNER OR MANAGER CAN CALL ]"
            },
            {
                "name": "linkToNFD",
                "args": [
                    {
                        "type": "uint64",
                        "name": "nfdAppId"
                    },
                    {
                        "type": "string",
                        "name": "nfdName"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "proxiedSetTokenPayoutRatio",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64)",
                        "name": "poolKey",
                        "desc": "- ValidatorPoolKey tuple"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64[24],uint64)"
                },
                "desc": "proxiedSetTokenPayoutRatio is meant to be called by pools != 1 - calling US, pool #1\nWe need to verify that we are in fact being called by another of OUR pools (not us)\nand then we'll call the validator on their behalf to update the token payouts"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}
/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"StakingPool","structs":{"StakedInfo":[{"name":"account","type":"address"},{"name":"balance","type":"uint64"},{"name":"totalRewarded","type":"uint64"},{"name":"rewardTokenBalance","type":"uint64"},{"name":"entryRound","type":"uint64"}],"PoolTokenPayoutRatio":[{"name":"poolPctOfWhole","type":"uint64[24]"},{"name":"updatedForPayout","type":"uint64"}],"ValidatorPoolKey":[{"name":"id","type":"uint64"},{"name":"poolId","type":"uint64"},{"name":"poolAppId","type":"uint64"}]},"methods":[{"name":"updateApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]},"readonly":false,"events":[],"recommendations":{}},{"name":"createApplication","args":[{"type":"uint64","name":"creatingContractId","desc":"- id of contract that constructed us - the validator application (single global instance)"},{"type":"uint64","name":"validatorId","desc":"- id of validator we're a staking pool of"},{"type":"uint64","name":"poolId","desc":"- which pool id are we"},{"type":"uint64","name":"minEntryStake","desc":"- minimum amount to be in pool, but also minimum amount balance can't go below (without removing all!)"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.","events":[],"recommendations":{}},{"name":"gas","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"gas is a dummy no-op call that can be used to pool-up resource references and opcode cost","events":[],"recommendations":{}},{"name":"initStorage","args":[{"type":"pay","name":"mbrPayment","desc":"payment from caller which covers mbr increase of new staking pools' storage"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Called after we're created and then funded, so we can create our large stakers ledger storage\nCaller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost\nIf this is pool 1 AND the validator has specified a reward token, opt-in to that token\nso that the validator can seed the pool with future rewards of that token.","events":[],"recommendations":{}},{"name":"addStake","args":[{"type":"pay","name":"stakedAmountPayment","desc":"prior payment coming from validator contract to us on behalf of staker."},{"type":"address","name":"staker","desc":"- The account adding new stake"}],"returns":{"type":"uint64","desc":"new 'entry round' round number of stake add"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Adds stake to the given account.\nCan ONLY be called by the validator contract that created us\nMust receive payment from the validator contract for amount being staked.","events":[],"recommendations":{}},{"name":"removeStake","args":[{"type":"address","name":"staker","desc":"- account to remove.  normally same as sender, but the validator owner or manager can also call\nthis to remove the specified staker explicitly. The removed stake MUST only go to the staker of course.  This is\nso a validator can shut down a poool and refund the stakers.  It can also be used to kick out stakers who no longer\nmeet the gating requirements (determined by the node daemon)."},{"type":"uint64","name":"amountToUnstake","desc":"- The amount of stake to be removed.  Specify 0 to remove all stake."}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in\nfull. Also notifies the validator contract for this pools validator of the staker / balance changes.","events":[],"recommendations":{}},{"name":"claimTokens","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Claims all the available reward tokens a staker has available, sending their entire balance to the staker from\npool 1 (either directly, or via validator->pool1 to pay it out)\nAlso notifies the validator contract for this pools validator of the staker / balance changes.","events":[],"recommendations":{}},{"name":"getStakerInfo","args":[{"type":"address","name":"staker","desc":"- The address of the staker."}],"returns":{"type":"(address,uint64,uint64,uint64,uint64)","struct":"StakedInfo","desc":"- The staked information for the given staker."},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Retrieves the staked information for a given staker.","events":[],"recommendations":{}},{"name":"payTokenReward","args":[{"type":"address","name":"staker","desc":"- the staker account to send rewards to"},{"type":"uint64","name":"rewardToken","desc":"- id of reward token (to avoid re-entrancy in calling validator back to get id)"},{"type":"uint64","name":"amountToSend","desc":"- amount to send the staker (there is significant trust here(!) - also why only validator can call us"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"[Internal protocol method] Remove a specified amount of 'community token' rewards for a staker.\nThis can ONLY be called by our validator and only if we're pool 1 - with the token.\nNote: this can also be called by validator as part of OWNER wanting to send the reward tokens\nsomewhere else (ie if they're sunsetting their validator and need the reward tokens back).\nIt's up to the validator to ensure that the balance in rewardTokenHeldBack is honored.","events":[],"recommendations":{}},{"name":"updateAlgodVer","args":[{"type":"string","name":"algodVer","desc":"- string representing the algorand node daemon version (reti node daemon composes its own meta version)"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update the (honor system) algod version for the node associated to this pool.  The node management daemon\nshould compare its current nodes version to the version stored in global state, updating when different.\nThe reti node daemon composes its own version string using format:\n{major}.{minor}.{build} {branch} [{commit hash}],\nie: 3.22.0 rel/stable [6b508975]\n[ ONLY OWNER OR MANAGER CAN CALL ]","events":[],"recommendations":{}},{"name":"epochBalanceUpdate","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)\nstakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance\ncompounds over time and staker can remove that amount at will.\nThe validator is paid their percentage each epoch payout.\n\nNote: ANYONE can call this.","events":[],"recommendations":{}},{"name":"goOnline","args":[{"type":"pay","name":"feePayment","desc":"- payment to cover extra fee of going online if offline - or 0 if not renewal"},{"type":"byte[]","name":"votePK","desc":"- The vote public key."},{"type":"byte[]","name":"selectionPK","desc":"- The selection public key."},{"type":"byte[]","name":"stateProofPK","desc":"- The state proof public key."},{"type":"uint64","name":"voteFirst","desc":"- The first vote index."},{"type":"uint64","name":"voteLast","desc":"- The last vote index."},{"type":"uint64","name":"voteKeyDilution","desc":"- The vote key dilution value."}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Registers a staking pool key online against a participation key.\n[ ONLY OWNER OR MANAGER CAN CALL ]","events":[],"recommendations":{}},{"name":"goOffline","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Marks a staking pool key OFFLINE.\n[ ONLY OWNER OR MANAGER CAN CALL ]","events":[],"recommendations":{}},{"name":"linkToNFD","args":[{"type":"uint64","name":"nfdAppId"},{"type":"string","name":"nfdName"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"proxiedSetTokenPayoutRatio","args":[{"type":"(uint64,uint64,uint64)","struct":"ValidatorPoolKey","name":"poolKey","desc":"- ValidatorPoolKey tuple"}],"returns":{"type":"(uint64[24],uint64)","struct":"PoolTokenPayoutRatio"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"proxiedSetTokenPayoutRatio is meant to be called by pools != 1 - calling US, pool #1\nWe need to verify that we are in fact being called by another of OUR pools (not us)\nand then we'll call the validator on their behalf to update the token payouts","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"StakingPool contract has a new instance deployed per staking pool added by any validator.  A single instance\nis initially immutably deployed, and the id of that instance is used as a construction parameter in the immutable\ninstance of the master ValidatorRegistry contract.  It then uses that StakingPool instance as a 'factory template'\nfor subsequent pool creations - using the on-chain bytecode of that deployed instance to create a new identical\ninstance.\n\nEach instance is explicitly 'linked' to the validator master via its creation parameters.  The validator master\ncontract only allows calls from staking pool contract instances that match data that only the validator master\nauthoritatively has (validator id X, pool Y - has to come from contract address of that pool).  Calls the pools\nvalidate coming from the validator are only allowed if it matches the validator id it was created with.","networks":{},"state":{"schema":{"global":{"ints":11,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"creatingValidatorContractAppId":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y3JlYXRvckFwcA=="},"validatorId":{"keyType":"AVMString","valueType":"AVMUint64","key":"dmFsaWRhdG9ySWQ="},"poolId":{"keyType":"AVMString","valueType":"AVMUint64","key":"cG9vbElk"},"numStakers":{"keyType":"AVMString","valueType":"AVMUint64","key":"bnVtU3Rha2Vycw=="},"totalAlgoStaked":{"keyType":"AVMString","valueType":"AVMUint64","key":"c3Rha2Vk"},"minEntryStake":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWluRW50cnlTdGFrZQ=="},"lastPayout":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdFBheW91dA=="},"epochNumber":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZXBvY2hOdW1iZXI="},"algodVer":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWxnb2RWZXI="},"roundsPerDay":{"keyType":"AVMString","valueType":"AVMUint64","key":"cm91bmRzUGVyRGF5"},"binRoundStart":{"keyType":"AVMString","valueType":"AVMUint64","key":"YmluUm91bmRTdGFydA=="},"stakeAccumulator":{"keyType":"AVMString","valueType":"uint128","key":"c3Rha2VBY2N1bXVsYXRvcg=="},"rewardAccumulator":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmV3YXJkQWNjdW11bGF0b3I="},"weightedMovingAverage":{"keyType":"AVMString","valueType":"uint128","key":"ZXdtYQ=="}},"local":{},"box":{"stakers":{"keyType":"AVMString","valueType":"(address,uint64,uint64,uint64,uint64)[200]","key":"c3Rha2Vycw=="}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1039,1258,1712,1940,2686,3154],"errorMessage":"Box must have value"},{"pc":[808,1416,1811,2102,2238,2297,2351,3867,4060,4110,4153],"errorMessage":"Bytes has valid prefix"},{"pc":[1247],"errorMessage":"If staker is not sender in removeStake call, then sender MUST be owner or manager of validator"},{"pc":[1332],"errorMessage":"Insufficient balance"},{"pc":[119,138,160,172,224,236,254,277,296,308,327,357,379,388],"errorMessage":"OnCompletion is not NoOp"},{"pc":[419],"errorMessage":"OnCompletion is not UpdateApplication"},{"pc":[1161],"errorMessage":"Staking pool full"},{"pc":[667],"errorMessage":"Temporary: contract is upgradeable but only during testing and only from a development account"},{"pc":[2362,2373,3662,3666],"errorMessage":"account funded"},{"pc":[1265,1719,1947],"errorMessage":"account not found"},{"pc":[846,883,927,949,2000,2248,3905,4077],"errorMessage":"application exists"},{"pc":[856,968,3895],"errorMessage":"assert target is match for conditions"},{"pc":[4008],"errorMessage":"callee must be pool 1"},{"pc":[4021],"errorMessage":"caller must NOT be pool 1"},{"pc":[4000],"errorMessage":"caller must be part of same validator set!"},{"pc":[2042,3877,3913,3930],"errorMessage":"can only be called by owner or manager of validator"},{"pc":[392],"errorMessage":"can only call when creating"},{"pc":[122,141,163,175,227,239,257,280,299,311,330,360,382,422],"errorMessage":"can only call when not creating"},{"pc":[2013],"errorMessage":"can only claim token rewards from validator that has them"},{"pc":[2140],"errorMessage":"can't call epochBalanceUpdate in same epoch as prior call"},{"pc":[1482],"errorMessage":"cannot reduce balance below minimum allowed stake unless all is removed"},{"pc":[779,783,820,872,924,946,982,994,999,1008,1166,1217,1349,1377,1387,1391,1474,1527,1567,1572,1585,1606,1610,1615,1772,1782,1786,1853,1857,1862,1997,2007,2072,2076,2131,2153,2190,2200,2204,2253,2263,2267,2318,2322,2367,2487,2923,3024,3129,3447,3452,3461,3473,3504,3516,3520,3525,3825,3830,3902,3987,4005,4026,4119,4123,4191,4201,4229,4245,4291,4336,4360],"errorMessage":"check GlobalState exists"},{"pc":[2010],"errorMessage":"must be pool 1 in order to be called to pay out token rewards"},{"pc":[1170],"errorMessage":"must stake at least the minimum for this pool"},{"pc":[531,589,613,1025,1593,3491,4318],"errorMessage":"overflow"},{"pc":[929],"errorMessage":"stake can only be added via the validator contract"},{"pc":[774],"errorMessage":"staking pool already initialized"},{"pc":[918],"errorMessage":"staking pool must be initialized first"},{"pc":[690],"errorMessage":"staking pool must have minimum entry of 1 algo"},{"pc":[2002],"errorMessage":"this can only be called via the validator contract"},{"pc":[185,340,370],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"cblocks"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDY0IDYgMjAwIDMwODU3IDE1NyAzMDAgMjEwMDAwMCAxMDAwMDAwIFRNUExfTkZEX1JFR0lTVFJZX0FQUF9JRAogICAgYnl0ZWNibG9jayAic3Rha2VycyIgImNyZWF0b3JBcHAiIDB4MTUxZjdjNzUgInZhbGlkYXRvcklkIiAicG9vbElkIiAic3Rha2VkIiAic3Rha2VBY2N1bXVsYXRvciIgInJvdW5kc1BlckRheSIgMHgwMDAyICJiaW5Sb3VuZFN0YXJ0IiAibnVtU3Rha2VycyIgInJld2FyZEFjY3VtdWxhdG9yIiAibGFzdFBheW91dCIgMHg3NWFmZjYxZCAibWluRW50cnlTdGFrZSIgImVwb2NoTnVtYmVyIiAiZXdtYSIgMHgwMDAxIDB4NjQgMHgwYzIyNDVlMSAweDA2ODEwMSAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAgMHhhMmRjNTFiNSAweDU3Mjc2N2QxIDB4NGRmOGQ4NmUgMHgwMDAxMDAwMDAwMDAwMDBmNDI0MCAweDAwMDMgVE1QTF9GRUVfU0lOS19BRERSCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYxCiAgICAvLyBleHBvcnQgY2xhc3MgU3Rha2luZ1Bvb2wgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9hZnRlcl9pZl9lbHNlQDIxCiAgICBwdXNoYnl0ZXNzIDB4NDZmNzY1MzMgMHg1OWU5MGFhNiAweDMxNzJjYTlkIDB4NDdjZmNjMDQgMHhmOWM3MGNiZCAweDQyMWI1YWJlIDB4ZjU4OTJkNTYgMHg1Y2ZiYjA1NyAweDYzZjNmMjhiIDB4ODZhMzcyNWMgMHhlZmMyNjA4ZCAweDQwMGUxNGZiIDB4NTFlZjNiMjEgMHhhMjRlMjcxNyAvLyBtZXRob2QgInVwZGF0ZUFwcGxpY2F0aW9uKCl2b2lkIiwgbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIsIG1ldGhvZCAiZ2FzKCl2b2lkIiwgbWV0aG9kICJpbml0U3RvcmFnZShwYXkpdm9pZCIsIG1ldGhvZCAiYWRkU3Rha2UocGF5LGFkZHJlc3MpdWludDY0IiwgbWV0aG9kICJyZW1vdmVTdGFrZShhZGRyZXNzLHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJjbGFpbVRva2Vucygpdm9pZCIsIG1ldGhvZCAiZ2V0U3Rha2VySW5mbyhhZGRyZXNzKShhZGRyZXNzLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkiLCBtZXRob2QgInBheVRva2VuUmV3YXJkKGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJ1cGRhdGVBbGdvZFZlcihzdHJpbmcpdm9pZCIsIG1ldGhvZCAiZXBvY2hCYWxhbmNlVXBkYXRlKCl2b2lkIiwgbWV0aG9kICJnb09ubGluZShwYXksYnl0ZVtdLGJ5dGVbXSxieXRlW10sdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIsIG1ldGhvZCAiZ29PZmZsaW5lKCl2b2lkIiwgbWV0aG9kICJsaW5rVG9ORkQodWludDY0LHN0cmluZyl2b2lkIgogICAgYnl0ZWMgMTkgLy8gbWV0aG9kICJwcm94aWVkU2V0VG9rZW5QYXlvdXRSYXRpbygodWludDY0LHVpbnQ2NCx1aW50NjQpKSh1aW50NjRbMjRdLHVpbnQ2NCkiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3VwZGF0ZUFwcGxpY2F0aW9uX3JvdXRlQDMgbWFpbl9jcmVhdGVBcHBsaWNhdGlvbl9yb3V0ZUA0IG1haW5fZ2FzX3JvdXRlQDUgbWFpbl9pbml0U3RvcmFnZV9yb3V0ZUA2IG1haW5fYWRkU3Rha2Vfcm91dGVANyBtYWluX3JlbW92ZVN0YWtlX3JvdXRlQDggbWFpbl9jbGFpbVRva2Vuc19yb3V0ZUA5IG1haW5fZ2V0U3Rha2VySW5mb19yb3V0ZUAxMCBtYWluX3BheVRva2VuUmV3YXJkX3JvdXRlQDExIG1haW5fdXBkYXRlQWxnb2RWZXJfcm91dGVAMTIgbWFpbl9lcG9jaEJhbGFuY2VVcGRhdGVfcm91dGVAMTMgbWFpbl9nb09ubGluZV9yb3V0ZUAxNCBtYWluX2dvT2ZmbGluZV9yb3V0ZUAxNSBtYWluX2xpbmtUb05GRF9yb3V0ZUAxNiBtYWluX3Byb3hpZWRTZXRUb2tlblBheW91dFJhdGlvX3JvdXRlQDE3CgptYWluX2FmdGVyX2lmX2Vsc2VAMjE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYxCiAgICAvLyBleHBvcnQgY2xhc3MgU3Rha2luZ1Bvb2wgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX3Byb3hpZWRTZXRUb2tlblBheW91dFJhdGlvX3JvdXRlQDE3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5NjYKICAgIC8vIHByb3hpZWRTZXRUb2tlblBheW91dFJhdGlvKHBvb2xLZXk6IFZhbGlkYXRvclBvb2xLZXkpOiBQb29sVG9rZW5QYXlvdXRSYXRpbyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjEKICAgIC8vIGV4cG9ydCBjbGFzcyBTdGFraW5nUG9vbCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTY2CiAgICAvLyBwcm94aWVkU2V0VG9rZW5QYXlvdXRSYXRpbyhwb29sS2V5OiBWYWxpZGF0b3JQb29sS2V5KTogUG9vbFRva2VuUGF5b3V0UmF0aW8gewogICAgY2FsbHN1YiBwcm94aWVkU2V0VG9rZW5QYXlvdXRSYXRpbwogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9saW5rVG9ORkRfcm91dGVAMTY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk0MwogICAgLy8gbGlua1RvTkZEKG5mZEFwcElkOiB1aW50NjQsIG5mZE5hbWU6IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYxCiAgICAvLyBleHBvcnQgY2xhc3MgU3Rha2luZ1Bvb2wgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5NDMKICAgIC8vIGxpbmtUb05GRChuZmRBcHBJZDogdWludDY0LCBuZmROYW1lOiBzdHJpbmcpOiB2b2lkIHsKICAgIGNhbGxzdWIgbGlua1RvTkZECiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dvT2ZmbGluZV9yb3V0ZUAxNToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTMwCiAgICAvLyBnb09mZmxpbmUoKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZ29PZmZsaW5lCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dvT25saW5lX3JvdXRlQDE0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MDEtOTA5CiAgICAvLyBnb09ubGluZSgKICAgIC8vICAgZmVlUGF5bWVudDogZ3R4bi5QYXltZW50VHhuLAogICAgLy8gICB2b3RlUEs6IGJ5dGVzLAogICAgLy8gICBzZWxlY3Rpb25QSzogYnl0ZXMsCiAgICAvLyAgIHN0YXRlUHJvb2ZQSzogYnl0ZXMsCiAgICAvLyAgIHZvdGVGaXJzdDogdWludDY0LAogICAgLy8gICB2b3RlTGFzdDogdWludDY0LAogICAgLy8gICB2b3RlS2V5RGlsdXRpb246IHVpbnQ2NCwKICAgIC8vICk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYxCiAgICAvLyBleHBvcnQgY2xhc3MgU3Rha2luZ1Bvb2wgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMSAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDUKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDYKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTAxLTkwOQogICAgLy8gZ29PbmxpbmUoCiAgICAvLyAgIGZlZVBheW1lbnQ6IGd0eG4uUGF5bWVudFR4biwKICAgIC8vICAgdm90ZVBLOiBieXRlcywKICAgIC8vICAgc2VsZWN0aW9uUEs6IGJ5dGVzLAogICAgLy8gICBzdGF0ZVByb29mUEs6IGJ5dGVzLAogICAgLy8gICB2b3RlRmlyc3Q6IHVpbnQ2NCwKICAgIC8vICAgdm90ZUxhc3Q6IHVpbnQ2NCwKICAgIC8vICAgdm90ZUtleURpbHV0aW9uOiB1aW50NjQsCiAgICAvLyApOiB2b2lkIHsKICAgIGNhbGxzdWIgZ29PbmxpbmUKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZXBvY2hCYWxhbmNlVXBkYXRlX3JvdXRlQDEzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1NDMKICAgIC8vIGVwb2NoQmFsYW5jZVVwZGF0ZSgpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBlcG9jaEJhbGFuY2VVcGRhdGUKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlQWxnb2RWZXJfcm91dGVAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjUzMAogICAgLy8gdXBkYXRlQWxnb2RWZXIoYWxnb2RWZXI6IHN0cmluZyk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYxCiAgICAvLyBleHBvcnQgY2xhc3MgU3Rha2luZ1Bvb2wgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1MzAKICAgIC8vIHVwZGF0ZUFsZ29kVmVyKGFsZ29kVmVyOiBzdHJpbmcpOiB2b2lkIHsKICAgIGNhbGxzdWIgdXBkYXRlQWxnb2RWZXIKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fcGF5VG9rZW5SZXdhcmRfcm91dGVAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjUwMgogICAgLy8gcGF5VG9rZW5SZXdhcmQoc3Rha2VyOiBBZGRyZXNzLCByZXdhcmRUb2tlbjogdWludDY0LCBhbW91bnRUb1NlbmQ6IHVpbnQ2NCk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYxCiAgICAvLyBleHBvcnQgY2xhc3MgU3Rha2luZ1Bvb2wgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjUwMgogICAgLy8gcGF5VG9rZW5SZXdhcmQoc3Rha2VyOiBBZGRyZXNzLCByZXdhcmRUb2tlbjogdWludDY0LCBhbW91bnRUb1NlbmQ6IHVpbnQ2NCk6IHZvaWQgewogICAgY2FsbHN1YiBwYXlUb2tlblJld2FyZAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRTdGFrZXJJbmZvX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0ODIKICAgIC8vIGdldFN0YWtlckluZm8oc3Rha2VyOiBBZGRyZXNzKTogU3Rha2VkSW5mbyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjEKICAgIC8vIGV4cG9ydCBjbGFzcyBTdGFraW5nUG9vbCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDgyCiAgICAvLyBnZXRTdGFrZXJJbmZvKHN0YWtlcjogQWRkcmVzcyk6IFN0YWtlZEluZm8gewogICAgY2FsbHN1YiBnZXRTdGFrZXJJbmZvCiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2NsYWltVG9rZW5zX3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQxMgogICAgLy8gY2xhaW1Ub2tlbnMoKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgY2xhaW1Ub2tlbnMKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fcmVtb3ZlU3Rha2Vfcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mjk4CiAgICAvLyByZW1vdmVTdGFrZShzdGFrZXI6IEFkZHJlc3MsIGFtb3VudFRvVW5zdGFrZTogdWludDY0KTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjEKICAgIC8vIGV4cG9ydCBjbGFzcyBTdGFraW5nUG9vbCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mjk4CiAgICAvLyByZW1vdmVTdGFrZShzdGFrZXI6IEFkZHJlc3MsIGFtb3VudFRvVW5zdGFrZTogdWludDY0KTogdm9pZCB7CiAgICBjYWxsc3ViIHJlbW92ZVN0YWtlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FkZFN0YWtlX3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjIxMQogICAgLy8gYWRkU3Rha2Uoc3Rha2VkQW1vdW50UGF5bWVudDogZ3R4bi5QYXltZW50VHhuLCBzdGFrZXI6IEFkZHJlc3MpOiB1aW50NjQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYxCiAgICAvLyBleHBvcnQgY2xhc3MgU3Rha2luZ1Bvb2wgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMSAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjExCiAgICAvLyBhZGRTdGFrZShzdGFrZWRBbW91bnRQYXltZW50OiBndHhuLlBheW1lbnRUeG4sIHN0YWtlcjogQWRkcmVzcyk6IHVpbnQ2NCB7CiAgICBjYWxsc3ViIGFkZFN0YWtlCiAgICBpdG9iCiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2luaXRTdG9yYWdlX3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjE2OQogICAgLy8gaW5pdFN0b3JhZ2UobWJyUGF5bWVudDogZ3R4bi5QYXltZW50VHhuKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjEKICAgIC8vIGV4cG9ydCBjbGFzcyBTdGFraW5nUG9vbCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18xIC8vIHBheQogICAgPT0KICAgIGFzc2VydCAvLyB0cmFuc2FjdGlvbiB0eXBlIGlzIHBheQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxNjkKICAgIC8vIGluaXRTdG9yYWdlKG1iclBheW1lbnQ6IGd0eG4uUGF5bWVudFR4bik6IHZvaWQgewogICAgY2FsbHN1YiBpbml0U3RvcmFnZQogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nYXNfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTUzCiAgICAvLyBnYXMoKTogdm9pZCB7fQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZUFwcGxpY2F0aW9uX3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEyNAogICAgLy8gY3JlYXRlQXBwbGljYXRpb24oY3JlYXRpbmdDb250cmFjdElkOiB1aW50NjQsIHZhbGlkYXRvcklkOiB1aW50NjQsIHBvb2xJZDogdWludDY0LCBtaW5FbnRyeVN0YWtlOiB1aW50NjQpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYxCiAgICAvLyBleHBvcnQgY2xhc3MgU3Rha2luZ1Bvb2wgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEyNAogICAgLy8gY3JlYXRlQXBwbGljYXRpb24oY3JlYXRpbmdDb250cmFjdElkOiB1aW50NjQsIHZhbGlkYXRvcklkOiB1aW50NjQsIHBvb2xJZDogdWludDY0LCBtaW5FbnRyeVN0YWtlOiB1aW50NjQpOiB2b2lkIHsKICAgIGNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlQXBwbGljYXRpb25fcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTEwCiAgICAvLyB1cGRhdGVBcHBsaWNhdGlvbigpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIHB1c2hpbnQgNCAvLyBVcGRhdGVBcHBsaWNhdGlvbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IFVwZGF0ZUFwcGxpY2F0aW9uCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgdXBkYXRlQXBwbGljYXRpb24KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBfcHV5YV9saWIudXRpbC5lbnN1cmVfYnVkZ2V0KHJlcXVpcmVkX2J1ZGdldDogdWludDY0LCBmZWVfc291cmNlOiB1aW50NjQpIC0+IHZvaWQ6CmVuc3VyZV9idWRnZXQ6CiAgICBwcm90byAyIDAKICAgIGZyYW1lX2RpZyAtMgogICAgcHVzaGludCAxMCAvLyAxMAogICAgKwoKZW5zdXJlX2J1ZGdldF93aGlsZV90b3BAMToKICAgIGZyYW1lX2RpZyAwCiAgICBnbG9iYWwgT3Bjb2RlQnVkZ2V0CiAgICA+CiAgICBieiBlbnN1cmVfYnVkZ2V0X2FmdGVyX3doaWxlQDcKICAgIGl0eG5fYmVnaW4KICAgIGludGNfMyAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBieXRlYyAyMCAvLyAweDA2ODEwMQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW0KICAgIGJ5dGVjIDIwIC8vIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCiAgICBmcmFtZV9kaWcgLTEKICAgIHN3aXRjaCBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzBAMyBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzFANAoKZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV9uZXh0QDY6CiAgICBpdHhuX3N1Ym1pdAogICAgYiBlbnN1cmVfYnVkZ2V0X3doaWxlX3RvcEAxCgplbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzFANDoKICAgIGdsb2JhbCBNaW5UeG5GZWUKICAgIGl0eG5fZmllbGQgRmVlCiAgICBiIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2CgplbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzBAMzoKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgYiBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlX25leHRANgoKZW5zdXJlX2J1ZGdldF9hZnRlcl93aGlsZUA3OgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3JldGkvdXRpbHMuYWxnby50czo6d2lkZVJhdGlvKG51bWVyYXRvckZhY3RvcnM6IGJ5dGVzLCBkZW5vbWluYXRvckZhY3RvcnM6IGJ5dGVzKSAtPiB1aW50NjQsIGJ5dGVzLCBieXRlczoKd2lkZVJhdGlvOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvdXRpbHMuYWxnby50czo0CiAgICAvLyBleHBvcnQgZnVuY3Rpb24gd2lkZVJhdGlvKG51bWVyYXRvckZhY3RvcnM6IHVpbnQ2NFtdLCBkZW5vbWluYXRvckZhY3RvcnM6IHVpbnQ2NFtdKTogdWludDY0IHsKICAgIHByb3RvIDIgMwogICAgaW50Y18wIC8vIDAKICAgIHB1c2hieXRlcyAiIgogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS91dGlscy5hbGdvLnRzOjUKICAgIC8vIGxldCBudW1lcmF0b3IgPSBuZXcgVWludDEyOCgxbikKICAgIGJ5dGVjIDIxIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3V0aWxzLmFsZ28udHM6NwogICAgLy8gZm9yIChjb25zdCBmYWN0b3Igb2YgbnVtZXJhdG9yRmFjdG9ycykgewogICAgZnJhbWVfZGlnIC0yCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGludGNfMCAvLyAwCgp3aWRlUmF0aW9fZm9yX2hlYWRlckAxOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvdXRpbHMuYWxnby50czo3CiAgICAvLyBmb3IgKGNvbnN0IGZhY3RvciBvZiBudW1lcmF0b3JGYWN0b3JzKSB7CiAgICBmcmFtZV9kaWcgNQogICAgZnJhbWVfZGlnIDQKICAgIDwKICAgIGJ6IHdpZGVSYXRpb19hZnRlcl9mb3JANAogICAgZnJhbWVfZGlnIC0yCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDUKICAgIGR1cAogICAgY292ZXIgMgogICAgcHVzaGludCA4IC8vIDgKICAgICoKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS91dGlscy5hbGdvLnRzOjgKICAgIC8vIG51bWVyYXRvciA9IG5ldyBVaW50MTI4KEJpZ1VpbnQoZmFjdG9yKSAqIG51bWVyYXRvci5uYXRpdmUpCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgMwogICAgYioKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBiemVybwogICAgYnwKICAgIGZyYW1lX2J1cnkgMwogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgNQogICAgYiB3aWRlUmF0aW9fZm9yX2hlYWRlckAxCgp3aWRlUmF0aW9fYWZ0ZXJfZm9yQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS91dGlscy5hbGdvLnRzOjExCiAgICAvLyBsZXQgZGVub21pbmF0b3IgPSBuZXcgVWludDEyOCgxbikKICAgIGJ5dGVjIDIxIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvdXRpbHMuYWxnby50czoxMgogICAgLy8gZm9yIChjb25zdCBmYWN0b3Igb2YgZGVub21pbmF0b3JGYWN0b3JzKSB7CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZnJhbWVfYnVyeSAxCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAyCgp3aWRlUmF0aW9fZm9yX2hlYWRlckA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvdXRpbHMuYWxnby50czoxMgogICAgLy8gZm9yIChjb25zdCBmYWN0b3Igb2YgZGVub21pbmF0b3JGYWN0b3JzKSB7CiAgICBmcmFtZV9kaWcgMgogICAgZnJhbWVfZGlnIDEKICAgIDwKICAgIGJ6IHdpZGVSYXRpb19hZnRlcl9mb3JAOAogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDIKICAgIGR1cAogICAgY292ZXIgMgogICAgcHVzaGludCA4IC8vIDgKICAgICoKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS91dGlscy5hbGdvLnRzOjEzCiAgICAvLyBkZW5vbWluYXRvciA9IG5ldyBVaW50MTI4KEJpZ1VpbnQoZmFjdG9yKSAqIGRlbm9taW5hdG9yLm5hdGl2ZSkKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAwCiAgICBiKgogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIGJ6ZXJvCiAgICBifAogICAgZnJhbWVfYnVyeSAwCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAyCiAgICBiIHdpZGVSYXRpb19mb3JfaGVhZGVyQDUKCndpZGVSYXRpb19hZnRlcl9mb3JAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3V0aWxzLmFsZ28udHM6MTYKICAgIC8vIGNvbnN0IHJhdGlvOiBiaWd1aW50ID0gbnVtZXJhdG9yLm5hdGl2ZSAvIGRlbm9taW5hdG9yLm5hdGl2ZQogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2RpZyAwCiAgICBiLwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvdXRpbHMuYWxnby50czoxNwogICAgLy8gcmV0dXJuIG5ldyBVaW50NjQocmF0aW8pLm5hdGl2ZQogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgOCAvLyA4CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBwdXNoaW50IDggLy8gOAogICAgYnplcm8KICAgIGJ8CiAgICBidG9pCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgZnJhbWVfYnVyeSAyCiAgICBmcmFtZV9idXJ5IDEKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo6U3Rha2luZ1Bvb2wudXBkYXRlQXBwbGljYXRpb24oKSAtPiB2b2lkOgp1cGRhdGVBcHBsaWNhdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTEyCiAgICAvLyBuZXcgQWRkcmVzcyhUeG4uc2VuZGVyKSA9PT0gbmV3IEFkZHJlc3MoJ0xaNFYySVJWTENYRkpLNFJFSlY0VEFHRUtFWVRBMkdNUjZUQzIzNDRPQjNMM0FGM01XWFo2WkFGSVEnKSwKICAgIHR4biBTZW5kZXIKICAgIHB1c2hieXRlcyBiYXNlMzIoTFo0VjJJUlZMQ1hGSks0UkVKVjRUQUdFS0VZVEEyR01SNlRDMjM0NE9CM0wzQUYzTVdYUSkgLy8gYWRkciBMWjRWMklSVkxDWEZKSzRSRUpWNFRBR0VLRVlUQTJHTVI2VEMyMzQ0T0IzTDNBRjNNV1haNlpBRklRCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMTEtMTE0CiAgICAvLyBhc3NlcnQoCiAgICAvLyAgIG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpID09PSBuZXcgQWRkcmVzcygnTFo0VjJJUlZMQ1hGSks0UkVKVjRUQUdFS0VZVEEyR01SNlRDMjM0NE9CM0wzQUYzTVdYWjZaQUZJUScpLAogICAgLy8gICAnVGVtcG9yYXJ5OiBjb250cmFjdCBpcyB1cGdyYWRlYWJsZSBidXQgb25seSBkdXJpbmcgdGVzdGluZyBhbmQgb25seSBmcm9tIGEgZGV2ZWxvcG1lbnQgYWNjb3VudCcsCiAgICAvLyApCiAgICBhc3NlcnQgLy8gVGVtcG9yYXJ5OiBjb250cmFjdCBpcyB1cGdyYWRlYWJsZSBidXQgb25seSBkdXJpbmcgdGVzdGluZyBhbmQgb25seSBmcm9tIGEgZGV2ZWxvcG1lbnQgYWNjb3VudAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo6U3Rha2luZ1Bvb2wuY3JlYXRlQXBwbGljYXRpb24oY3JlYXRpbmdDb250cmFjdElkOiB1aW50NjQsIHZhbGlkYXRvcklkOiB1aW50NjQsIHBvb2xJZDogdWludDY0LCBtaW5FbnRyeVN0YWtlOiB1aW50NjQpIC0+IHZvaWQ6CmNyZWF0ZUFwcGxpY2F0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMjQKICAgIC8vIGNyZWF0ZUFwcGxpY2F0aW9uKGNyZWF0aW5nQ29udHJhY3RJZDogdWludDY0LCB2YWxpZGF0b3JJZDogdWludDY0LCBwb29sSWQ6IHVpbnQ2NCwgbWluRW50cnlTdGFrZTogdWludDY0KTogdm9pZCB7CiAgICBwcm90byA0IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTI1CiAgICAvLyBpZiAoY3JlYXRpbmdDb250cmFjdElkID09PSAwKSB7CiAgICBmcmFtZV9kaWcgLTQKICAgIGJueiBjcmVhdGVBcHBsaWNhdGlvbl9lbHNlX2JvZHlAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMjcKICAgIC8vIGFzc2VydCh2YWxpZGF0b3JJZCA9PT0gMCkKICAgIGZyYW1lX2RpZyAtMwogICAgIQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEyOAogICAgLy8gYXNzZXJ0KHBvb2xJZCA9PT0gMCkKICAgIGZyYW1lX2RpZyAtMgogICAgIQogICAgYXNzZXJ0CgpjcmVhdGVBcHBsaWNhdGlvbl9hZnRlcl9pZl9lbHNlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEzMwogICAgLy8gYXNzZXJ0KG1pbkVudHJ5U3Rha2UgPj0gTUlOX0FMR09fU1RBS0VfUEVSX1BPT0wsICdzdGFraW5nIHBvb2wgbXVzdCBoYXZlIG1pbmltdW0gZW50cnkgb2YgMSBhbGdvJykKICAgIGZyYW1lX2RpZyAtMQogICAgaW50YyA5IC8vIDEwMDAwMDAKICAgID49CiAgICBhc3NlcnQgLy8gc3Rha2luZyBwb29sIG11c3QgaGF2ZSBtaW5pbXVtIGVudHJ5IG9mIDEgYWxnbwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2NgogICAgLy8gY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ2NyZWF0b3JBcHAnIH0pCiAgICBieXRlY18xIC8vICJjcmVhdG9yQXBwIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMzQKICAgIC8vIHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlID0gY3JlYXRpbmdDb250cmFjdElkCiAgICBmcmFtZV9kaWcgLTQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY5CiAgICAvLyB2YWxpZGF0b3JJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICd2YWxpZGF0b3JJZCcgfSkKICAgIGJ5dGVjXzMgLy8gInZhbGlkYXRvcklkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMzUKICAgIC8vIHRoaXMudmFsaWRhdG9ySWQudmFsdWUgPSB2YWxpZGF0b3JJZAogICAgZnJhbWVfZGlnIC0zCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MgogICAgLy8gcG9vbElkID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ3Bvb2xJZCcgfSkKICAgIGJ5dGVjIDQgLy8gInBvb2xJZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTM2CiAgICAvLyB0aGlzLnBvb2xJZC52YWx1ZSA9IHBvb2xJZAogICAgZnJhbWVfZGlnIC0yCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3NQogICAgLy8gbnVtU3Rha2VycyA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdudW1TdGFrZXJzJyB9KQogICAgYnl0ZWMgMTAgLy8gIm51bVN0YWtlcnMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEzNwogICAgLy8gdGhpcy5udW1TdGFrZXJzLnZhbHVlID0gMAogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc4CiAgICAvLyB0b3RhbEFsZ29TdGFrZWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnc3Rha2VkJyB9KQogICAgYnl0ZWMgNSAvLyAic3Rha2VkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMzgKICAgIC8vIHRoaXMudG90YWxBbGdvU3Rha2VkLnZhbHVlID0gMAogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgwCiAgICAvLyBtaW5FbnRyeVN0YWtlID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ21pbkVudHJ5U3Rha2UnIH0pCiAgICBieXRlYyAxNCAvLyAibWluRW50cnlTdGFrZSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTM5CiAgICAvLyB0aGlzLm1pbkVudHJ5U3Rha2UudmFsdWUgPSBtaW5FbnRyeVN0YWtlCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgzCiAgICAvLyBsYXN0UGF5b3V0ID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ2xhc3RQYXlvdXQnIH0pCiAgICBieXRlYyAxMiAvLyAibGFzdFBheW91dCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTQwCiAgICAvLyB0aGlzLmxhc3RQYXlvdXQudmFsdWUgPSBHbG9iYWwucm91bmQgLy8gc2V0IHRvIGluaXQgYmxvY2sgdG8gZXN0YWJsaXNoIGJhc2VsaW5lCiAgICBnbG9iYWwgUm91bmQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjg2CiAgICAvLyBlcG9jaE51bWJlciA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdlcG9jaE51bWJlcicgfSkKICAgIGJ5dGVjIDE1IC8vICJlcG9jaE51bWJlciIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTQxCiAgICAvLyB0aGlzLmVwb2NoTnVtYmVyLnZhbHVlID0gMAogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk2CiAgICAvLyByb3VuZHNQZXJEYXkgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAncm91bmRzUGVyRGF5JyB9KQogICAgYnl0ZWMgNyAvLyAicm91bmRzUGVyRGF5IgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDYzCiAgICAvLyB0aGlzLnJvdW5kc1BlckRheS52YWx1ZSA9IEFWR19ST1VORFNfUEVSX0RBWQogICAgaW50YyA1IC8vIDMwODU3CiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxNDQKICAgIC8vIHRoaXMuYmluUm91bmRTdGFydC52YWx1ZSA9IEdsb2JhbC5yb3VuZCAtIChHbG9iYWwucm91bmQgJSB0aGlzLnJvdW5kc1BlckRheS52YWx1ZSkgLy8gcGxhY2UgYXQgc3RhcnQgb2YgYmluCiAgICBnbG9iYWwgUm91bmQKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDYzCiAgICAvLyB0aGlzLnJvdW5kc1BlckRheS52YWx1ZSA9IEFWR19ST1VORFNfUEVSX0RBWQogICAgaW50YyA1IC8vIDMwODU3CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjE0NAogICAgLy8gdGhpcy5iaW5Sb3VuZFN0YXJ0LnZhbHVlID0gR2xvYmFsLnJvdW5kIC0gKEdsb2JhbC5yb3VuZCAlIHRoaXMucm91bmRzUGVyRGF5LnZhbHVlKSAvLyBwbGFjZSBhdCBzdGFydCBvZiBiaW4KICAgICUKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTgKICAgIC8vIGJpblJvdW5kU3RhcnQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnYmluUm91bmRTdGFydCcgfSkKICAgIGJ5dGVjIDkgLy8gImJpblJvdW5kU3RhcnQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjE0NAogICAgLy8gdGhpcy5iaW5Sb3VuZFN0YXJ0LnZhbHVlID0gR2xvYmFsLnJvdW5kIC0gKEdsb2JhbC5yb3VuZCAlIHRoaXMucm91bmRzUGVyRGF5LnZhbHVlKSAvLyBwbGFjZSBhdCBzdGFydCBvZiBiaW4KICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwMAogICAgLy8gc3Rha2VBY2N1bXVsYXRvciA9IEdsb2JhbFN0YXRlPFVpbnQxMjg+KHsga2V5OiAnc3Rha2VBY2N1bXVsYXRvcicgfSkKICAgIGJ5dGVjIDYgLy8gInN0YWtlQWNjdW11bGF0b3IiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjE0NQogICAgLy8gdGhpcy5zdGFrZUFjY3VtdWxhdG9yLnZhbHVlID0gbmV3IFVpbnQxMjgoMCkKICAgIGJ5dGVjIDIyIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwMgogICAgLy8gcmV3YXJkQWNjdW11bGF0b3IgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAncmV3YXJkQWNjdW11bGF0b3InIH0pCiAgICBieXRlYyAxMSAvLyAicmV3YXJkQWNjdW11bGF0b3IiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjE0NgogICAgLy8gdGhpcy5yZXdhcmRBY2N1bXVsYXRvci52YWx1ZSA9IDAKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDQKICAgIC8vIHdlaWdodGVkTW92aW5nQXZlcmFnZSA9IEdsb2JhbFN0YXRlPFVpbnQxMjg+KHsga2V5OiAnZXdtYScgfSkKICAgIGJ5dGVjIDE2IC8vICJld21hIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxNDcKICAgIC8vIHRoaXMud2VpZ2h0ZWRNb3ZpbmdBdmVyYWdlLnZhbHVlID0gbmV3IFVpbnQxMjgoMCkKICAgIGJ5dGVjIDIyIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCmNyZWF0ZUFwcGxpY2F0aW9uX2Vsc2VfYm9keUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMzAKICAgIC8vIGFzc2VydCh2YWxpZGF0b3JJZCAhPT0gMCkKICAgIGZyYW1lX2RpZyAtMwogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEzMQogICAgLy8gYXNzZXJ0KHBvb2xJZCAhPT0gMCkKICAgIGZyYW1lX2RpZyAtMgogICAgYXNzZXJ0CiAgICBiIGNyZWF0ZUFwcGxpY2F0aW9uX2FmdGVyX2lmX2Vsc2VAMwoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OlN0YWtpbmdQb29sLmluaXRTdG9yYWdlKG1iclBheW1lbnQ6IHVpbnQ2NCkgLT4gdm9pZDoKaW5pdFN0b3JhZ2U6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjE2OQogICAgLy8gaW5pdFN0b3JhZ2UobWJyUGF5bWVudDogZ3R4bi5QYXltZW50VHhuKTogdm9pZCB7CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTIKICAgIC8vIHN0YWtlcnMgPSBCb3g8Rml4ZWRBcnJheTxTdGFrZWRJbmZvLCB0eXBlb2YgTUFYX1NUQUtFUlNfUEVSX1BPT0w+Pih7IGtleTogJ3N0YWtlcnMnIH0pCiAgICBieXRlY18wIC8vICJzdGFrZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxNzAKICAgIC8vIGFzc2VydCghdGhpcy5zdGFrZXJzLmV4aXN0cywgJ3N0YWtpbmcgcG9vbCBhbHJlYWR5IGluaXRpYWxpemVkJykKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgIQogICAgYXNzZXJ0IC8vIHN0YWtpbmcgcG9vbCBhbHJlYWR5IGluaXRpYWxpemVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjE3My0xNzYKICAgIC8vIGNvbnN0IHZhbGlkYXRvckNvbmZpZyA9IGFiaUNhbGwoVmFsaWRhdG9yUmVnaXN0cnlBQkkucHJvdG90eXBlLmdldFZhbGlkYXRvckNvbmZpZywgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlXSwKICAgIC8vIH0pLnJldHVyblZhbHVlCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjE3NAogICAgLy8gYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjYKICAgIC8vIGNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdjcmVhdG9yQXBwJyB9KQogICAgYnl0ZWNfMSAvLyAiY3JlYXRvckFwcCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTc0CiAgICAvLyBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxNzUKICAgIC8vIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlXSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY5CiAgICAvLyB2YWxpZGF0b3JJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICd2YWxpZGF0b3JJZCcgfSkKICAgIGJ5dGVjXzMgLy8gInZhbGlkYXRvcklkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxNzUKICAgIC8vIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlXSwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjE3My0xNzYKICAgIC8vIGNvbnN0IHZhbGlkYXRvckNvbmZpZyA9IGFiaUNhbGwoVmFsaWRhdG9yUmVnaXN0cnlBQkkucHJvdG90eXBlLmdldFZhbGlkYXRvckNvbmZpZywgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlXSwKICAgIC8vIH0pLnJldHVyblZhbHVlCiAgICBieXRlYyAxMyAvLyBtZXRob2QgImdldFZhbGlkYXRvckNvbmZpZyh1aW50NjQpKHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsdWludDY0LHVpbnQ4LGFkZHJlc3MsdWludDY0WzRdLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQzMix1aW50MzIsYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ4LHVpbnQ2NCx1aW50NjQpIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMyAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBCeXRlcyBoYXMgdmFsaWQgcHJlZml4CiAgICBpbnRjIDYgLy8gMTU3CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjE3OAogICAgLy8gY29uc3QgaXNUb2tlbkVsaWdpYmxlID0gdmFsaWRhdG9yQ29uZmlnLnJld2FyZFRva2VuSWQgIT09IDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTc5CiAgICAvLyBjb25zdCBleHRyYU1CUjogdWludDY0ID0gaXNUb2tlbkVsaWdpYmxlICYmIHRoaXMucG9vbElkLnZhbHVlID09PSAxID8gQVNTRVRfSE9MRElOR19GRUUgOiAwCiAgICBieiBpbml0U3RvcmFnZV9ib29sX2ZhbHNlQDQKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjcyCiAgICAvLyBwb29sSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAncG9vbElkJyB9KQogICAgYnl0ZWMgNCAvLyAicG9vbElkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxNzkKICAgIC8vIGNvbnN0IGV4dHJhTUJSOiB1aW50NjQgPSBpc1Rva2VuRWxpZ2libGUgJiYgdGhpcy5wb29sSWQudmFsdWUgPT09IDEgPyBBU1NFVF9IT0xESU5HX0ZFRSA6IDAKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGJ6IGluaXRTdG9yYWdlX2Jvb2xfZmFsc2VANAogICAgaW50Y18xIC8vIDEKCmluaXRTdG9yYWdlX2Jvb2xfbWVyZ2VANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTc5CiAgICAvLyBjb25zdCBleHRyYU1CUjogdWludDY0ID0gaXNUb2tlbkVsaWdpYmxlICYmIHRoaXMucG9vbElkLnZhbHVlID09PSAxID8gQVNTRVRfSE9MRElOR19GRUUgOiAwCiAgICBwdXNoaW50IDEwMDAwMCAvLyAxMDAwMDAKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTgxLTE4MwogICAgLy8gQUxHT1JBTkRfQUNDT1VOVF9NSU5fQkFMQU5DRSArCiAgICAvLyBleHRyYU1CUiArCiAgICAvLyB0aGlzLmNvc3RGb3JCb3hTdG9yYWdlKDcgLyogJ3N0YWtlcnMnIG5hbWUgKi8gKyBhcmM0RW5jb2RlZExlbmd0aDxTdGFrZWRJbmZvPigpICogTUFYX1NUQUtFUlNfUEVSX1BPT0wpCiAgICBwdXNoaW50IDUyMjUzMDAgLy8gNTIyNTMwMAogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxODYKICAgIC8vIGFzc2VydE1hdGNoKG1iclBheW1lbnQsIHsgcmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZC5hZGRyZXNzLCBhbW91bnQ6IFBvb2xJbml0TWJyIH0pCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKICAgIGFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKICAgIGFzc2VydCAvLyBhcHBsaWNhdGlvbiBleGlzdHMKICAgID09CiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgdW5jb3ZlciAyCiAgICA9PQogICAgJiYKICAgIGFzc2VydCAvLyBhc3NlcnQgdGFyZ2V0IGlzIG1hdGNoIGZvciBjb25kaXRpb25zCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkyCiAgICAvLyBzdGFrZXJzID0gQm94PEZpeGVkQXJyYXk8U3Rha2VkSW5mbywgdHlwZW9mIE1BWF9TVEFLRVJTX1BFUl9QT09MPj4oeyBrZXk6ICdzdGFrZXJzJyB9KQogICAgYnl0ZWNfMCAvLyAic3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTg3CiAgICAvLyB0aGlzLnN0YWtlcnMuY3JlYXRlKCkKICAgIHB1c2hpbnQgMTI4MDAgLy8gMTI4MDAKICAgIGJveF9jcmVhdGUKICAgIHBvcAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxODkKICAgIC8vIGlmIChpc1Rva2VuRWxpZ2libGUgJiYgdGhpcy5wb29sSWQudmFsdWUgPT09IDEpIHsKICAgIGZyYW1lX2RpZyAwCiAgICBieiBpbml0U3RvcmFnZV9hZnRlcl9pZl9lbHNlQDkKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjcyCiAgICAvLyBwb29sSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAncG9vbElkJyB9KQogICAgYnl0ZWMgNCAvLyAicG9vbElkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxODkKICAgIC8vIGlmIChpc1Rva2VuRWxpZ2libGUgJiYgdGhpcy5wb29sSWQudmFsdWUgPT09IDEpIHsKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGJ6IGluaXRTdG9yYWdlX2FmdGVyX2lmX2Vsc2VAOQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxOTEtMTk3CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IHZhbGlkYXRvckNvbmZpZy5yZXdhcmRUb2tlbklkLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZC5hZGRyZXNzLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTk0CiAgICAvLyBhc3NldFJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQuYWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAogICAgYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwogICAgYXNzZXJ0IC8vIGFwcGxpY2F0aW9uIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxOTUKICAgIC8vIGFzc2V0QW1vdW50OiAwLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgZnJhbWVfZGlnIDAKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjE5MS0xOTYKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIHhmZXJBc3NldDogdmFsaWRhdG9yQ29uZmlnLnJld2FyZFRva2VuSWQsCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLmFkZHJlc3MsCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IDAsCiAgICAvLyAgIH0pCiAgICBwdXNoaW50IDQgLy8gNAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjE5MS0xOTcKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIHhmZXJBc3NldDogdmFsaWRhdG9yQ29uZmlnLnJld2FyZFRva2VuSWQsCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLmFkZHJlc3MsCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKCmluaXRTdG9yYWdlX2FmdGVyX2lmX2Vsc2VAOToKICAgIHJldHN1YgoKaW5pdFN0b3JhZ2VfYm9vbF9mYWxzZUA0OgogICAgaW50Y18wIC8vIDAKICAgIGIgaW5pdFN0b3JhZ2VfYm9vbF9tZXJnZUA1CgoKLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo6U3Rha2luZ1Bvb2wuYWRkU3Rha2Uoc3Rha2VkQW1vdW50UGF5bWVudDogdWludDY0LCBzdGFrZXI6IGJ5dGVzKSAtPiB1aW50NjQ6CmFkZFN0YWtlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyMTEKICAgIC8vIGFkZFN0YWtlKHN0YWtlZEFtb3VudFBheW1lbnQ6IGd0eG4uUGF5bWVudFR4biwgc3Rha2VyOiBBZGRyZXNzKTogdWludDY0IHsKICAgIHByb3RvIDIgMQogICAgaW50Y18wIC8vIDAKICAgIGR1cAogICAgcHVzaGJ5dGVzICIiCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTIKICAgIC8vIHN0YWtlcnMgPSBCb3g8Rml4ZWRBcnJheTxTdGFrZWRJbmZvLCB0eXBlb2YgTUFYX1NUQUtFUlNfUEVSX1BPT0w+Pih7IGtleTogJ3N0YWtlcnMnIH0pCiAgICBieXRlY18wIC8vICJzdGFrZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyMTIKICAgIC8vIGFzc2VydCh0aGlzLnN0YWtlcnMuZXhpc3RzLCAnc3Rha2luZyBwb29sIG11c3QgYmUgaW5pdGlhbGl6ZWQgZmlyc3QnKQogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gc3Rha2luZyBwb29sIG11c3QgYmUgaW5pdGlhbGl6ZWQgZmlyc3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjE2CiAgICAvLyBUeG4uc2VuZGVyID09PSBBcHBsaWNhdGlvbih0aGlzLmNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZC52YWx1ZSkuYWRkcmVzcywKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY2CiAgICAvLyBjcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnY3JlYXRvckFwcCcgfSkKICAgIGJ5dGVjXzEgLy8gImNyZWF0b3JBcHAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjIxNgogICAgLy8gVHhuLnNlbmRlciA9PT0gQXBwbGljYXRpb24odGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUpLmFkZHJlc3MsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwogICAgYXNzZXJ0IC8vIGFwcGxpY2F0aW9uIGV4aXN0cwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjE1LTIxOAogICAgLy8gYXNzZXJ0KAogICAgLy8gICBUeG4uc2VuZGVyID09PSBBcHBsaWNhdGlvbih0aGlzLmNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZC52YWx1ZSkuYWRkcmVzcywKICAgIC8vICAgJ3N0YWtlIGNhbiBvbmx5IGJlIGFkZGVkIHZpYSB0aGUgdmFsaWRhdG9yIGNvbnRyYWN0JywKICAgIC8vICkKICAgIGFzc2VydCAvLyBzdGFrZSBjYW4gb25seSBiZSBhZGRlZCB2aWEgdGhlIHZhbGlkYXRvciBjb250cmFjdAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyMTkKICAgIC8vIGFzc2VydChzdGFrZXIgIT09IG5ldyBBZGRyZXNzKEdsb2JhbC56ZXJvQWRkcmVzcykpCiAgICBmcmFtZV9kaWcgLTEKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyMjIKICAgIC8vIHRoaXMuY2hlY2tJZkJpbkNsb3NlZCgpCiAgICBjYWxsc3ViIGNoZWNrSWZCaW5DbG9zZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjI2LTIzMAogICAgLy8gYXNzZXJ0TWF0Y2goc3Rha2VkQW1vdW50UGF5bWVudCwgewogICAgLy8gICBzZW5kZXI6IEFwcGxpY2F0aW9uKHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlKS5hZGRyZXNzLAogICAgLy8gICByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgIGFtb3VudDogc3Rha2VkQW1vdW50UGF5bWVudC5hbW91bnQsCiAgICAvLyB9KQogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjI3CiAgICAvLyBzZW5kZXI6IEFwcGxpY2F0aW9uKHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlKS5hZGRyZXNzLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjYKICAgIC8vIGNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdjcmVhdG9yQXBwJyB9KQogICAgYnl0ZWNfMSAvLyAiY3JlYXRvckFwcCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjI3CiAgICAvLyBzZW5kZXI6IEFwcGxpY2F0aW9uKHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlKS5hZGRyZXNzLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKICAgIGFzc2VydCAvLyBhcHBsaWNhdGlvbiBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjI2LTIzMAogICAgLy8gYXNzZXJ0TWF0Y2goc3Rha2VkQW1vdW50UGF5bWVudCwgewogICAgLy8gICBzZW5kZXI6IEFwcGxpY2F0aW9uKHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlKS5hZGRyZXNzLAogICAgLy8gICByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgIGFtb3VudDogc3Rha2VkQW1vdW50UGF5bWVudC5hbW91bnQsCiAgICAvLyB9KQogICAgPT0KICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjI4CiAgICAvLyByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyMjYtMjMwCiAgICAvLyBhc3NlcnRNYXRjaChzdGFrZWRBbW91bnRQYXltZW50LCB7CiAgICAvLyAgIHNlbmRlcjogQXBwbGljYXRpb24odGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUpLmFkZHJlc3MsCiAgICAvLyAgIHJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgYW1vdW50OiBzdGFrZWRBbW91bnRQYXltZW50LmFtb3VudCwKICAgIC8vIH0pCiAgICA9PQogICAgJiYKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgQW1vdW50CiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgaW50Y18xIC8vIDEKICAgICYmCiAgICBhc3NlcnQgLy8gYXNzZXJ0IHRhcmdldCBpcyBtYXRjaCBmb3IgY29uZGl0aW9ucwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyMzUKICAgIC8vIGNvbnN0IGVudHJ5Um91bmQ6IHVpbnQ2NCA9IEdsb2JhbC5yb3VuZCArIEFMR09SQU5EX1NUQUtJTkdfQkxPQ0tfREVMQVkKICAgIGdsb2JhbCBSb3VuZAogICAgcHVzaGludCAzMjAgLy8gMzIwCiAgICArCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjIzNgogICAgLy8gbGV0IGZpcnN0RW1wdHk6IHVpbnQ2NCA9IDAKICAgIGludGNfMCAvLyAwCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjIzOAogICAgLy8gdGhpcy50b3RhbEFsZ29TdGFrZWQudmFsdWUgKz0gc3Rha2VkQW1vdW50UGF5bWVudC5hbW91bnQKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc4CiAgICAvLyB0b3RhbEFsZ29TdGFrZWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnc3Rha2VkJyB9KQogICAgYnl0ZWMgNSAvLyAic3Rha2VkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyMzgKICAgIC8vIHRoaXMudG90YWxBbGdvU3Rha2VkLnZhbHVlICs9IHN0YWtlZEFtb3VudFBheW1lbnQuYW1vdW50CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgZGlnIDEKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzgKICAgIC8vIHRvdGFsQWxnb1N0YWtlZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdzdGFrZWQnIH0pCiAgICBieXRlYyA1IC8vICJzdGFrZWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjIzOAogICAgLy8gdGhpcy50b3RhbEFsZ29TdGFrZWQudmFsdWUgKz0gc3Rha2VkQW1vdW50UGF5bWVudC5hbW91bnQKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjI0MAogICAgLy8gY29uc3Qgcm91bmRzTGVmdEluQmluOiB1aW50NjQgPSB0aGlzLmJpblJvdW5kU3RhcnQudmFsdWUgKyB0aGlzLnJvdW5kc1BlckRheS52YWx1ZSAtIEdsb2JhbC5yb3VuZAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTgKICAgIC8vIGJpblJvdW5kU3RhcnQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnYmluUm91bmRTdGFydCcgfSkKICAgIGJ5dGVjIDkgLy8gImJpblJvdW5kU3RhcnQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjI0MAogICAgLy8gY29uc3Qgcm91bmRzTGVmdEluQmluOiB1aW50NjQgPSB0aGlzLmJpblJvdW5kU3RhcnQudmFsdWUgKyB0aGlzLnJvdW5kc1BlckRheS52YWx1ZSAtIEdsb2JhbC5yb3VuZAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk2CiAgICAvLyByb3VuZHNQZXJEYXkgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAncm91bmRzUGVyRGF5JyB9KQogICAgYnl0ZWMgNyAvLyAicm91bmRzUGVyRGF5IgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyNDAKICAgIC8vIGNvbnN0IHJvdW5kc0xlZnRJbkJpbjogdWludDY0ID0gdGhpcy5iaW5Sb3VuZFN0YXJ0LnZhbHVlICsgdGhpcy5yb3VuZHNQZXJEYXkudmFsdWUgLSBHbG9iYWwucm91bmQKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICArCiAgICBnbG9iYWwgUm91bmQKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjQyCiAgICAvLyB0aGlzLnN0YWtlQWNjdW11bGF0b3IudmFsdWUubmF0aXZlICsgQmlnVWludChzdGFrZWRBbW91bnRQYXltZW50LmFtb3VudCkgKiBCaWdVaW50KHJvdW5kc0xlZnRJbkJpbiksCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDAKICAgIC8vIHN0YWtlQWNjdW11bGF0b3IgPSBHbG9iYWxTdGF0ZTxVaW50MTI4Pih7IGtleTogJ3N0YWtlQWNjdW11bGF0b3InIH0pCiAgICBieXRlYyA2IC8vICJzdGFrZUFjY3VtdWxhdG9yIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyNDIKICAgIC8vIHRoaXMuc3Rha2VBY2N1bXVsYXRvci52YWx1ZS5uYXRpdmUgKyBCaWdVaW50KHN0YWtlZEFtb3VudFBheW1lbnQuYW1vdW50KSAqIEJpZ1VpbnQocm91bmRzTGVmdEluQmluKSwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIGR1cAogICAgY292ZXIgMwogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICBiKgogICAgYisKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjQxLTI0MwogICAgLy8gdGhpcy5zdGFrZUFjY3VtdWxhdG9yLnZhbHVlID0gbmV3IFVpbnQxMjgoCiAgICAvLyAgIHRoaXMuc3Rha2VBY2N1bXVsYXRvci52YWx1ZS5uYXRpdmUgKyBCaWdVaW50KHN0YWtlZEFtb3VudFBheW1lbnQuYW1vdW50KSAqIEJpZ1VpbnQocm91bmRzTGVmdEluQmluKSwKICAgIC8vICkKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBiemVybwogICAgYnwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTAwCiAgICAvLyBzdGFrZUFjY3VtdWxhdG9yID0gR2xvYmFsU3RhdGU8VWludDEyOD4oeyBrZXk6ICdzdGFrZUFjY3VtdWxhdG9yJyB9KQogICAgYnl0ZWMgNiAvLyAic3Rha2VBY2N1bXVsYXRvciIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjQxLTI0MwogICAgLy8gdGhpcy5zdGFrZUFjY3VtdWxhdG9yLnZhbHVlID0gbmV3IFVpbnQxMjgoCiAgICAvLyAgIHRoaXMuc3Rha2VBY2N1bXVsYXRvci52YWx1ZS5uYXRpdmUgKyBCaWdVaW50KHN0YWtlZEFtb3VudFBheW1lbnQuYW1vdW50KSAqIEJpZ1VpbnQocm91bmRzTGVmdEluQmluKSwKICAgIC8vICkKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjI0NgogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHRoaXMuc3Rha2Vycy52YWx1ZS5sZW5ndGg7IGkgKz0gMSkgewogICAgaW50Y18wIC8vIDAKCmFkZFN0YWtlX3doaWxlX3RvcEAxOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MgogICAgLy8gc3Rha2VycyA9IEJveDxGaXhlZEFycmF5PFN0YWtlZEluZm8sIHR5cGVvZiBNQVhfU1RBS0VSU19QRVJfUE9PTD4+KHsga2V5OiAnc3Rha2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInN0YWtlcnMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjI0NgogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHRoaXMuc3Rha2Vycy52YWx1ZS5sZW5ndGg7IGkgKz0gMSkgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfZGlnIDgKICAgIGludGMgNCAvLyAyMDAKICAgIDwKICAgIGJ6IGFkZFN0YWtlX2FmdGVyX3doaWxlQDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjQ3CiAgICAvLyBlbnN1cmVCdWRnZXQoMzAwKQogICAgaW50YyA3IC8vIDMwMAogICAgaW50Y18wIC8vIDAKICAgIGNhbGxzdWIgZW5zdXJlX2J1ZGdldAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyNDkKICAgIC8vIGNvbnN0IGNtcFN0YWtlciA9IGNsb25lKHRoaXMuc3Rha2Vycy52YWx1ZVtpXSkKICAgIGZyYW1lX2RpZyA4CiAgICBpbnRjXzIgLy8gNjQKICAgICoKICAgIGR1cAogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkyCiAgICAvLyBzdGFrZXJzID0gQm94PEZpeGVkQXJyYXk8U3Rha2VkSW5mbywgdHlwZW9mIE1BWF9TVEFLRVJTX1BFUl9QT09MPj4oeyBrZXk6ICdzdGFrZXJzJyB9KQogICAgYnl0ZWNfMCAvLyAic3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjQ5CiAgICAvLyBjb25zdCBjbXBTdGFrZXIgPSBjbG9uZSh0aGlzLnN0YWtlcnMudmFsdWVbaV0pCiAgICBzd2FwCiAgICBpbnRjXzIgLy8gNjQKICAgIGJveF9leHRyYWN0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyNDktMjUwCiAgICAvLyBjb25zdCBjbXBTdGFrZXIgPSBjbG9uZSh0aGlzLnN0YWtlcnMudmFsdWVbaV0pCiAgICAvLyBpZiAoY21wU3Rha2VyLmFjY291bnQgPT09IHN0YWtlcikgewogICAgZXh0cmFjdCAwIDMyCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyNTAKICAgIC8vIGlmIChjbXBTdGFrZXIuYWNjb3VudCA9PT0gc3Rha2VyKSB7CiAgICBmcmFtZV9kaWcgLTEKICAgID09CiAgICBieiBhZGRTdGFrZV9hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTIKICAgIC8vIHN0YWtlcnMgPSBCb3g8Rml4ZWRBcnJheTxTdGFrZWRJbmZvLCB0eXBlb2YgTUFYX1NUQUtFUlNfUEVSX1BPT0w+Pih7IGtleTogJ3N0YWtlcnMnIH0pCiAgICBieXRlY18wIC8vICJzdGFrZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyNDkKICAgIC8vIGNvbnN0IGNtcFN0YWtlciA9IGNsb25lKHRoaXMuc3Rha2Vycy52YWx1ZVtpXSkKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGludGNfMiAvLyA2NAogICAgYm94X2V4dHJhY3QKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjUyCiAgICAvLyBjbXBTdGFrZXIuYmFsYW5jZSArPSBzdGFrZWRBbW91bnRQYXltZW50LmFtb3VudAogICAgZXh0cmFjdF91aW50NjQKICAgIGZyYW1lX2RpZyA0CiAgICArCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgMQogICAgc3dhcAogICAgcmVwbGFjZTIgMzIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjUzCiAgICAvLyBjbXBTdGFrZXIuZW50cnlSb3VuZCA9IGVudHJ5Um91bmQKICAgIGZyYW1lX2RpZyA1CiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGl0b2IKICAgIHJlcGxhY2UyIDU2CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkyCiAgICAvLyBzdGFrZXJzID0gQm94PEZpeGVkQXJyYXk8U3Rha2VkSW5mbywgdHlwZW9mIE1BWF9TVEFLRVJTX1BFUl9QT09MPj4oeyBrZXk6ICdzdGFrZXJzJyB9KQogICAgYnl0ZWNfMCAvLyAic3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjU2CiAgICAvLyB0aGlzLnN0YWtlcnMudmFsdWVbaV0gPSBjbG9uZShjbXBTdGFrZXIpCiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjU4CiAgICAvLyByZXR1cm4gZW50cnlSb3VuZAogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCmFkZFN0YWtlX2FmdGVyX2lmX2Vsc2VANDoKICAgIGZyYW1lX2RpZyA2CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyNjAKICAgIC8vIGlmIChmaXJzdEVtcHR5ID09PSAwICYmIGNtcFN0YWtlci5hY2NvdW50Lm5hdGl2ZSA9PT0gR2xvYmFsLnplcm9BZGRyZXNzKSB7CiAgICBibnogYWRkU3Rha2VfYWZ0ZXJfaWZfZWxzZUA3CiAgICBmcmFtZV9kaWcgMAogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgZnJhbWVfZGlnIDYKICAgIGZyYW1lX2J1cnkgMwogICAgYnogYWRkU3Rha2VfYWZ0ZXJfaWZfZWxzZUA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjI2MQogICAgLy8gZmlyc3RFbXB0eSA9IGkgKyAxCiAgICBmcmFtZV9kaWcgOAogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMwoKYWRkU3Rha2VfYWZ0ZXJfaWZfZWxzZUA3OgogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2J1cnkgNgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyNDYKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDA7IGkgPCB0aGlzLnN0YWtlcnMudmFsdWUubGVuZ3RoOyBpICs9IDEpIHsKICAgIGZyYW1lX2RpZyA4CiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSA4CiAgICBiIGFkZFN0YWtlX3doaWxlX3RvcEAxCgphZGRTdGFrZV9hZnRlcl93aGlsZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyNjUKICAgIC8vIGlmIChmaXJzdEVtcHR5ID09PSAwKSB7CiAgICBmcmFtZV9kaWcgNgogICAgZHVwCiAgICAhCiAgICAhCiAgICBhc3NlcnQgLy8gU3Rha2luZyBwb29sIGZ1bGwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjcyCiAgICAvLyBhc3NlcnQoc3Rha2VkQW1vdW50UGF5bWVudC5hbW91bnQgPj0gdGhpcy5taW5FbnRyeVN0YWtlLnZhbHVlLCAnbXVzdCBzdGFrZSBhdCBsZWFzdCB0aGUgbWluaW11bSBmb3IgdGhpcyBwb29sJykKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgwCiAgICAvLyBtaW5FbnRyeVN0YWtlID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ21pbkVudHJ5U3Rha2UnIH0pCiAgICBieXRlYyAxNCAvLyAibWluRW50cnlTdGFrZSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjcyCiAgICAvLyBhc3NlcnQoc3Rha2VkQW1vdW50UGF5bWVudC5hbW91bnQgPj0gdGhpcy5taW5FbnRyeVN0YWtlLnZhbHVlLCAnbXVzdCBzdGFrZSBhdCBsZWFzdCB0aGUgbWluaW11bSBmb3IgdGhpcyBwb29sJykKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBmcmFtZV9kaWcgNAogICAgPD0KICAgIGFzc2VydCAvLyBtdXN0IHN0YWtlIGF0IGxlYXN0IHRoZSBtaW5pbXVtIGZvciB0aGlzIHBvb2wKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mjc0CiAgICAvLyBhc3NlcnQodGhpcy5zdGFrZXJzLnZhbHVlW2ZpcnN0RW1wdHkgLSAxXS5hY2NvdW50Lm5hdGl2ZSA9PT0gR2xvYmFsLnplcm9BZGRyZXNzKQogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGludGNfMiAvLyA2NAogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MgogICAgLy8gc3Rha2VycyA9IEJveDxGaXhlZEFycmF5PFN0YWtlZEluZm8sIHR5cGVvZiBNQVhfU1RBS0VSU19QRVJfUE9PTD4+KHsga2V5OiAnc3Rha2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInN0YWtlcnMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjI3NAogICAgLy8gYXNzZXJ0KHRoaXMuc3Rha2Vycy52YWx1ZVtmaXJzdEVtcHR5IC0gMV0uYWNjb3VudC5uYXRpdmUgPT09IEdsb2JhbC56ZXJvQWRkcmVzcykKICAgIGRpZyAxCiAgICBpbnRjXzIgLy8gNjQKICAgIGJveF9leHRyYWN0CiAgICBleHRyYWN0IDAgMzIKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyNzYtMjgyCiAgICAvLyB0aGlzLnN0YWtlcnMudmFsdWVbZmlyc3RFbXB0eSAtIDFdID0gewogICAgLy8gICBhY2NvdW50OiBzdGFrZXIsCiAgICAvLyAgIGJhbGFuY2U6IHN0YWtlZEFtb3VudFBheW1lbnQuYW1vdW50LAogICAgLy8gICB0b3RhbFJld2FyZGVkOiAwLAogICAgLy8gICByZXdhcmRUb2tlbkJhbGFuY2U6IDAsCiAgICAvLyAgIGVudHJ5Um91bmQ6IGVudHJ5Um91bmQsCiAgICAvLyB9CiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2RpZyA3CiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mjc5CiAgICAvLyB0b3RhbFJld2FyZGVkOiAwLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mjc2LTI4MgogICAgLy8gdGhpcy5zdGFrZXJzLnZhbHVlW2ZpcnN0RW1wdHkgLSAxXSA9IHsKICAgIC8vICAgYWNjb3VudDogc3Rha2VyLAogICAgLy8gICBiYWxhbmNlOiBzdGFrZWRBbW91bnRQYXltZW50LmFtb3VudCwKICAgIC8vICAgdG90YWxSZXdhcmRlZDogMCwKICAgIC8vICAgcmV3YXJkVG9rZW5CYWxhbmNlOiAwLAogICAgLy8gICBlbnRyeVJvdW5kOiBlbnRyeVJvdW5kLAogICAgLy8gfQogICAgaXRvYgogICAgc3dhcAogICAgZGlnIDEKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgNQogICAgZHVwCiAgICBjb3ZlciAyCiAgICBpdG9iCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTIKICAgIC8vIHN0YWtlcnMgPSBCb3g8Rml4ZWRBcnJheTxTdGFrZWRJbmZvLCB0eXBlb2YgTUFYX1NUQUtFUlNfUEVSX1BPT0w+Pih7IGtleTogJ3N0YWtlcnMnIH0pCiAgICBieXRlY18wIC8vICJzdGFrZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyNzYtMjgyCiAgICAvLyB0aGlzLnN0YWtlcnMudmFsdWVbZmlyc3RFbXB0eSAtIDFdID0gewogICAgLy8gICBhY2NvdW50OiBzdGFrZXIsCiAgICAvLyAgIGJhbGFuY2U6IHN0YWtlZEFtb3VudFBheW1lbnQuYW1vdW50LAogICAgLy8gICB0b3RhbFJld2FyZGVkOiAwLAogICAgLy8gICByZXdhcmRUb2tlbkJhbGFuY2U6IDAsCiAgICAvLyAgIGVudHJ5Um91bmQ6IGVudHJ5Um91bmQsCiAgICAvLyB9CiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MjgzCiAgICAvLyB0aGlzLm51bVN0YWtlcnMudmFsdWUgKz0gMQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzUKICAgIC8vIG51bVN0YWtlcnMgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnbnVtU3Rha2VycycgfSkKICAgIGJ5dGVjIDEwIC8vICJudW1TdGFrZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyODMKICAgIC8vIHRoaXMubnVtU3Rha2Vycy52YWx1ZSArPSAxCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzUKICAgIC8vIG51bVN0YWtlcnMgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnbnVtU3Rha2VycycgfSkKICAgIGJ5dGVjIDEwIC8vICJudW1TdGFrZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyODMKICAgIC8vIHRoaXMubnVtU3Rha2Vycy52YWx1ZSArPSAxCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoyODQKICAgIC8vIHJldHVybiBlbnRyeVJvdW5kCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OlN0YWtpbmdQb29sLnJlbW92ZVN0YWtlKHN0YWtlcjogYnl0ZXMsIGFtb3VudFRvVW5zdGFrZTogdWludDY0KSAtPiB2b2lkOgpyZW1vdmVTdGFrZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mjk4CiAgICAvLyByZW1vdmVTdGFrZShzdGFrZXI6IEFkZHJlc3MsIGFtb3VudFRvVW5zdGFrZTogdWludDY0KTogdm9pZCB7CiAgICBwcm90byAyIDAKICAgIGludGNfMCAvLyAwCiAgICBkdXAKICAgIHB1c2hieXRlcyAiIgogICAgZHVwbiA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjMwMQogICAgLy8gaWYgKHN0YWtlci5uYXRpdmUgIT09IFR4bi5zZW5kZXIpIHsKICAgIGZyYW1lX2RpZyAtMgogICAgdHhuIFNlbmRlcgogICAgIT0KICAgIGJ6IHJlbW92ZVN0YWtlX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozMDMKICAgIC8vIHRoaXMuaXNPd25lck9yTWFuYWdlckNhbGxlcigpLAogICAgY2FsbHN1YiBpc093bmVyT3JNYW5hZ2VyQ2FsbGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjMwMi0zMDUKICAgIC8vIGFzc2VydCgKICAgIC8vICAgdGhpcy5pc093bmVyT3JNYW5hZ2VyQ2FsbGVyKCksCiAgICAvLyAgICdJZiBzdGFrZXIgaXMgbm90IHNlbmRlciBpbiByZW1vdmVTdGFrZSBjYWxsLCB0aGVuIHNlbmRlciBNVVNUIGJlIG93bmVyIG9yIG1hbmFnZXIgb2YgdmFsaWRhdG9yJywKICAgIC8vICkKICAgIGFzc2VydCAvLyBJZiBzdGFrZXIgaXMgbm90IHNlbmRlciBpbiByZW1vdmVTdGFrZSBjYWxsLCB0aGVuIHNlbmRlciBNVVNUIGJlIG93bmVyIG9yIG1hbmFnZXIgb2YgdmFsaWRhdG9yCgpyZW1vdmVTdGFrZV9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjMwOAogICAgLy8gdGhpcy5jaGVja0lmQmluQ2xvc2VkKCkKICAgIGNhbGxzdWIgY2hlY2tJZkJpbkNsb3NlZAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozMTAKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDA7IGkgPCB0aGlzLnN0YWtlcnMudmFsdWUubGVuZ3RoOyBpICs9IDEpIHsKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDYKCnJlbW92ZVN0YWtlX3doaWxlX3RvcEAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MgogICAgLy8gc3Rha2VycyA9IEJveDxGaXhlZEFycmF5PFN0YWtlZEluZm8sIHR5cGVvZiBNQVhfU1RBS0VSU19QRVJfUE9PTD4+KHsga2V5OiAnc3Rha2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInN0YWtlcnMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjMxMAogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHRoaXMuc3Rha2Vycy52YWx1ZS5sZW5ndGg7IGkgKz0gMSkgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfZGlnIDYKICAgIGR1cAogICAgaW50YyA0IC8vIDIwMAogICAgPAogICAgYXNzZXJ0IC8vIGFjY291bnQgbm90IGZvdW5kCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjMxMQogICAgLy8gZW5zdXJlQnVkZ2V0KDMwMCkKICAgIGludGMgNyAvLyAzMDAKICAgIGludGNfMCAvLyAwCiAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzEzCiAgICAvLyBjb25zdCBjbXBTdGFrZXIgPSBjbG9uZSh0aGlzLnN0YWtlcnMudmFsdWVbaV0pCiAgICBpbnRjXzIgLy8gNjQKICAgICoKICAgIGR1cAogICAgZnJhbWVfYnVyeSA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkyCiAgICAvLyBzdGFrZXJzID0gQm94PEZpeGVkQXJyYXk8U3Rha2VkSW5mbywgdHlwZW9mIE1BWF9TVEFLRVJTX1BFUl9QT09MPj4oeyBrZXk6ICdzdGFrZXJzJyB9KQogICAgYnl0ZWNfMCAvLyAic3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzEzCiAgICAvLyBjb25zdCBjbXBTdGFrZXIgPSBjbG9uZSh0aGlzLnN0YWtlcnMudmFsdWVbaV0pCiAgICBzd2FwCiAgICBpbnRjXzIgLy8gNjQKICAgIGJveF9leHRyYWN0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozMTMtMzE0CiAgICAvLyBjb25zdCBjbXBTdGFrZXIgPSBjbG9uZSh0aGlzLnN0YWtlcnMudmFsdWVbaV0pCiAgICAvLyBpZiAoY21wU3Rha2VyLmFjY291bnQgPT09IHN0YWtlcikgewogICAgZXh0cmFjdCAwIDMyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjMxNAogICAgLy8gaWYgKGNtcFN0YWtlci5hY2NvdW50ID09PSBzdGFrZXIpIHsKICAgIGZyYW1lX2RpZyAtMgogICAgPT0KICAgIGJ6IHJlbW92ZVN0YWtlX2FmdGVyX2lmX2Vsc2VAMjUKICAgIGZyYW1lX2RpZyAtMQogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjMxNQogICAgLy8gaWYgKGFtb3VudFRvVW5zdGFrZSA9PT0gMCkgewogICAgZnJhbWVfZGlnIC0xCiAgICBibnogcmVtb3ZlU3Rha2VfYWZ0ZXJfaWZfZWxzZUA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkyCiAgICAvLyBzdGFrZXJzID0gQm94PEZpeGVkQXJyYXk8U3Rha2VkSW5mbywgdHlwZW9mIE1BWF9TVEFLRVJTX1BFUl9QT09MPj4oeyBrZXk6ICdzdGFrZXJzJyB9KQogICAgYnl0ZWNfMCAvLyAic3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzEzCiAgICAvLyBjb25zdCBjbXBTdGFrZXIgPSBjbG9uZSh0aGlzLnN0YWtlcnMudmFsdWVbaV0pCiAgICBmcmFtZV9kaWcgNQogICAgaW50Y18yIC8vIDY0CiAgICBib3hfZXh0cmFjdAogICAgcHVzaGludCAzMiAvLyAzMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozMTcKICAgIC8vIGFtb3VudFRvVW5zdGFrZSA9IGNtcFN0YWtlci5iYWxhbmNlCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZHVwCiAgICBmcmFtZV9idXJ5IC0xCiAgICBmcmFtZV9idXJ5IDQKCnJlbW92ZVN0YWtlX2FmdGVyX2lmX2Vsc2VANzoKICAgIGZyYW1lX2RpZyA0CiAgICBmcmFtZV9idXJ5IC0xCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkyCiAgICAvLyBzdGFrZXJzID0gQm94PEZpeGVkQXJyYXk8U3Rha2VkSW5mbywgdHlwZW9mIE1BWF9TVEFLRVJTX1BFUl9QT09MPj4oeyBrZXk6ICdzdGFrZXJzJyB9KQogICAgYnl0ZWNfMCAvLyAic3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzEzCiAgICAvLyBjb25zdCBjbXBTdGFrZXIgPSBjbG9uZSh0aGlzLnN0YWtlcnMudmFsdWVbaV0pCiAgICBmcmFtZV9kaWcgNQogICAgaW50Y18yIC8vIDY0CiAgICBib3hfZXh0cmFjdAogICAgcHVzaGludCAzMiAvLyAzMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozMTkKICAgIC8vIGlmIChjbXBTdGFrZXIuYmFsYW5jZSA8IGFtb3VudFRvVW5zdGFrZSkgewogICAgZXh0cmFjdF91aW50NjQKICAgIGR1cAogICAgZnJhbWVfZGlnIC0xCiAgICA8CiAgICAhCiAgICBhc3NlcnQgLy8gSW5zdWZmaWNpZW50IGJhbGFuY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzIyCiAgICAvLyBjbXBTdGFrZXIuYmFsYW5jZSAtPSBhbW91bnRUb1Vuc3Rha2UKICAgIGZyYW1lX2RpZyAtMQogICAgLQogICAgaXRvYgogICAgZnJhbWVfZGlnIDAKICAgIHN3YXAKICAgIHJlcGxhY2UyIDMyCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozMjMKICAgIC8vIHRoaXMudG90YWxBbGdvU3Rha2VkLnZhbHVlIC09IGFtb3VudFRvVW5zdGFrZQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzgKICAgIC8vIHRvdGFsQWxnb1N0YWtlZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdzdGFrZWQnIH0pCiAgICBieXRlYyA1IC8vICJzdGFrZWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjMyMwogICAgLy8gdGhpcy50b3RhbEFsZ29TdGFrZWQudmFsdWUgLT0gYW1vdW50VG9VbnN0YWtlCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgZnJhbWVfZGlnIC0xCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc4CiAgICAvLyB0b3RhbEFsZ29TdGFrZWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnc3Rha2VkJyB9KQogICAgYnl0ZWMgNSAvLyAic3Rha2VkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozMjMKICAgIC8vIHRoaXMudG90YWxBbGdvU3Rha2VkLnZhbHVlIC09IGFtb3VudFRvVW5zdGFrZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzI1CiAgICAvLyBsZXQgYW1vdW50UmV3YXJkVG9rZW5SZW1vdmVkOiB1aW50NjQgPSAwCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjMyNgogICAgLy8gaWYgKGNtcFN0YWtlci5yZXdhcmRUb2tlbkJhbGFuY2UgPiAwKSB7CiAgICBkdXAKICAgIHB1c2hpbnQgNDggLy8gNDgKICAgIGV4dHJhY3RfdWludDY0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMwogICAgc3dhcAogICAgZnJhbWVfYnVyeSAxCiAgICBieiByZW1vdmVTdGFrZV9hZnRlcl9pZl9lbHNlQDE2CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjMyOAogICAgLy8gaWYgKHRoaXMucG9vbElkLnZhbHVlID09PSAxKSB7CiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MgogICAgLy8gcG9vbElkID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ3Bvb2xJZCcgfSkKICAgIGJ5dGVjIDQgLy8gInBvb2xJZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzI4CiAgICAvLyBpZiAodGhpcy5wb29sSWQudmFsdWUgPT09IDEpIHsKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGJ6IHJlbW92ZVN0YWtlX2Vsc2VfYm9keUAxNAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozMjktMzMyCiAgICAvLyBjb25zdCB2YWxpZGF0b3JDb25maWcgPSBhYmlDYWxsKFZhbGlkYXRvclJlZ2lzdHJ5QUJJLnByb3RvdHlwZS5nZXRWYWxpZGF0b3JDb25maWcsIHsKICAgIC8vICAgYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgLy8gICBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICAvLyB9KS5yZXR1cm5WYWx1ZQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozMzAKICAgIC8vIGFwcElkOiB0aGlzLmNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZC52YWx1ZSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY2CiAgICAvLyBjcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnY3JlYXRvckFwcCcgfSkKICAgIGJ5dGVjXzEgLy8gImNyZWF0b3JBcHAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjMzMAogICAgLy8gYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzMxCiAgICAvLyBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2OQogICAgLy8gdmFsaWRhdG9ySWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAndmFsaWRhdG9ySWQnIH0pCiAgICBieXRlY18zIC8vICJ2YWxpZGF0b3JJZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzMxCiAgICAvLyBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozMjktMzMyCiAgICAvLyBjb25zdCB2YWxpZGF0b3JDb25maWcgPSBhYmlDYWxsKFZhbGlkYXRvclJlZ2lzdHJ5QUJJLnByb3RvdHlwZS5nZXRWYWxpZGF0b3JDb25maWcsIHsKICAgIC8vICAgYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgLy8gICBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICAvLyB9KS5yZXR1cm5WYWx1ZQogICAgYnl0ZWMgMTMgLy8gbWV0aG9kICJnZXRWYWxpZGF0b3JDb25maWcodWludDY0KSh1aW50NjQsYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NCx1aW50OCxhZGRyZXNzLHVpbnQ2NFs0XSx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50MzIsdWludDMyLGFkZHJlc3MsdWludDY0LHVpbnQ2NCx1aW50OCx1aW50NjQsdWludDY0KSIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBpbnRjXzMgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBMYXN0TG9nCiAgICBkdXAKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozMzYtMzQyCiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IHZhbGlkYXRvckNvbmZpZy5yZXdhcmRUb2tlbklkLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IHN0YWtlci5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IGNtcFN0YWtlci5yZXdhcmRUb2tlbkJhbGFuY2UsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgaW50YyA2IC8vIDE1NwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozMzgKICAgIC8vIHhmZXJBc3NldDogdmFsaWRhdG9yQ29uZmlnLnJld2FyZFRva2VuSWQsCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZnJhbWVfZGlnIDMKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozMzYtMzQxCiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IHZhbGlkYXRvckNvbmZpZy5yZXdhcmRUb2tlbklkLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IHN0YWtlci5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IGNtcFN0YWtlci5yZXdhcmRUb2tlbkJhbGFuY2UsCiAgICAvLyAgIH0pCiAgICBwdXNoaW50IDQgLy8gNAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjMzNi0zNDIKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIHhmZXJBc3NldDogdmFsaWRhdG9yQ29uZmlnLnJld2FyZFRva2VuSWQsCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogc3Rha2VyLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldEFtb3VudDogY21wU3Rha2VyLnJld2FyZFRva2VuQmFsYW5jZSwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozNDUKICAgIC8vIGNtcFN0YWtlci5yZXdhcmRUb2tlbkJhbGFuY2UgPSAwCiAgICBpbnRjXzAgLy8gMAogICAgaXRvYgogICAgZnJhbWVfZGlnIDAKICAgIHN3YXAKICAgIHJlcGxhY2UyIDQ4CiAgICBmcmFtZV9idXJ5IDAKCnJlbW92ZVN0YWtlX2FmdGVyX2lmX2Vsc2VAMTU6CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfYnVyeSAyCiAgICBmcmFtZV9kaWcgMAogICAgZnJhbWVfYnVyeSAxCgpyZW1vdmVTdGFrZV9hZnRlcl9pZl9lbHNlQDE2OgogICAgZnJhbWVfZGlnIDEKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjM1NwogICAgLy8gY21wU3Rha2VyLmJhbGFuY2UgPT09IDAgfHwgY21wU3Rha2VyLmJhbGFuY2UgPj0gdGhpcy5taW5FbnRyeVN0YWtlLnZhbHVlLAogICAgcHVzaGludCAzMiAvLyAzMgogICAgZXh0cmFjdF91aW50NjQKICAgIGR1cAogICAgZnJhbWVfYnVyeSA4CiAgICBieiByZW1vdmVTdGFrZV9ib29sX3RydWVAMTgKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgwCiAgICAvLyBtaW5FbnRyeVN0YWtlID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ21pbkVudHJ5U3Rha2UnIH0pCiAgICBieXRlYyAxNCAvLyAibWluRW50cnlTdGFrZSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzU3CiAgICAvLyBjbXBTdGFrZXIuYmFsYW5jZSA9PT0gMCB8fCBjbXBTdGFrZXIuYmFsYW5jZSA+PSB0aGlzLm1pbkVudHJ5U3Rha2UudmFsdWUsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgZnJhbWVfZGlnIDgKICAgIDw9CiAgICBieiByZW1vdmVTdGFrZV9ib29sX2ZhbHNlQDE5CgpyZW1vdmVTdGFrZV9ib29sX3RydWVAMTg6CiAgICBpbnRjXzEgLy8gMQoKcmVtb3ZlU3Rha2VfYm9vbF9tZXJnZUAyMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzU2LTM1OQogICAgLy8gYXNzZXJ0KAogICAgLy8gICBjbXBTdGFrZXIuYmFsYW5jZSA9PT0gMCB8fCBjbXBTdGFrZXIuYmFsYW5jZSA+PSB0aGlzLm1pbkVudHJ5U3Rha2UudmFsdWUsCiAgICAvLyAgICdjYW5ub3QgcmVkdWNlIGJhbGFuY2UgYmVsb3cgbWluaW11bSBhbGxvd2VkIHN0YWtlIHVubGVzcyBhbGwgaXMgcmVtb3ZlZCcsCiAgICAvLyApCiAgICBhc3NlcnQgLy8gY2Fubm90IHJlZHVjZSBiYWxhbmNlIGJlbG93IG1pbmltdW0gYWxsb3dlZCBzdGFrZSB1bmxlc3MgYWxsIGlzIHJlbW92ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzY0LTM3MAogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgYW1vdW50OiBhbW91bnRUb1Vuc3Rha2UsCiAgICAvLyAgICAgcmVjZWl2ZXI6IHN0YWtlci5uYXRpdmUsCiAgICAvLyAgICAgbm90ZTogJ3Vuc3Rha2VkJywKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjM2OAogICAgLy8gbm90ZTogJ3Vuc3Rha2VkJywKICAgIHB1c2hieXRlcyAidW5zdGFrZWQiCiAgICBpdHhuX2ZpZWxkIE5vdGUKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozNjQtMzY5CiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQ6IGFtb3VudFRvVW5zdGFrZSwKICAgIC8vICAgICByZWNlaXZlcjogc3Rha2VyLm5hdGl2ZSwKICAgIC8vICAgICBub3RlOiAndW5zdGFrZWQnLAogICAgLy8gICB9KQogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozNjQtMzcwCiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQ6IGFtb3VudFRvVW5zdGFrZSwKICAgIC8vICAgICByZWNlaXZlcjogc3Rha2VyLm5hdGl2ZSwKICAgIC8vICAgICBub3RlOiAndW5zdGFrZWQnLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjM3MgogICAgLy8gbGV0IHN0YWtlclJlbW92ZWQgPSBmYWxzZQogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgNwogICAgZnJhbWVfZGlnIDAKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozNzMKICAgIC8vIGlmIChjbXBTdGFrZXIuYmFsYW5jZSA9PT0gMCkgewogICAgZnJhbWVfZGlnIDgKICAgIGJueiByZW1vdmVTdGFrZV9hZnRlcl9pZl9lbHNlQDIzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjM3NQogICAgLy8gdGhpcy5udW1TdGFrZXJzLnZhbHVlIC09IDEKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc1CiAgICAvLyBudW1TdGFrZXJzID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ251bVN0YWtlcnMnIH0pCiAgICBieXRlYyAxMCAvLyAibnVtU3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mzc1CiAgICAvLyB0aGlzLm51bVN0YWtlcnMudmFsdWUgLT0gMQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc1CiAgICAvLyBudW1TdGFrZXJzID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ251bVN0YWtlcnMnIH0pCiAgICBieXRlYyAxMCAvLyAibnVtU3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mzc1CiAgICAvLyB0aGlzLm51bVN0YWtlcnMudmFsdWUgLT0gMQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mzc2CiAgICAvLyBjbXBTdGFrZXIuYWNjb3VudCA9IG5ldyBBZGRyZXNzKEdsb2JhbC56ZXJvQWRkcmVzcykKICAgIGZyYW1lX2RpZyAwCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIHJlcGxhY2UyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mzc3CiAgICAvLyBjbXBTdGFrZXIudG90YWxSZXdhcmRlZCA9IDAKICAgIGludGNfMCAvLyAwCiAgICBpdG9iCiAgICBzd2FwCiAgICBkaWcgMQogICAgcmVwbGFjZTIgNDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mzc4CiAgICAvLyBjbXBTdGFrZXIucmV3YXJkVG9rZW5CYWxhbmNlID0gMAogICAgc3dhcAogICAgcmVwbGFjZTIgNDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mzc5CiAgICAvLyBzdGFrZXJSZW1vdmVkID0gdHJ1ZQogICAgaW50Y18xIC8vIDEKICAgIGZyYW1lX2J1cnkgNwogICAgZnJhbWVfYnVyeSAxCgpyZW1vdmVTdGFrZV9hZnRlcl9pZl9lbHNlQDIzOgogICAgZnJhbWVfZGlnIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTIKICAgIC8vIHN0YWtlcnMgPSBCb3g8Rml4ZWRBcnJheTxTdGFrZWRJbmZvLCB0eXBlb2YgTUFYX1NUQUtFUlNfUEVSX1BPT0w+Pih7IGtleTogJ3N0YWtlcnMnIH0pCiAgICBieXRlY18wIC8vICJzdGFrZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozODIKICAgIC8vIHRoaXMuc3Rha2Vycy52YWx1ZVtpXSA9IGNsb25lKGNtcFN0YWtlcikKICAgIGZyYW1lX2RpZyA1CiAgICB1bmNvdmVyIDIKICAgIGJveF9yZXBsYWNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjM4NAogICAgLy8gY29uc3Qgcm91bmRzTGVmdEluQmluOiB1aW50NjQgPSB0aGlzLmJpblJvdW5kU3RhcnQudmFsdWUgKyB0aGlzLnJvdW5kc1BlckRheS52YWx1ZSAtIEdsb2JhbC5yb3VuZAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTgKICAgIC8vIGJpblJvdW5kU3RhcnQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnYmluUm91bmRTdGFydCcgfSkKICAgIGJ5dGVjIDkgLy8gImJpblJvdW5kU3RhcnQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjM4NAogICAgLy8gY29uc3Qgcm91bmRzTGVmdEluQmluOiB1aW50NjQgPSB0aGlzLmJpblJvdW5kU3RhcnQudmFsdWUgKyB0aGlzLnJvdW5kc1BlckRheS52YWx1ZSAtIEdsb2JhbC5yb3VuZAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk2CiAgICAvLyByb3VuZHNQZXJEYXkgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAncm91bmRzUGVyRGF5JyB9KQogICAgYnl0ZWMgNyAvLyAicm91bmRzUGVyRGF5IgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozODQKICAgIC8vIGNvbnN0IHJvdW5kc0xlZnRJbkJpbjogdWludDY0ID0gdGhpcy5iaW5Sb3VuZFN0YXJ0LnZhbHVlICsgdGhpcy5yb3VuZHNQZXJEYXkudmFsdWUgLSBHbG9iYWwucm91bmQKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICArCiAgICBnbG9iYWwgUm91bmQKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mzg1CiAgICAvLyBjb25zdCBzdWJ0cmFjdEFtb3VudCA9IEJpZ1VpbnQoYW1vdW50VG9VbnN0YWtlICogcm91bmRzTGVmdEluQmluKQogICAgZnJhbWVfZGlnIC0xCiAgICAqCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjM4NgogICAgLy8gdGhpcy5zdGFrZUFjY3VtdWxhdG9yLnZhbHVlID0gbmV3IFVpbnQxMjgodGhpcy5zdGFrZUFjY3VtdWxhdG9yLnZhbHVlLm5hdGl2ZSAtIHN1YnRyYWN0QW1vdW50KQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTAwCiAgICAvLyBzdGFrZUFjY3VtdWxhdG9yID0gR2xvYmFsU3RhdGU8VWludDEyOD4oeyBrZXk6ICdzdGFrZUFjY3VtdWxhdG9yJyB9KQogICAgYnl0ZWMgNiAvLyAic3Rha2VBY2N1bXVsYXRvciIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mzg2CiAgICAvLyB0aGlzLnN0YWtlQWNjdW11bGF0b3IudmFsdWUgPSBuZXcgVWludDEyOCh0aGlzLnN0YWtlQWNjdW11bGF0b3IudmFsdWUubmF0aXZlIC0gc3VidHJhY3RBbW91bnQpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgc3dhcAogICAgYi0KICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBiemVybwogICAgYnwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTAwCiAgICAvLyBzdGFrZUFjY3VtdWxhdG9yID0gR2xvYmFsU3RhdGU8VWludDEyOD4oeyBrZXk6ICdzdGFrZUFjY3VtdWxhdG9yJyB9KQogICAgYnl0ZWMgNiAvLyAic3Rha2VBY2N1bXVsYXRvciIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Mzg2CiAgICAvLyB0aGlzLnN0YWtlQWNjdW11bGF0b3IudmFsdWUgPSBuZXcgVWludDEyOCh0aGlzLnN0YWtlQWNjdW11bGF0b3IudmFsdWUubmF0aXZlIC0gc3VidHJhY3RBbW91bnQpCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozOTEtNDAwCiAgICAvLyBhYmlDYWxsKFZhbGlkYXRvclJlZ2lzdHJ5QUJJLnByb3RvdHlwZS5zdGFrZVJlbW92ZWQsIHsKICAgIC8vICAgYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgLy8gICBhcmdzOiBbCiAgICAvLyAgICAgeyBpZDogdGhpcy52YWxpZGF0b3JJZC52YWx1ZSwgcG9vbElkOiB0aGlzLnBvb2xJZC52YWx1ZSwgcG9vbEFwcElkOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQuaWQgfSwKICAgIC8vICAgICBzdGFrZXIsCiAgICAvLyAgICAgYW1vdW50VG9VbnN0YWtlLAogICAgLy8gICAgIGFtb3VudFJld2FyZFRva2VuUmVtb3ZlZCwKICAgIC8vICAgICBzdGFrZXJSZW1vdmVkLAogICAgLy8gICBdLAogICAgLy8gfSkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzkyCiAgICAvLyBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2NgogICAgLy8gY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ2NyZWF0b3JBcHAnIH0pCiAgICBieXRlY18xIC8vICJjcmVhdG9yQXBwIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozOTIKICAgIC8vIGFwcElkOiB0aGlzLmNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZC52YWx1ZSwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjM5NAogICAgLy8geyBpZDogdGhpcy52YWxpZGF0b3JJZC52YWx1ZSwgcG9vbElkOiB0aGlzLnBvb2xJZC52YWx1ZSwgcG9vbEFwcElkOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQuaWQgfSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY5CiAgICAvLyB2YWxpZGF0b3JJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICd2YWxpZGF0b3JJZCcgfSkKICAgIGJ5dGVjXzMgLy8gInZhbGlkYXRvcklkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozOTQKICAgIC8vIHsgaWQ6IHRoaXMudmFsaWRhdG9ySWQudmFsdWUsIHBvb2xJZDogdGhpcy5wb29sSWQudmFsdWUsIHBvb2xBcHBJZDogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLmlkIH0sCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzIKICAgIC8vIHBvb2xJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdwb29sSWQnIH0pCiAgICBieXRlYyA0IC8vICJwb29sSWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjM5NAogICAgLy8geyBpZDogdGhpcy52YWxpZGF0b3JJZC52YWx1ZSwgcG9vbElkOiB0aGlzLnBvb2xJZC52YWx1ZSwgcG9vbEFwcElkOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQuaWQgfSwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uSUQKICAgIHVuY292ZXIgMgogICAgaXRvYgogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozOTYKICAgIC8vIGFtb3VudFRvVW5zdGFrZSwKICAgIGZyYW1lX2RpZyAtMQogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozOTcKICAgIC8vIGFtb3VudFJld2FyZFRva2VuUmVtb3ZlZCwKICAgIGZyYW1lX2RpZyAyCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjM5OAogICAgLy8gc3Rha2VyUmVtb3ZlZCwKICAgIHB1c2hieXRlcyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfZGlnIDcKICAgIHNldGJpdAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czozOTEtNDAwCiAgICAvLyBhYmlDYWxsKFZhbGlkYXRvclJlZ2lzdHJ5QUJJLnByb3RvdHlwZS5zdGFrZVJlbW92ZWQsIHsKICAgIC8vICAgYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgLy8gICBhcmdzOiBbCiAgICAvLyAgICAgeyBpZDogdGhpcy52YWxpZGF0b3JJZC52YWx1ZSwgcG9vbElkOiB0aGlzLnBvb2xJZC52YWx1ZSwgcG9vbEFwcElkOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQuaWQgfSwKICAgIC8vICAgICBzdGFrZXIsCiAgICAvLyAgICAgYW1vdW50VG9VbnN0YWtlLAogICAgLy8gICAgIGFtb3VudFJld2FyZFRva2VuUmVtb3ZlZCwKICAgIC8vICAgICBzdGFrZXJSZW1vdmVkLAogICAgLy8gICBdLAogICAgLy8gfSkKICAgIGJ5dGVjIDIzIC8vIG1ldGhvZCAic3Rha2VSZW1vdmVkKCh1aW50NjQsdWludDY0LHVpbnQ2NCksYWRkcmVzcyx1aW50NjQsdWludDY0LGJvb2wpdm9pZCIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICB1bmNvdmVyIDMKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICB1bmNvdmVyIDIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBzd2FwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgaW50Y18zIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDAxCiAgICAvLyByZXR1cm4KICAgIHJldHN1YgoKcmVtb3ZlU3Rha2VfYm9vbF9mYWxzZUAxOToKICAgIGludGNfMCAvLyAwCiAgICBiIHJlbW92ZVN0YWtlX2Jvb2xfbWVyZ2VAMjAKCnJlbW92ZVN0YWtlX2Vsc2VfYm9keUAxNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MzUxCiAgICAvLyBjbXBTdGFrZXIucmV3YXJkVG9rZW5CYWxhbmNlID0gMAogICAgaW50Y18wIC8vIDAKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAwCiAgICBzd2FwCiAgICByZXBsYWNlMiA0OAogICAgZnJhbWVfYnVyeSAwCiAgICBiIHJlbW92ZVN0YWtlX2FmdGVyX2lmX2Vsc2VAMTUKCnJlbW92ZVN0YWtlX2FmdGVyX2lmX2Vsc2VAMjU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjMxMAogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHRoaXMuc3Rha2Vycy52YWx1ZS5sZW5ndGg7IGkgKz0gMSkgewogICAgZnJhbWVfZGlnIDYKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDYKICAgIGIgcmVtb3ZlU3Rha2Vfd2hpbGVfdG9wQDMKCgovLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjpTdGFraW5nUG9vbC5jbGFpbVRva2VucygpIC0+IHZvaWQ6CmNsYWltVG9rZW5zOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0MTIKICAgIC8vIGNsYWltVG9rZW5zKCk6IHZvaWQgewogICAgcHJvdG8gMCAwCiAgICBpbnRjXzAgLy8gMAogICAgZHVwCiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0MTYKICAgIC8vIGNvbnN0IHN0YWtlciA9IFR4bi5zZW5kZXIKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDE4CiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgdGhpcy5zdGFrZXJzLnZhbHVlLmxlbmd0aDsgaSArPSAxKSB7CiAgICBpbnRjXzAgLy8gMAoKY2xhaW1Ub2tlbnNfd2hpbGVfdG9wQDE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkyCiAgICAvLyBzdGFrZXJzID0gQm94PEZpeGVkQXJyYXk8U3Rha2VkSW5mbywgdHlwZW9mIE1BWF9TVEFLRVJTX1BFUl9QT09MPj4oeyBrZXk6ICdzdGFrZXJzJyB9KQogICAgYnl0ZWNfMCAvLyAic3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDE4CiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgdGhpcy5zdGFrZXJzLnZhbHVlLmxlbmd0aDsgaSArPSAxKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBmcmFtZV9kaWcgNQogICAgZHVwCiAgICBpbnRjIDQgLy8gMjAwCiAgICA8CiAgICBhc3NlcnQgLy8gYWNjb3VudCBub3QgZm91bmQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDE5CiAgICAvLyBlbnN1cmVCdWRnZXQoMzAwKQogICAgaW50YyA3IC8vIDMwMAogICAgaW50Y18wIC8vIDAKICAgIGNhbGxzdWIgZW5zdXJlX2J1ZGdldAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0MjEKICAgIC8vIGNvbnN0IGNtcFN0YWtlciA9IGNsb25lKHRoaXMuc3Rha2Vycy52YWx1ZVtpXSkKICAgIGludGNfMiAvLyA2NAogICAgKgogICAgZHVwCiAgICBmcmFtZV9idXJ5IDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTIKICAgIC8vIHN0YWtlcnMgPSBCb3g8Rml4ZWRBcnJheTxTdGFrZWRJbmZvLCB0eXBlb2YgTUFYX1NUQUtFUlNfUEVSX1BPT0w+Pih7IGtleTogJ3N0YWtlcnMnIH0pCiAgICBieXRlY18wIC8vICJzdGFrZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0MjEKICAgIC8vIGNvbnN0IGNtcFN0YWtlciA9IGNsb25lKHRoaXMuc3Rha2Vycy52YWx1ZVtpXSkKICAgIHN3YXAKICAgIGludGNfMiAvLyA2NAogICAgYm94X2V4dHJhY3QKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQyMS00MjIKICAgIC8vIGNvbnN0IGNtcFN0YWtlciA9IGNsb25lKHRoaXMuc3Rha2Vycy52YWx1ZVtpXSkKICAgIC8vIGlmIChjbXBTdGFrZXIuYWNjb3VudC5uYXRpdmUgPT09IHN0YWtlcikgewogICAgZXh0cmFjdCAwIDMyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQyMgogICAgLy8gaWYgKGNtcFN0YWtlci5hY2NvdW50Lm5hdGl2ZSA9PT0gc3Rha2VyKSB7CiAgICBmcmFtZV9kaWcgNAogICAgPT0KICAgIGJ6IGNsYWltVG9rZW5zX2FmdGVyX2lmX2Vsc2VAMTIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTIKICAgIC8vIHN0YWtlcnMgPSBCb3g8Rml4ZWRBcnJheTxTdGFrZWRJbmZvLCB0eXBlb2YgTUFYX1NUQUtFUlNfUEVSX1BPT0w+Pih7IGtleTogJ3N0YWtlcnMnIH0pCiAgICBieXRlY18wIC8vICJzdGFrZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0MjEKICAgIC8vIGNvbnN0IGNtcFN0YWtlciA9IGNsb25lKHRoaXMuc3Rha2Vycy52YWx1ZVtpXSkKICAgIGZyYW1lX2RpZyAzCiAgICBpbnRjXzIgLy8gNjQKICAgIGJveF9leHRyYWN0CiAgICBkdXAKICAgIGV4dHJhY3QgNDggOAogICAgZnJhbWVfYnVyeSAwCiAgICBwdXNoaW50IDQ4IC8vIDQ4CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQyMwogICAgLy8gaWYgKGNtcFN0YWtlci5yZXdhcmRUb2tlbkJhbGFuY2UgPT09IDApIHsKICAgIGV4dHJhY3RfdWludDY0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMgogICAgYm56IGNsYWltVG9rZW5zX2FmdGVyX2lmX2Vsc2VANQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0MjQKICAgIC8vIHJldHVybgogICAgcmV0c3ViCgpjbGFpbVRva2Vuc19hZnRlcl9pZl9lbHNlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQyOAogICAgLy8gaWYgKHRoaXMucG9vbElkLnZhbHVlID09PSAxKSB7CiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MgogICAgLy8gcG9vbElkID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ3Bvb2xJZCcgfSkKICAgIGJ5dGVjIDQgLy8gInBvb2xJZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDI4CiAgICAvLyBpZiAodGhpcy5wb29sSWQudmFsdWUgPT09IDEpIHsKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGJ6IGNsYWltVG9rZW5zX2Vsc2VfYm9keUA5CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQyOS00MzIKICAgIC8vIGNvbnN0IHZhbGlkYXRvckNvbmZpZyA9IGFiaUNhbGwoVmFsaWRhdG9yUmVnaXN0cnlBQkkucHJvdG90eXBlLmdldFZhbGlkYXRvckNvbmZpZywgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlXSwKICAgIC8vIH0pLnJldHVyblZhbHVlIC8vIC0tLS0tLS0tLQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0MzAKICAgIC8vIGFwcElkOiB0aGlzLmNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZC52YWx1ZSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY2CiAgICAvLyBjcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnY3JlYXRvckFwcCcgfSkKICAgIGJ5dGVjXzEgLy8gImNyZWF0b3JBcHAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQzMAogICAgLy8gYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDMxCiAgICAvLyBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2OQogICAgLy8gdmFsaWRhdG9ySWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAndmFsaWRhdG9ySWQnIH0pCiAgICBieXRlY18zIC8vICJ2YWxpZGF0b3JJZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDMxCiAgICAvLyBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0MjktNDMyCiAgICAvLyBjb25zdCB2YWxpZGF0b3JDb25maWcgPSBhYmlDYWxsKFZhbGlkYXRvclJlZ2lzdHJ5QUJJLnByb3RvdHlwZS5nZXRWYWxpZGF0b3JDb25maWcsIHsKICAgIC8vICAgYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgLy8gICBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICAvLyB9KS5yZXR1cm5WYWx1ZSAvLyAtLS0tLS0tLS0KICAgIGJ5dGVjIDEzIC8vIG1ldGhvZCAiZ2V0VmFsaWRhdG9yQ29uZmlnKHVpbnQ2NCkodWludDY0LGFkZHJlc3MsYWRkcmVzcyx1aW50NjQsdWludDgsYWRkcmVzcyx1aW50NjRbNF0sdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDMyLHVpbnQzMixhZGRyZXNzLHVpbnQ2NCx1aW50NjQsdWludDgsdWludDY0LHVpbnQ2NCkiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgaW50Y18zIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDM1LTQ0MQogICAgLy8gaXR4bgogICAgLy8gICAuYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgICAgeGZlckFzc2V0OiB2YWxpZGF0b3JDb25maWcucmV3YXJkVG9rZW5JZCwKICAgIC8vICAgICBhc3NldFJlY2VpdmVyOiBzdGFrZXIsCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IGNtcFN0YWtlci5yZXdhcmRUb2tlbkJhbGFuY2UsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgaW50YyA2IC8vIDE1NwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0MzcKICAgIC8vIHhmZXJBc3NldDogdmFsaWRhdG9yQ29uZmlnLnJld2FyZFRva2VuSWQsCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZnJhbWVfZGlnIDIKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGZyYW1lX2RpZyA0CiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQzNS00NDAKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIHhmZXJBc3NldDogdmFsaWRhdG9yQ29uZmlnLnJld2FyZFRva2VuSWQsCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogc3Rha2VyLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiBjbXBTdGFrZXIucmV3YXJkVG9rZW5CYWxhbmNlLAogICAgLy8gICB9KQogICAgcHVzaGludCA0IC8vIDQKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0MzUtNDQxCiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IHZhbGlkYXRvckNvbmZpZy5yZXdhcmRUb2tlbklkLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IHN0YWtlciwKICAgIC8vICAgICBhc3NldEFtb3VudDogY21wU3Rha2VyLnJld2FyZFRva2VuQmFsYW5jZSwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0NDMKICAgIC8vIGNtcFN0YWtlci5yZXdhcmRUb2tlbkJhbGFuY2UgPSAwCiAgICBpbnRjXzAgLy8gMAogICAgaXRvYgogICAgZnJhbWVfZGlnIDEKICAgIHN3YXAKICAgIHJlcGxhY2UyIDQ4CiAgICBmcmFtZV9idXJ5IDEKCmNsYWltVG9rZW5zX2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkyCiAgICAvLyBzdGFrZXJzID0gQm94PEZpeGVkQXJyYXk8U3Rha2VkSW5mbywgdHlwZW9mIE1BWF9TVEFLRVJTX1BFUl9QT09MPj4oeyBrZXk6ICdzdGFrZXJzJyB9KQogICAgYnl0ZWNfMCAvLyAic3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDUzCiAgICAvLyB0aGlzLnN0YWtlcnMudmFsdWVbaV0gPSBjbG9uZShjbXBTdGFrZXIpCiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIDEKICAgIGJveF9yZXBsYWNlCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQ1OC00NjcKICAgIC8vIGFiaUNhbGwoVmFsaWRhdG9yUmVnaXN0cnlBQkkucHJvdG90eXBlLnN0YWtlUmVtb3ZlZCwgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFsKICAgIC8vICAgICB7IGlkOiB0aGlzLnZhbGlkYXRvcklkLnZhbHVlLCBwb29sSWQ6IHRoaXMucG9vbElkLnZhbHVlLCBwb29sQXBwSWQ6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZC5pZCB9LAogICAgLy8gICAgIG5ldyBBZGRyZXNzKHN0YWtlciksCiAgICAvLyAgICAgMCwgLy8gbm8gYWxnbyByZW1vdmVkCiAgICAvLyAgICAgYW1vdW50UmV3YXJkVG9rZW5SZW1vdmVkLAogICAgLy8gICAgIGZhbHNlLCAvLyBzdGFrZXIgaXNuJ3QgYmVpbmcgcmVtb3ZlZC4KICAgIC8vICAgXSwKICAgIC8vIH0pCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQ1OQogICAgLy8gYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjYKICAgIC8vIGNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdjcmVhdG9yQXBwJyB9KQogICAgYnl0ZWNfMSAvLyAiY3JlYXRvckFwcCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDU5CiAgICAvLyBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0NjEKICAgIC8vIHsgaWQ6IHRoaXMudmFsaWRhdG9ySWQudmFsdWUsIHBvb2xJZDogdGhpcy5wb29sSWQudmFsdWUsIHBvb2xBcHBJZDogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLmlkIH0sCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2OQogICAgLy8gdmFsaWRhdG9ySWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAndmFsaWRhdG9ySWQnIH0pCiAgICBieXRlY18zIC8vICJ2YWxpZGF0b3JJZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDYxCiAgICAvLyB7IGlkOiB0aGlzLnZhbGlkYXRvcklkLnZhbHVlLCBwb29sSWQ6IHRoaXMucG9vbElkLnZhbHVlLCBwb29sQXBwSWQ6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZC5pZCB9LAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjcyCiAgICAvLyBwb29sSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAncG9vbElkJyB9KQogICAgYnl0ZWMgNCAvLyAicG9vbElkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0NjEKICAgIC8vIHsgaWQ6IHRoaXMudmFsaWRhdG9ySWQudmFsdWUsIHBvb2xJZDogdGhpcy5wb29sSWQudmFsdWUsIHBvb2xBcHBJZDogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLmlkIH0sCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbklECiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIHVuY292ZXIgMgogICAgaXRvYgogICAgY29uY2F0CiAgICBzd2FwCiAgICBpdG9iCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDYzCiAgICAvLyAwLCAvLyBubyBhbGdvIHJlbW92ZWQKICAgIGludGNfMCAvLyAwCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQ1OC00NjcKICAgIC8vIGFiaUNhbGwoVmFsaWRhdG9yUmVnaXN0cnlBQkkucHJvdG90eXBlLnN0YWtlUmVtb3ZlZCwgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFsKICAgIC8vICAgICB7IGlkOiB0aGlzLnZhbGlkYXRvcklkLnZhbHVlLCBwb29sSWQ6IHRoaXMucG9vbElkLnZhbHVlLCBwb29sQXBwSWQ6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZC5pZCB9LAogICAgLy8gICAgIG5ldyBBZGRyZXNzKHN0YWtlciksCiAgICAvLyAgICAgMCwgLy8gbm8gYWxnbyByZW1vdmVkCiAgICAvLyAgICAgYW1vdW50UmV3YXJkVG9rZW5SZW1vdmVkLAogICAgLy8gICAgIGZhbHNlLCAvLyBzdGFrZXIgaXNuJ3QgYmVpbmcgcmVtb3ZlZC4KICAgIC8vICAgXSwKICAgIC8vIH0pCiAgICBieXRlYyAyMyAvLyBtZXRob2QgInN0YWtlUmVtb3ZlZCgodWludDY0LHVpbnQ2NCx1aW50NjQpLGFkZHJlc3MsdWludDY0LHVpbnQ2NCxib29sKXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgc3dhcAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGZyYW1lX2RpZyA0CiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGZyYW1lX2RpZyAwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0NjUKICAgIC8vIGZhbHNlLCAvLyBzdGFrZXIgaXNuJ3QgYmVpbmcgcmVtb3ZlZC4KICAgIHB1c2hieXRlcyAweDAwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQ1OC00NjcKICAgIC8vIGFiaUNhbGwoVmFsaWRhdG9yUmVnaXN0cnlBQkkucHJvdG90eXBlLnN0YWtlUmVtb3ZlZCwgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFsKICAgIC8vICAgICB7IGlkOiB0aGlzLnZhbGlkYXRvcklkLnZhbHVlLCBwb29sSWQ6IHRoaXMucG9vbElkLnZhbHVlLCBwb29sQXBwSWQ6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZC5pZCB9LAogICAgLy8gICAgIG5ldyBBZGRyZXNzKHN0YWtlciksCiAgICAvLyAgICAgMCwgLy8gbm8gYWxnbyByZW1vdmVkCiAgICAvLyAgICAgYW1vdW50UmV3YXJkVG9rZW5SZW1vdmVkLAogICAgLy8gICAgIGZhbHNlLCAvLyBzdGFrZXIgaXNuJ3QgYmVpbmcgcmVtb3ZlZC4KICAgIC8vICAgXSwKICAgIC8vIH0pCiAgICBpbnRjXzMgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0NjgKICAgIC8vIHJldHVybgogICAgcmV0c3ViCgpjbGFpbVRva2Vuc19lbHNlX2JvZHlAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDQ5CiAgICAvLyBjbXBTdGFrZXIucmV3YXJkVG9rZW5CYWxhbmNlID0gMAogICAgaW50Y18wIC8vIDAKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAxCiAgICBzd2FwCiAgICByZXBsYWNlMiA0OAogICAgZnJhbWVfYnVyeSAxCiAgICBiIGNsYWltVG9rZW5zX2FmdGVyX2lmX2Vsc2VAMTAKCmNsYWltVG9rZW5zX2FmdGVyX2lmX2Vsc2VAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQxOAogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHRoaXMuc3Rha2Vycy52YWx1ZS5sZW5ndGg7IGkgKz0gMSkgewogICAgZnJhbWVfZGlnIDUKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDUKICAgIGIgY2xhaW1Ub2tlbnNfd2hpbGVfdG9wQDEKCgovLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjpTdGFraW5nUG9vbC5nZXRTdGFrZXJJbmZvKHN0YWtlcjogYnl0ZXMpIC0+IGJ5dGVzOgpnZXRTdGFrZXJJbmZvOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0ODIKICAgIC8vIGdldFN0YWtlckluZm8oc3Rha2VyOiBBZGRyZXNzKTogU3Rha2VkSW5mbyB7CiAgICBwcm90byAxIDEKICAgIHB1c2hieXRlcyAiIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0ODMKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDA7IGkgPCB0aGlzLnN0YWtlcnMudmFsdWUubGVuZ3RoOyBpICs9IDEpIHsKICAgIGludGNfMCAvLyAwCgpnZXRTdGFrZXJJbmZvX3doaWxlX3RvcEAxOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MgogICAgLy8gc3Rha2VycyA9IEJveDxGaXhlZEFycmF5PFN0YWtlZEluZm8sIHR5cGVvZiBNQVhfU1RBS0VSU19QRVJfUE9PTD4+KHsga2V5OiAnc3Rha2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInN0YWtlcnMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQ4MwogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHRoaXMuc3Rha2Vycy52YWx1ZS5sZW5ndGg7IGkgKz0gMSkgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfZGlnIDEKICAgIGR1cAogICAgaW50YyA0IC8vIDIwMAogICAgPAogICAgYXNzZXJ0IC8vIGFjY291bnQgbm90IGZvdW5kCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQ4NAogICAgLy8gZW5zdXJlQnVkZ2V0KDIwMCkKICAgIGludGMgNCAvLyAyMDAKICAgIGludGNfMCAvLyAwCiAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NDg1CiAgICAvLyBpZiAodGhpcy5zdGFrZXJzLnZhbHVlW2ldLmFjY291bnQgPT09IHN0YWtlcikgewogICAgaW50Y18yIC8vIDY0CiAgICAqCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MgogICAgLy8gc3Rha2VycyA9IEJveDxGaXhlZEFycmF5PFN0YWtlZEluZm8sIHR5cGVvZiBNQVhfU1RBS0VSU19QRVJfUE9PTD4+KHsga2V5OiAnc3Rha2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInN0YWtlcnMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQ4NQogICAgLy8gaWYgKHRoaXMuc3Rha2Vycy52YWx1ZVtpXS5hY2NvdW50ID09PSBzdGFrZXIpIHsKICAgIHN3YXAKICAgIGludGNfMiAvLyA2NAogICAgYm94X2V4dHJhY3QKICAgIGV4dHJhY3QgMCAzMgogICAgZnJhbWVfZGlnIC0xCiAgICA9PQogICAgYnogZ2V0U3Rha2VySW5mb19hZnRlcl9pZl9lbHNlQDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTIKICAgIC8vIHN0YWtlcnMgPSBCb3g8Rml4ZWRBcnJheTxTdGFrZWRJbmZvLCB0eXBlb2YgTUFYX1NUQUtFUlNfUEVSX1BPT0w+Pih7IGtleTogJ3N0YWtlcnMnIH0pCiAgICBieXRlY18wIC8vICJzdGFrZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo0ODYKICAgIC8vIHJldHVybiB0aGlzLnN0YWtlcnMudmFsdWVbaV0KICAgIGZyYW1lX2RpZyAwCiAgICBpbnRjXzIgLy8gNjQKICAgIGJveF9leHRyYWN0CiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKZ2V0U3Rha2VySW5mb19hZnRlcl9pZl9lbHNlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjQ4MwogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHRoaXMuc3Rha2Vycy52YWx1ZS5sZW5ndGg7IGkgKz0gMSkgewogICAgZnJhbWVfZGlnIDEKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDEKICAgIGIgZ2V0U3Rha2VySW5mb193aGlsZV90b3BAMQoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OlN0YWtpbmdQb29sLnBheVRva2VuUmV3YXJkKHN0YWtlcjogYnl0ZXMsIHJld2FyZFRva2VuOiB1aW50NjQsIGFtb3VudFRvU2VuZDogdWludDY0KSAtPiB2b2lkOgpwYXlUb2tlblJld2FyZDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTAyCiAgICAvLyBwYXlUb2tlblJld2FyZChzdGFrZXI6IEFkZHJlc3MsIHJld2FyZFRva2VuOiB1aW50NjQsIGFtb3VudFRvU2VuZDogdWludDY0KTogdm9pZCB7CiAgICBwcm90byAzIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTA1CiAgICAvLyBUeG4uc2VuZGVyID09PSBBcHBsaWNhdGlvbih0aGlzLmNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZC52YWx1ZSkuYWRkcmVzcywKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY2CiAgICAvLyBjcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnY3JlYXRvckFwcCcgfSkKICAgIGJ5dGVjXzEgLy8gImNyZWF0b3JBcHAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjUwNQogICAgLy8gVHhuLnNlbmRlciA9PT0gQXBwbGljYXRpb24odGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUpLmFkZHJlc3MsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwogICAgYXNzZXJ0IC8vIGFwcGxpY2F0aW9uIGV4aXN0cwogICAgPT0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTA0LTUwNwogICAgLy8gYXNzZXJ0KAogICAgLy8gICBUeG4uc2VuZGVyID09PSBBcHBsaWNhdGlvbih0aGlzLmNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZC52YWx1ZSkuYWRkcmVzcywKICAgIC8vICAgJ3RoaXMgY2FuIG9ubHkgYmUgY2FsbGVkIHZpYSB0aGUgdmFsaWRhdG9yIGNvbnRyYWN0JywKICAgIC8vICkKICAgIGFzc2VydCAvLyB0aGlzIGNhbiBvbmx5IGJlIGNhbGxlZCB2aWEgdGhlIHZhbGlkYXRvciBjb250cmFjdAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1MDgKICAgIC8vIGFzc2VydCh0aGlzLnBvb2xJZC52YWx1ZSA9PT0gMSwgJ211c3QgYmUgcG9vbCAxIGluIG9yZGVyIHRvIGJlIGNhbGxlZCB0byBwYXkgb3V0IHRva2VuIHJld2FyZHMnKQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzIKICAgIC8vIHBvb2xJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdwb29sSWQnIH0pCiAgICBieXRlYyA0IC8vICJwb29sSWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjUwOAogICAgLy8gYXNzZXJ0KHRoaXMucG9vbElkLnZhbHVlID09PSAxLCAnbXVzdCBiZSBwb29sIDEgaW4gb3JkZXIgdG8gYmUgY2FsbGVkIHRvIHBheSBvdXQgdG9rZW4gcmV3YXJkcycpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBwb29sIDEgaW4gb3JkZXIgdG8gYmUgY2FsbGVkIHRvIHBheSBvdXQgdG9rZW4gcmV3YXJkcwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1MDkKICAgIC8vIGFzc2VydChyZXdhcmRUb2tlbiAhPT0gMCwgJ2NhbiBvbmx5IGNsYWltIHRva2VuIHJld2FyZHMgZnJvbSB2YWxpZGF0b3IgdGhhdCBoYXMgdGhlbScpCiAgICBmcmFtZV9kaWcgLTIKICAgIGFzc2VydCAvLyBjYW4gb25seSBjbGFpbSB0b2tlbiByZXdhcmRzIGZyb20gdmFsaWRhdG9yIHRoYXQgaGFzIHRoZW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTEyLTUxOAogICAgLy8gaXR4bgogICAgLy8gICAuYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgICAgeGZlckFzc2V0OiByZXdhcmRUb2tlbiwKICAgIC8vICAgICBhc3NldFJlY2VpdmVyOiBzdGFrZXIubmF0aXZlLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiBhbW91bnRUb1NlbmQsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBmcmFtZV9kaWcgLTMKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgZnJhbWVfZGlnIC0yCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1MTItNTE3CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IHJld2FyZFRva2VuLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IHN0YWtlci5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IGFtb3VudFRvU2VuZCwKICAgIC8vICAgfSkKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTEyLTUxOAogICAgLy8gaXR4bgogICAgLy8gICAuYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgICAgeGZlckFzc2V0OiByZXdhcmRUb2tlbiwKICAgIC8vICAgICBhc3NldFJlY2VpdmVyOiBzdGFrZXIubmF0aXZlLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiBhbW91bnRUb1NlbmQsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OlN0YWtpbmdQb29sLnVwZGF0ZUFsZ29kVmVyKGFsZ29kVmVyOiBieXRlcykgLT4gdm9pZDoKdXBkYXRlQWxnb2RWZXI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjUzMAogICAgLy8gdXBkYXRlQWxnb2RWZXIoYWxnb2RWZXI6IHN0cmluZyk6IHZvaWQgewogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjUzMQogICAgLy8gYXNzZXJ0KHRoaXMuaXNPd25lck9yTWFuYWdlckNhbGxlcigpLCAnY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IG93bmVyIG9yIG1hbmFnZXIgb2YgdmFsaWRhdG9yJykKICAgIGNhbGxzdWIgaXNPd25lck9yTWFuYWdlckNhbGxlcgogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGJlIGNhbGxlZCBieSBvd25lciBvciBtYW5hZ2VyIG9mIHZhbGlkYXRvcgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4OQogICAgLy8gYWxnb2RWZXIgPSBHbG9iYWxTdGF0ZTxieXRlcz4oeyBrZXk6ICdhbGdvZFZlcicgfSkKICAgIHB1c2hieXRlcyAiYWxnb2RWZXIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjUzMgogICAgLy8gdGhpcy5hbGdvZFZlci52YWx1ZSA9IEJ5dGVzKGFsZ29kVmVyKQogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo6U3Rha2luZ1Bvb2wuZXBvY2hCYWxhbmNlVXBkYXRlKCkgLT4gdm9pZDoKZXBvY2hCYWxhbmNlVXBkYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1NDMKICAgIC8vIGVwb2NoQmFsYW5jZVVwZGF0ZSgpOiB2b2lkIHsKICAgIHByb3RvIDAgMAogICAgaW50Y18wIC8vIDAKICAgIGR1cG4gOQogICAgcHVzaGJ5dGVzICIiCiAgICBkdXBuIDMyCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1NDUtNTQ4CiAgICAvLyBjb25zdCB2YWxpZGF0b3JDb25maWcgPSBhYmlDYWxsKFZhbGlkYXRvclJlZ2lzdHJ5QUJJLnByb3RvdHlwZS5nZXRWYWxpZGF0b3JDb25maWcsIHsKICAgIC8vICAgYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgLy8gICBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICAvLyB9KS5yZXR1cm5WYWx1ZQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1NDYKICAgIC8vIGFwcElkOiB0aGlzLmNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZC52YWx1ZSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY2CiAgICAvLyBjcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnY3JlYXRvckFwcCcgfSkKICAgIGJ5dGVjXzEgLy8gImNyZWF0b3JBcHAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjU0NgogICAgLy8gYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTQ3CiAgICAvLyBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2OQogICAgLy8gdmFsaWRhdG9ySWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAndmFsaWRhdG9ySWQnIH0pCiAgICBieXRlY18zIC8vICJ2YWxpZGF0b3JJZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTQ3CiAgICAvLyBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1NDUtNTQ4CiAgICAvLyBjb25zdCB2YWxpZGF0b3JDb25maWcgPSBhYmlDYWxsKFZhbGlkYXRvclJlZ2lzdHJ5QUJJLnByb3RvdHlwZS5nZXRWYWxpZGF0b3JDb25maWcsIHsKICAgIC8vICAgYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgLy8gICBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICAvLyB9KS5yZXR1cm5WYWx1ZQogICAgYnl0ZWMgMTMgLy8gbWV0aG9kICJnZXRWYWxpZGF0b3JDb25maWcodWludDY0KSh1aW50NjQsYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NCx1aW50OCxhZGRyZXNzLHVpbnQ2NFs0XSx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50MzIsdWludDMyLGFkZHJlc3MsdWludDY0LHVpbnQ2NCx1aW50OCx1aW50NjQsdWludDY0KSIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBpbnRjXzMgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBMYXN0TG9nCiAgICBkdXBuIDIKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgcHVzaGludCAxNzMgLy8gMTczCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjU1NAogICAgLy8gY29uc3QgZXBvY2hSb3VuZExlbmd0aCA9IHZhbGlkYXRvckNvbmZpZy5lcG9jaFJvdW5kTGVuZ3RoLm5hdGl2ZQogICAgZXh0cmFjdF91aW50MzIKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1NTUKICAgIC8vIGNvbnN0IGN1clJvdW5kID0gR2xvYmFsLnJvdW5kCiAgICBnbG9iYWwgUm91bmQKICAgIGR1cAogICAgY292ZXIgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1NTYKICAgIC8vIGNvbnN0IHRoaXNFcG9jaEJlZ2luOiB1aW50NjQgPSBjdXJSb3VuZCAtIChjdXJSb3VuZCAlIGVwb2NoUm91bmRMZW5ndGgpCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgJQogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1NTkKICAgIC8vIGlmICh0aGlzLmxhc3RQYXlvdXQuaGFzVmFsdWUpIHsKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgzCiAgICAvLyBsYXN0UGF5b3V0ID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ2xhc3RQYXlvdXQnIH0pCiAgICBieXRlYyAxMiAvLyAibGFzdFBheW91dCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTU5CiAgICAvLyBpZiAodGhpcy5sYXN0UGF5b3V0Lmhhc1ZhbHVlKSB7CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYnVyeSAxCiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjU2MAogICAgLy8gY29uc3QgbGFzdFBheW91dEVwb2NoOiB1aW50NjQgPSB0aGlzLmxhc3RQYXlvdXQudmFsdWUgLSAodGhpcy5sYXN0UGF5b3V0LnZhbHVlICUgZXBvY2hSb3VuZExlbmd0aCkKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgzCiAgICAvLyBsYXN0UGF5b3V0ID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ2xhc3RQYXlvdXQnIH0pCiAgICBieXRlYyAxMiAvLyAibGFzdFBheW91dCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTYwCiAgICAvLyBjb25zdCBsYXN0UGF5b3V0RXBvY2g6IHVpbnQ2NCA9IHRoaXMubGFzdFBheW91dC52YWx1ZSAtICh0aGlzLmxhc3RQYXlvdXQudmFsdWUgJSBlcG9jaFJvdW5kTGVuZ3RoKQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGR1cAogICAgZnJhbWVfZGlnIDQ1CiAgICAlCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjU2NAogICAgLy8gYXNzZXJ0KGxhc3RQYXlvdXRFcG9jaCAhPT0gdGhpc0Vwb2NoQmVnaW4sICJjYW4ndCBjYWxsIGVwb2NoQmFsYW5jZVVwZGF0ZSBpbiBzYW1lIGVwb2NoIGFzIHByaW9yIGNhbGwiKQogICAgZnJhbWVfZGlnIDQ3CiAgICAhPQogICAgYXNzZXJ0IC8vIGNhbid0IGNhbGwgZXBvY2hCYWxhbmNlVXBkYXRlIGluIHNhbWUgZXBvY2ggYXMgcHJpb3IgY2FsbAoKZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTY3CiAgICAvLyB0aGlzLmNoZWNrSWZCaW5DbG9zZWQoKQogICAgY2FsbHN1YiBjaGVja0lmQmluQ2xvc2VkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgzCiAgICAvLyBsYXN0UGF5b3V0ID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ2xhc3RQYXlvdXQnIH0pCiAgICBieXRlYyAxMiAvLyAibGFzdFBheW91dCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTcwCiAgICAvLyB0aGlzLmxhc3RQYXlvdXQudmFsdWUgPSBjdXJSb3VuZAogICAgZnJhbWVfZGlnIDQ2CiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1NzEKICAgIC8vIHRoaXMuZXBvY2hOdW1iZXIudmFsdWUgKz0gMQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODYKICAgIC8vIGVwb2NoTnVtYmVyID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ2Vwb2NoTnVtYmVyJyB9KQogICAgYnl0ZWMgMTUgLy8gImVwb2NoTnVtYmVyIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1NzEKICAgIC8vIHRoaXMuZXBvY2hOdW1iZXIudmFsdWUgKz0gMQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjg2CiAgICAvLyBlcG9jaE51bWJlciA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdlcG9jaE51bWJlcicgfSkKICAgIGJ5dGVjIDE1IC8vICJlcG9jaE51bWJlciIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTcxCiAgICAvLyB0aGlzLmVwb2NoTnVtYmVyLnZhbHVlICs9IDEKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjU3NgogICAgLy8gY29uc3QgaXNUb2tlbkVsaWdpYmxlID0gdmFsaWRhdG9yQ29uZmlnLnJld2FyZFRva2VuSWQgIT09IDAKICAgIGZyYW1lX2RpZyA0NAogICAgaW50YyA2IC8vIDE1NwogICAgZXh0cmFjdF91aW50NjQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAzNwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1NzcKICAgIC8vIGxldCBwb29sT25lQXBwSUQgPSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQuaWQKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAogICAgZnJhbWVfYnVyeSAyNgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1NzgKICAgIC8vIGxldCBwb29sT25lQWRkcmVzcyA9IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDcKICAgIGZyYW1lX2RpZyA0MwogICAgZnJhbWVfYnVyeSA5CiAgICBmcmFtZV9idXJ5IDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTgzCiAgICAvLyBpZiAoaXNUb2tlbkVsaWdpYmxlKSB7CiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUAxMwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1ODQKICAgIC8vIGlmICh0aGlzLnBvb2xJZC52YWx1ZSAhPT0gMSkgewogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzIKICAgIC8vIHBvb2xJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdwb29sSWQnIH0pCiAgICBieXRlYyA0IC8vICJwb29sSWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjU4NAogICAgLy8gaWYgKHRoaXMucG9vbElkLnZhbHVlICE9PSAxKSB7CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgICE9CiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjU4Ni01ODkKICAgIC8vIHBvb2xPbmVBcHBJRCA9IGFiaUNhbGwoVmFsaWRhdG9yUmVnaXN0cnlBQkkucHJvdG90eXBlLmdldFBvb2xBcHBJZCwgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlLCAxXSwKICAgIC8vIH0pLnJldHVyblZhbHVlCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjU4NwogICAgLy8gYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjYKICAgIC8vIGNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdjcmVhdG9yQXBwJyB9KQogICAgYnl0ZWNfMSAvLyAiY3JlYXRvckFwcCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTg3CiAgICAvLyBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1ODgKICAgIC8vIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlLCAxXSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY5CiAgICAvLyB2YWxpZGF0b3JJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICd2YWxpZGF0b3JJZCcgfSkKICAgIGJ5dGVjXzMgLy8gInZhbGlkYXRvcklkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1ODgKICAgIC8vIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlLCAxXSwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBpdG9iCiAgICBpbnRjXzEgLy8gMQogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1ODYtNTg5CiAgICAvLyBwb29sT25lQXBwSUQgPSBhYmlDYWxsKFZhbGlkYXRvclJlZ2lzdHJ5QUJJLnByb3RvdHlwZS5nZXRQb29sQXBwSWQsIHsKICAgIC8vICAgYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgLy8gICBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZSwgMV0sCiAgICAvLyB9KS5yZXR1cm5WYWx1ZQogICAgYnl0ZWMgMjQgLy8gbWV0aG9kICJnZXRQb29sQXBwSWQodWludDY0LHVpbnQ2NCl1aW50NjQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgc3dhcAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMyAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCA0IDAKICAgIHN3YXAKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgYnRvaQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDI2CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjU5MAogICAgLy8gcG9vbE9uZUFkZHJlc3MgPSBBcHBsaWNhdGlvbihwb29sT25lQXBwSUQpLmFkZHJlc3MKICAgIGFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKICAgIHN3YXAKICAgIGZyYW1lX2J1cnkgNwogICAgYXNzZXJ0IC8vIGFwcGxpY2F0aW9uIGV4aXN0cwoKZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTk1CiAgICAvLyBpZiAodGhpcy5wb29sSWQudmFsdWUgPT09IDEpIHsKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjcyCiAgICAvLyBwb29sSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAncG9vbElkJyB9KQogICAgYnl0ZWMgNCAvLyAicG9vbElkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1OTUKICAgIC8vIGlmICh0aGlzLnBvb2xJZC52YWx1ZSA9PT0gMSkgewogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICA9PQogICAgYnogZXBvY2hCYWxhbmNlVXBkYXRlX2Vsc2VfYm9keUAxMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1OTYtNTk5CiAgICAvLyB0b2tlblBheW91dFJhdGlvID0gYWJpQ2FsbChWYWxpZGF0b3JSZWdpc3RyeUFCSS5wcm90b3R5cGUuc2V0VG9rZW5QYXlvdXRSYXRpbywgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlXSwKICAgIC8vIH0pLnJldHVyblZhbHVlCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjU5NwogICAgLy8gYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjYKICAgIC8vIGNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdjcmVhdG9yQXBwJyB9KQogICAgYnl0ZWNfMSAvLyAiY3JlYXRvckFwcCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NTk3CiAgICAvLyBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1OTgKICAgIC8vIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlXSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY5CiAgICAvLyB2YWxpZGF0b3JJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICd2YWxpZGF0b3JJZCcgfSkKICAgIGJ5dGVjXzMgLy8gInZhbGlkYXRvcklkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo1OTgKICAgIC8vIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlXSwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjU5Ni01OTkKICAgIC8vIHRva2VuUGF5b3V0UmF0aW8gPSBhYmlDYWxsKFZhbGlkYXRvclJlZ2lzdHJ5QUJJLnByb3RvdHlwZS5zZXRUb2tlblBheW91dFJhdGlvLCB7CiAgICAvLyAgIGFwcElkOiB0aGlzLmNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZC52YWx1ZSwKICAgIC8vICAgYXJnczogW3RoaXMudmFsaWRhdG9ySWQudmFsdWVdLAogICAgLy8gfSkucmV0dXJuVmFsdWUKICAgIGJ5dGVjIDI1IC8vIG1ldGhvZCAic2V0VG9rZW5QYXlvdXRSYXRpbyh1aW50NjQpKHVpbnQ2NFsyNF0sdWludDY0KSIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBpbnRjXzMgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBMYXN0TG9nCiAgICBkdXAKICAgIGV4dHJhY3QgNCAwCiAgICBmcmFtZV9idXJ5IDQzCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKCmVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDEyOgogICAgZnJhbWVfZGlnIDQzCiAgICBmcmFtZV9idXJ5IDkKICAgIGZyYW1lX2RpZyA3CiAgICBmcmFtZV9idXJ5IDgKCmVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDEzOgogICAgZnJhbWVfZGlnIDkKICAgIGZyYW1lX2J1cnkgNDMKICAgIGZyYW1lX2RpZyA4CiAgICBmcmFtZV9idXJ5IDcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjExLTYxNAogICAgLy8gY29uc3QgdmFsaWRhdG9yU3RhdGUgPSBhYmlDYWxsKFZhbGlkYXRvclJlZ2lzdHJ5QUJJLnByb3RvdHlwZS5nZXRWYWxpZGF0b3JTdGF0ZSwgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlXSwKICAgIC8vIH0pLnJldHVyblZhbHVlCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYxMgogICAgLy8gYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjYKICAgIC8vIGNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdjcmVhdG9yQXBwJyB9KQogICAgYnl0ZWNfMSAvLyAiY3JlYXRvckFwcCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjEyCiAgICAvLyBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2MTMKICAgIC8vIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlXSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY5CiAgICAvLyB2YWxpZGF0b3JJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICd2YWxpZGF0b3JJZCcgfSkKICAgIGJ5dGVjXzMgLy8gInZhbGlkYXRvcklkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2MTMKICAgIC8vIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlXSwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYxMS02MTQKICAgIC8vIGNvbnN0IHZhbGlkYXRvclN0YXRlID0gYWJpQ2FsbChWYWxpZGF0b3JSZWdpc3RyeUFCSS5wcm90b3R5cGUuZ2V0VmFsaWRhdG9yU3RhdGUsIHsKICAgIC8vICAgYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgLy8gICBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICAvLyB9KS5yZXR1cm5WYWx1ZQogICAgcHVzaGJ5dGVzIDB4MWYyZjAxMDkgLy8gbWV0aG9kICJnZXRWYWxpZGF0b3JTdGF0ZSh1aW50NjQpKHVpbnQxNix1aW50NjQsdWludDY0LHVpbnQ2NCkiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgaW50Y18zIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjE1CiAgICAvLyBjb25zdCByZXdhcmRUb2tlbkhlbGRCYWNrID0gdmFsaWRhdG9yU3RhdGUucmV3YXJkVG9rZW5IZWxkQmFjawogICAgZHVwCiAgICBwdXNoaW50IDIyIC8vIDIyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZnJhbWVfYnVyeSAyNwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2MjIKICAgIC8vIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLmJhbGFuY2UgLQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYyMwogICAgLy8gdGhpcy50b3RhbEFsZ29TdGFrZWQudmFsdWUgLQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzgKICAgIC8vIHRvdGFsQWxnb1N0YWtlZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdzdGFrZWQnIH0pCiAgICBieXRlYyA1IC8vICJzdGFrZWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYyMwogICAgLy8gdGhpcy50b3RhbEFsZ29TdGFrZWQudmFsdWUgLQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjIyLTYyMwogICAgLy8gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MuYmFsYW5jZSAtCiAgICAvLyB0aGlzLnRvdGFsQWxnb1N0YWtlZC52YWx1ZSAtCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYyNAogICAgLy8gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MubWluQmFsYW5jZQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYyMi02MjQKICAgIC8vIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLmJhbGFuY2UgLQogICAgLy8gdGhpcy50b3RhbEFsZ29TdGFrZWQudmFsdWUgLQogICAgLy8gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MubWluQmFsYW5jZQogICAgLQogICAgZnJhbWVfYnVyeSAxMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2MjUKICAgIC8vIGxldCBpc1Bvb2xTYXR1cmF0ZWQgPSBmYWxzZQogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgMTkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTAwNgogICAgLy8gcmV0dXJuIHdpZGVSYXRpbyhbb25saW5lLCBNQVhfVkFMSURBVE9SX1NPRlRfUENUX09GX09OTElORV8xREVDSU1BTF0sIFsxMDAwXSkKICAgIHB1c2hpbnQgMTAwMCAvLyAxMDAwCiAgICBpdG9iCiAgICBmcmFtZV9idXJ5IDIKICAgIHB1c2hieXRlc3MgMHgwMDAyMDAwNzFhZmQ0OThkMDAwMDAwMDAwMDAwMDAwMDAwNjQgMHgwMDAxMDAwMDAwMDAwMDAwMDNlOCAvLyAweDAwMDIwMDA3MWFmZDQ5OGQwMDAwMDAwMDAwMDAwMDAwMDA2NCwgMHgwMDAxMDAwMDAwMDAwMDAwMDNlOAogICAgY2FsbHN1YiB3aWRlUmF0aW8KICAgIHBvcG4gMgogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYzNAogICAgLy8gaWYgKHZhbGlkYXRvclN0YXRlLnRvdGFsQWxnb1N0YWtlZCA+IGFsZ29TYXR1cmF0aW9uQW10KSB7CiAgICBzd2FwCiAgICBwdXNoaW50IDE0IC8vIDE0CiAgICBleHRyYWN0X3VpbnQ2NAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDQwCiAgICA8CiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUAxNgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2MzUKICAgIC8vIGlzUG9vbFNhdHVyYXRlZCA9IHRydWUKICAgIGludGNfMSAvLyAxCiAgICBmcmFtZV9idXJ5IDE5CgplcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUAxNjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjQxCiAgICAvLyBsZXQgdG9rZW5SZXdhcmRBdmFpbDogdWludDY0ID0gMAogICAgaW50Y18wIC8vIDAKICAgIGR1cAogICAgZnJhbWVfYnVyeSAzMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2NDIKICAgIC8vIGxldCB0b2tlblJld2FyZFBhaWRPdXQ6IHVpbnQ2NCA9IDAKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDM0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY0MwogICAgLy8gbGV0IHZhbGlkYXRvckNvbW1pc3Npb25QYWlkT3V0OiB1aW50NjQgPSAwCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAzNgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2NDQKICAgIC8vIGxldCBleGNlc3NUb0ZlZVNpbms6IHVpbnQ2NCA9IDAKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDE1CiAgICBmcmFtZV9idXJ5IDMzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY0NQogICAgLy8gaWYgKGlzVG9rZW5FbGlnaWJsZSkgewogICAgZnJhbWVfZGlnIDM3CiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUAyMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2NDcKICAgIC8vIG9wLkFzc2V0SG9sZGluZy5hc3NldEJhbGFuY2UocG9vbE9uZUFkZHJlc3MsIHZhbGlkYXRvckNvbmZpZy5yZXdhcmRUb2tlbklkKVswXSAtIHJld2FyZFRva2VuSGVsZEJhY2sKICAgIGZyYW1lX2RpZyA3CiAgICBmcmFtZV9kaWcgMzcKICAgIGFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQogICAgcG9wCiAgICBmcmFtZV9kaWcgMjcKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjUxCiAgICAvLyBpZiAodG9rZW5SZXdhcmRCYWwgPj0gdmFsaWRhdG9yQ29uZmlnLnJld2FyZFBlclBheW91dCkgewogICAgZnJhbWVfZGlnIDQ0CiAgICBwdXNoaW50IDE2NSAvLyAxNjUKICAgIGV4dHJhY3RfdWludDY0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNDEKICAgID49CiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUAxOQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2NTcKICAgIC8vIGNvbnN0IG91clBvb2xQY3RPZldob2xlID0gdG9rZW5QYXlvdXRSYXRpby5wb29sUGN0T2ZXaG9sZVt0aGlzLnBvb2xJZC52YWx1ZSAtIDFdCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MgogICAgLy8gcG9vbElkID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ3Bvb2xJZCcgfSkKICAgIGJ5dGVjIDQgLy8gInBvb2xJZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjU3CiAgICAvLyBjb25zdCBvdXJQb29sUGN0T2ZXaG9sZSA9IHRva2VuUGF5b3V0UmF0aW8ucG9vbFBjdE9mV2hvbGVbdGhpcy5wb29sSWQudmFsdWUgLSAxXQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBmcmFtZV9kaWcgNDMKICAgIGV4dHJhY3QgMCAxOTIKICAgIHN3YXAKICAgIHB1c2hpbnQgOCAvLyA4CiAgICAqCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2NTkKICAgIC8vIHRva2VuUmV3YXJkQXZhaWwgPSB3aWRlUmF0aW8oW3ZhbGlkYXRvckNvbmZpZy5yZXdhcmRQZXJQYXlvdXQsIG91clBvb2xQY3RPZldob2xlXSwgWzFfMDAwXzAwMF0pCiAgICBmcmFtZV9kaWcgNDEKICAgIGl0b2IKICAgIGJ5dGVjIDggLy8gMHgwMDAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGl0b2IKICAgIGNvbmNhdAogICAgYnl0ZWMgMjYgLy8gMHgwMDAxMDAwMDAwMDAwMDBmNDI0MAogICAgY2FsbHN1YiB3aWRlUmF0aW8KICAgIHBvcG4gMgogICAgZnJhbWVfYnVyeSAzMgoKZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VAMTk6CiAgICBmcmFtZV9kaWcgMzIKICAgIGZyYW1lX2J1cnkgMzMKCmVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDIwOgogICAgZnJhbWVfZGlnIDMzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMzIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjYyCiAgICAvLyBpZiAodG9rZW5SZXdhcmRBdmFpbCA9PT0gMCkgewogICAgYm56IGVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDI0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY2NwogICAgLy8gaWYgKGFsZ29SZXdhcmRBdmFpbCA8IDFfMDAwXzAwMCkgewogICAgZnJhbWVfZGlnIDEwCiAgICBpbnRjIDkgLy8gMTAwMDAwMAogICAgPAogICAgYnogZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VAMjQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjY4CiAgICAvLyBsb2coJyF0b2tlbiYmIW5vYWxnbyB0byBwYXknKQogICAgcHVzaGJ5dGVzICIhdG9rZW4mJiFub2FsZ28gdG8gcGF5IgogICAgbG9nCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY2OQogICAgLy8gcmV0dXJuCiAgICByZXRzdWIKCmVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDI0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2NzMKICAgIC8vIGlmIChpc1Bvb2xTYXR1cmF0ZWQpIHsKICAgIGZyYW1lX2RpZyAxOQogICAgYnogZXBvY2hCYWxhbmNlVXBkYXRlX2Vsc2VfYm9keUAyNwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2NzYKICAgIC8vIGNvbnN0IGRpbWluaXNoZWRSZXdhcmQgPSB3aWRlUmF0aW8oW2FsZ29SZXdhcmRBdmFpbCwgYWxnb1NhdHVyYXRpb25BbXRdLCBbdmFsaWRhdG9yU3RhdGUudG90YWxBbGdvU3Rha2VkXSkKICAgIGZyYW1lX2RpZyAxMAogICAgZHVwCiAgICBpdG9iCiAgICBieXRlYyA4IC8vIDB4MDAwMgogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgMTIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDQwCiAgICBpdG9iCiAgICBieXRlYyAxNyAvLyAweDAwMDEKICAgIHN3YXAKICAgIGNvbmNhdAogICAgY2FsbHN1YiB3aWRlUmF0aW8KICAgIHBvcG4gMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2NzgKICAgIC8vIGV4Y2Vzc1RvRmVlU2luayA9IGFsZ29SZXdhcmRBdmFpbCAtIGRpbWluaXNoZWRSZXdhcmQKICAgIHN3YXAKICAgIGRpZyAxCiAgICAtCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMTUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Njc5LTY4NQogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgYW1vdW50OiBleGNlc3NUb0ZlZVNpbmssCiAgICAvLyAgICAgcmVjZWl2ZXI6IHRoaXMuZ2V0RmVlU2luaygpLm5hdGl2ZSwKICAgIC8vICAgICBub3RlOiAncG9vbCBzYXR1cmF0ZWQsIGV4Y2VzcyB0byBmZWUgc2luaycsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5OTQKICAgIC8vIHJldHVybiBUZW1wbGF0ZVZhcjxBZGRyZXNzPignRkVFX1NJTktfQUREUicpCiAgICBieXRlYyAyOCAvLyBUTVBMX0ZFRV9TSU5LX0FERFIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjgzCiAgICAvLyBub3RlOiAncG9vbCBzYXR1cmF0ZWQsIGV4Y2VzcyB0byBmZWUgc2luaycsCiAgICBwdXNoYnl0ZXMgInBvb2wgc2F0dXJhdGVkLCBleGNlc3MgdG8gZmVlIHNpbmsiCiAgICBpdHhuX2ZpZWxkIE5vdGUKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY3OS02ODQKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIGFtb3VudDogZXhjZXNzVG9GZWVTaW5rLAogICAgLy8gICAgIHJlY2VpdmVyOiB0aGlzLmdldEZlZVNpbmsoKS5uYXRpdmUsCiAgICAvLyAgICAgbm90ZTogJ3Bvb2wgc2F0dXJhdGVkLCBleGNlc3MgdG8gZmVlIHNpbmsnLAogICAgLy8gICB9KQogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2NzktNjg1CiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQ6IGV4Y2Vzc1RvRmVlU2luaywKICAgIC8vICAgICByZWNlaXZlcjogdGhpcy5nZXRGZWVTaW5rKCkubmF0aXZlLAogICAgLy8gICAgIG5vdGU6ICdwb29sIHNhdHVyYXRlZCwgZXhjZXNzIHRvIGZlZSBzaW5rJywKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgZnJhbWVfYnVyeSAxMAoKZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VAMzk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjczNgogICAgLy8gbGV0IGluY3JlYXNlZFN0YWtlOiB1aW50NjQgPSAwCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAxNwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3NjAKICAgIC8vIGlmIChhbGdvUmV3YXJkQXZhaWwgIT09IDAgfHwgdG9rZW5SZXdhcmRBdmFpbCAhPT0gMCkgewogICAgZnJhbWVfZGlnIDEwCiAgICBibnogZXBvY2hCYWxhbmNlVXBkYXRlX2lmX2JvZHlANDEKICAgIGZyYW1lX2RpZyAzNAogICAgZnJhbWVfYnVyeSAzNQogICAgZnJhbWVfZGlnIDE3CiAgICBmcmFtZV9idXJ5IDE4CiAgICBmcmFtZV9kaWcgMzIKICAgIGJ6IGVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDcwCgplcG9jaEJhbGFuY2VVcGRhdGVfaWZfYm9keUA0MToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzYxCiAgICAvLyBsZXQgcGFydGlhbFN0YWtlcnNUb3RhbFN0YWtlOiB1aW50NjQgPSAwCiAgICBpbnRjXzAgLy8gMAogICAgZnJhbWVfYnVyeSAyNAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3NjIKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDA7IGkgPCB0aGlzLnN0YWtlcnMudmFsdWUubGVuZ3RoOyBpICs9IDEpIHsKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDE2CgplcG9jaEJhbGFuY2VVcGRhdGVfd2hpbGVfdG9wQDQyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MgogICAgLy8gc3Rha2VycyA9IEJveDxGaXhlZEFycmF5PFN0YWtlZEluZm8sIHR5cGVvZiBNQVhfU1RBS0VSU19QRVJfUE9PTD4+KHsga2V5OiAnc3Rha2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInN0YWtlcnMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc2MgogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHRoaXMuc3Rha2Vycy52YWx1ZS5sZW5ndGg7IGkgKz0gMSkgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZnJhbWVfZGlnIDE2CiAgICBpbnRjIDQgLy8gMjAwCiAgICA8CiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfd2hpbGVANTUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzYzCiAgICAvLyBlbnN1cmVCdWRnZXQoNDAwKQogICAgcHVzaGludCA0MDAgLy8gNDAwCiAgICBpbnRjXzAgLy8gMAogICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc2NQogICAgLy8gY29uc3QgY21wU3Rha2VyID0gY2xvbmUodGhpcy5zdGFrZXJzLnZhbHVlW2ldKQogICAgZnJhbWVfZGlnIDE2CiAgICBpbnRjXzIgLy8gNjQKICAgICoKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxMwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MgogICAgLy8gc3Rha2VycyA9IEJveDxGaXhlZEFycmF5PFN0YWtlZEluZm8sIHR5cGVvZiBNQVhfU1RBS0VSU19QRVJfUE9PTD4+KHsga2V5OiAnc3Rha2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInN0YWtlcnMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc2NQogICAgLy8gY29uc3QgY21wU3Rha2VyID0gY2xvbmUodGhpcy5zdGFrZXJzLnZhbHVlW2ldKQogICAgc3dhcAogICAgaW50Y18yIC8vIDY0CiAgICBib3hfZXh0cmFjdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzY1LTc2NgogICAgLy8gY29uc3QgY21wU3Rha2VyID0gY2xvbmUodGhpcy5zdGFrZXJzLnZhbHVlW2ldKQogICAgLy8gaWYgKGNtcFN0YWtlci5hY2NvdW50Lm5hdGl2ZSAhPT0gR2xvYmFsLnplcm9BZGRyZXNzKSB7CiAgICBleHRyYWN0IDAgMzIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzY2CiAgICAvLyBpZiAoY21wU3Rha2VyLmFjY291bnQubmF0aXZlICE9PSBHbG9iYWwuemVyb0FkZHJlc3MpIHsKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGZyYW1lX2RpZyAxNwogICAgZnJhbWVfYnVyeSAxOAogICAgZnJhbWVfZGlnIDEwCiAgICBmcmFtZV9idXJ5IDExCiAgICBmcmFtZV9kaWcgMzQKICAgIGZyYW1lX2J1cnkgMzUKICAgIGZyYW1lX2RpZyAzMgogICAgZnJhbWVfYnVyeSAzMwogICAgZnJhbWVfZGlnIDI0CiAgICBmcmFtZV9idXJ5IDI1CiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUA1NAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MgogICAgLy8gc3Rha2VycyA9IEJveDxGaXhlZEFycmF5PFN0YWtlZEluZm8sIHR5cGVvZiBNQVhfU1RBS0VSU19QRVJfUE9PTD4+KHsga2V5OiAnc3Rha2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInN0YWtlcnMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc2NQogICAgLy8gY29uc3QgY21wU3Rha2VyID0gY2xvbmUodGhpcy5zdGFrZXJzLnZhbHVlW2ldKQogICAgZnJhbWVfZGlnIDEzCiAgICBpbnRjXzIgLy8gNjQKICAgIGJveF9leHRyYWN0CiAgICBwdXNoaW50IDU2IC8vIDU2CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc2NwogICAgLy8gaWYgKGNtcFN0YWtlci5lbnRyeVJvdW5kID49IHRoaXNFcG9jaEJlZ2luKSB7CiAgICBleHRyYWN0X3VpbnQ2NAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDQyCiAgICBmcmFtZV9kaWcgNDcKICAgID49CiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfZWxzZV9ib2R5QDQ2CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkyCiAgICAvLyBzdGFrZXJzID0gQm94PEZpeGVkQXJyYXk8U3Rha2VkSW5mbywgdHlwZW9mIE1BWF9TVEFLRVJTX1BFUl9QT09MPj4oeyBrZXk6ICdzdGFrZXJzJyB9KQogICAgYnl0ZWNfMCAvLyAic3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzY1CiAgICAvLyBjb25zdCBjbXBTdGFrZXIgPSBjbG9uZSh0aGlzLnN0YWtlcnMudmFsdWVbaV0pCiAgICBmcmFtZV9kaWcgMTMKICAgIGludGNfMiAvLyA2NAogICAgYm94X2V4dHJhY3QKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzcwCiAgICAvLyBwYXJ0aWFsU3Rha2Vyc1RvdGFsU3Rha2UgKz0gY21wU3Rha2VyLmJhbGFuY2UKICAgIGV4dHJhY3RfdWludDY0CiAgICBmcmFtZV9kaWcgMjQKICAgICsKICAgIGZyYW1lX2J1cnkgMjQKCmVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDUzOgogICAgZnJhbWVfZGlnIDE3CiAgICBmcmFtZV9idXJ5IDE4CiAgICBmcmFtZV9kaWcgMTAKICAgIGZyYW1lX2J1cnkgMTEKICAgIGZyYW1lX2RpZyAzNAogICAgZnJhbWVfYnVyeSAzNQogICAgZnJhbWVfZGlnIDMyCiAgICBmcmFtZV9idXJ5IDMzCiAgICBmcmFtZV9kaWcgMjQKICAgIGZyYW1lX2J1cnkgMjUKCmVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDU0OgogICAgZnJhbWVfZGlnIDE4CiAgICBmcmFtZV9idXJ5IDE3CiAgICBmcmFtZV9kaWcgMTEKICAgIGZyYW1lX2J1cnkgMTAKICAgIGZyYW1lX2RpZyAzNQogICAgZnJhbWVfYnVyeSAzNAogICAgZnJhbWVfZGlnIDMzCiAgICBmcmFtZV9idXJ5IDMyCiAgICBmcmFtZV9kaWcgMjUKICAgIGZyYW1lX2J1cnkgMjQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzYyCiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgdGhpcy5zdGFrZXJzLnZhbHVlLmxlbmd0aDsgaSArPSAxKSB7CiAgICBmcmFtZV9kaWcgMTYKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDE2CiAgICBiIGVwb2NoQmFsYW5jZVVwZGF0ZV93aGlsZV90b3BANDIKCmVwb2NoQmFsYW5jZVVwZGF0ZV9lbHNlX2JvZHlANDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc3NAogICAgLy8gY29uc3QgdGltZUluUG9vbDogdWludDY0ID0gdGhpc0Vwb2NoQmVnaW4gLSBjbXBTdGFrZXIuZW50cnlSb3VuZAogICAgZnJhbWVfZGlnIDQ3CiAgICBmcmFtZV9kaWcgNDIKICAgIC0KICAgIGR1cAogICAgZnJhbWVfYnVyeSAyOAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3NzgKICAgIC8vIGlmICh0aW1lSW5Qb29sIDwgZXBvY2hSb3VuZExlbmd0aCkgewogICAgZnJhbWVfZGlnIDQ1CiAgICA8CiAgICBmcmFtZV9kaWcgMTcKICAgIGZyYW1lX2J1cnkgMTgKICAgIGZyYW1lX2RpZyAxMAogICAgZnJhbWVfYnVyeSAxMQogICAgZnJhbWVfZGlnIDM0CiAgICBmcmFtZV9idXJ5IDM1CiAgICBmcmFtZV9kaWcgMzIKICAgIGZyYW1lX2J1cnkgMzMKICAgIGZyYW1lX2RpZyAyNAogICAgZnJhbWVfYnVyeSAyNQogICAgYnogZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VANTIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTIKICAgIC8vIHN0YWtlcnMgPSBCb3g8Rml4ZWRBcnJheTxTdGFrZWRJbmZvLCB0eXBlb2YgTUFYX1NUQUtFUlNfUEVSX1BPT0w+Pih7IGtleTogJ3N0YWtlcnMnIH0pCiAgICBieXRlY18wIC8vICJzdGFrZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3NjUKICAgIC8vIGNvbnN0IGNtcFN0YWtlciA9IGNsb25lKHRoaXMuc3Rha2Vycy52YWx1ZVtpXSkKICAgIGZyYW1lX2RpZyAxMwogICAgaW50Y18yIC8vIDY0CiAgICBib3hfZXh0cmFjdAogICAgcHVzaGludCAzMiAvLyAzMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3NzkKICAgIC8vIHBhcnRpYWxTdGFrZXJzVG90YWxTdGFrZSArPSBjbXBTdGFrZXIuYmFsYW5jZQogICAgZXh0cmFjdF91aW50NjQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAzOAogICAgZnJhbWVfZGlnIDI0CiAgICArCiAgICBmcmFtZV9idXJ5IDI0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc4MAogICAgLy8gdGltZVBlcmNlbnRhZ2UgPSAodGltZUluUG9vbCAqIDEwMDApIC8gZXBvY2hSb3VuZExlbmd0aAogICAgZnJhbWVfZGlnIDI4CiAgICBwdXNoaW50IDEwMDAgLy8gMTAwMAogICAgKgogICAgZnJhbWVfZGlnIDQ1CiAgICAvCiAgICBmcmFtZV9idXJ5IDI5CiAgICBmcmFtZV9kaWcgMzQKICAgIGZyYW1lX2J1cnkgMzUKICAgIGZyYW1lX2RpZyAzMgogICAgZHVwCiAgICBmcmFtZV9idXJ5IDMzCiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc4MgogICAgLy8gaWYgKHRva2VuUmV3YXJkQXZhaWwgPiAwKSB7CiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUA0OQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3ODUKICAgIC8vIFtjbXBTdGFrZXIuYmFsYW5jZSwgdG9rZW5SZXdhcmRBdmFpbCwgdGltZVBlcmNlbnRhZ2VdLAogICAgZnJhbWVfZGlnIDM4CiAgICBpdG9iCiAgICBieXRlYyAyNyAvLyAweDAwMDMKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDMyCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDI5CiAgICBpdG9iCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Nzg2CiAgICAvLyBbdGhpcy50b3RhbEFsZ29TdGFrZWQudmFsdWUsIDEwMDBdLAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzgKICAgIC8vIHRvdGFsQWxnb1N0YWtlZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdzdGFrZWQnIH0pCiAgICBieXRlYyA1IC8vICJzdGFrZWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc4NgogICAgLy8gW3RoaXMudG90YWxBbGdvU3Rha2VkLnZhbHVlLCAxMDAwXSwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBpdG9iCiAgICBieXRlYyA4IC8vIDB4MDAwMgogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc4NC03ODcKICAgIC8vIGNvbnN0IHN0YWtlclRva2VuUmV3YXJkID0gd2lkZVJhdGlvKAogICAgLy8gICBbY21wU3Rha2VyLmJhbGFuY2UsIHRva2VuUmV3YXJkQXZhaWwsIHRpbWVQZXJjZW50YWdlXSwKICAgIC8vICAgW3RoaXMudG90YWxBbGdvU3Rha2VkLnZhbHVlLCAxMDAwXSwKICAgIC8vICkKICAgIGNhbGxzdWIgd2lkZVJhdGlvCiAgICBwb3BuIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzkxCiAgICAvLyB0b2tlblJld2FyZEF2YWlsIC09IHN0YWtlclRva2VuUmV3YXJkCiAgICBzd2FwCiAgICBkaWcgMQogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MgogICAgLy8gc3Rha2VycyA9IEJveDxGaXhlZEFycmF5PFN0YWtlZEluZm8sIHR5cGVvZiBNQVhfU1RBS0VSU19QRVJfUE9PTD4+KHsga2V5OiAnc3Rha2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInN0YWtlcnMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc2NQogICAgLy8gY29uc3QgY21wU3Rha2VyID0gY2xvbmUodGhpcy5zdGFrZXJzLnZhbHVlW2ldKQogICAgZnJhbWVfZGlnIDEzCiAgICBpbnRjXzIgLy8gNjQKICAgIGJveF9leHRyYWN0CiAgICBwdXNoaW50IDQ4IC8vIDQ4CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc5MgogICAgLy8gY21wU3Rha2VyLnJld2FyZFRva2VuQmFsYW5jZSArPSBzdGFrZXJUb2tlblJld2FyZAogICAgZXh0cmFjdF91aW50NjQKICAgIGRpZyAyCiAgICArCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgMwogICAgc3dhcAogICAgcmVwbGFjZTIgNDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzkzCiAgICAvLyB0b2tlblJld2FyZFBhaWRPdXQgKz0gc3Rha2VyVG9rZW5SZXdhcmQKICAgIGZyYW1lX2RpZyAzNAogICAgdW5jb3ZlciAzCiAgICArCiAgICBmcmFtZV9idXJ5IDM1CiAgICBmcmFtZV9idXJ5IDQKICAgIGZyYW1lX2J1cnkgMzMKCmVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDQ5OgogICAgZnJhbWVfZGlnIDM1CiAgICBmcmFtZV9idXJ5IDM0CiAgICBmcmFtZV9kaWcgMzMKICAgIGZyYW1lX2J1cnkgMzIKICAgIGZyYW1lX2RpZyA0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMwogICAgZnJhbWVfZGlnIDE3CiAgICBmcmFtZV9idXJ5IDE4CiAgICBmcmFtZV9kaWcgMTAKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxMQogICAgc3dhcAogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc5NQogICAgLy8gaWYgKGFsZ29SZXdhcmRBdmFpbCA+IDApIHsKICAgIGJ6IGVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDUxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc5OAogICAgLy8gW2NtcFN0YWtlci5iYWxhbmNlLCBhbGdvUmV3YXJkQXZhaWwsIHRpbWVQZXJjZW50YWdlXSwKICAgIGZyYW1lX2RpZyAzCiAgICBkdXAKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIGV4dHJhY3RfdWludDY0CiAgICBkdXAKICAgIGl0b2IKICAgIGJ5dGVjIDI3IC8vIDB4MDAwMwogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgMTAKICAgIGR1cAogICAgY292ZXIgMgogICAgaXRvYgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgMjkKICAgIGl0b2IKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3OTkKICAgIC8vIFt0aGlzLnRvdGFsQWxnb1N0YWtlZC52YWx1ZSwgMTAwMF0sCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3OAogICAgLy8gdG90YWxBbGdvU3Rha2VkID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ3N0YWtlZCcgfSkKICAgIGJ5dGVjIDUgLy8gInN0YWtlZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Nzk5CiAgICAvLyBbdGhpcy50b3RhbEFsZ29TdGFrZWQudmFsdWUsIDEwMDBdLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGl0b2IKICAgIGJ5dGVjIDggLy8gMHgwMDAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAyCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Nzk3LTgwMAogICAgLy8gY29uc3Qgc3Rha2VyUmV3YXJkID0gd2lkZVJhdGlvKAogICAgLy8gICBbY21wU3Rha2VyLmJhbGFuY2UsIGFsZ29SZXdhcmRBdmFpbCwgdGltZVBlcmNlbnRhZ2VdLAogICAgLy8gICBbdGhpcy50b3RhbEFsZ29TdGFrZWQudmFsdWUsIDEwMDBdLAogICAgLy8gKQogICAgY2FsbHN1YiB3aWRlUmF0aW8KICAgIHBvcG4gMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4MDQKICAgIC8vIGFsZ29SZXdhcmRBdmFpbCAtPSBzdGFrZXJSZXdhcmQKICAgIHN3YXAKICAgIGRpZyAxCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgwNwogICAgLy8gY21wU3Rha2VyLmJhbGFuY2UgKz0gc3Rha2VyUmV3YXJkCiAgICB1bmNvdmVyIDIKICAgIGRpZyAyCiAgICArCiAgICBpdG9iCiAgICB1bmNvdmVyIDMKICAgIHN3YXAKICAgIHJlcGxhY2UyIDMyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgwOAogICAgLy8gY21wU3Rha2VyLnRvdGFsUmV3YXJkZWQgKz0gc3Rha2VyUmV3YXJkCiAgICBkdXAKICAgIHB1c2hpbnQgNDAgLy8gNDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBkaWcgMwogICAgKwogICAgaXRvYgogICAgcmVwbGFjZTIgNDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODA5CiAgICAvLyBpbmNyZWFzZWRTdGFrZSArPSBzdGFrZXJSZXdhcmQKICAgIGZyYW1lX2RpZyAxNwogICAgdW5jb3ZlciAzCiAgICArCiAgICBmcmFtZV9idXJ5IDE4CiAgICBmcmFtZV9idXJ5IDQKICAgIGZyYW1lX2J1cnkgMTEKCmVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDUxOgogICAgZnJhbWVfZGlnIDExCiAgICBmcmFtZV9kaWcgMTgKICAgIGZyYW1lX2RpZyA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkyCiAgICAvLyBzdGFrZXJzID0gQm94PEZpeGVkQXJyYXk8U3Rha2VkSW5mbywgdHlwZW9mIE1BWF9TVEFLRVJTX1BFUl9QT09MPj4oeyBrZXk6ICdzdGFrZXJzJyB9KQogICAgYnl0ZWNfMCAvLyAic3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODEyCiAgICAvLyB0aGlzLnN0YWtlcnMudmFsdWVbaV0gPSBjbG9uZShjbXBTdGFrZXIpCiAgICBmcmFtZV9kaWcgMTMKICAgIHVuY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIGZyYW1lX2J1cnkgMTgKICAgIGZyYW1lX2J1cnkgMTEKICAgIGZyYW1lX2RpZyAzNAogICAgZnJhbWVfYnVyeSAzNQogICAgZnJhbWVfZGlnIDMyCiAgICBmcmFtZV9idXJ5IDMzCiAgICBmcmFtZV9kaWcgMjQKICAgIGZyYW1lX2J1cnkgMjUKCmVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDUyOgogICAgZnJhbWVfZGlnIDE4CiAgICBmcmFtZV9idXJ5IDE3CiAgICBmcmFtZV9kaWcgMTEKICAgIGZyYW1lX2J1cnkgMTAKICAgIGZyYW1lX2RpZyAzNQogICAgZnJhbWVfYnVyeSAzNAogICAgZnJhbWVfZGlnIDMzCiAgICBmcmFtZV9idXJ5IDMyCiAgICBmcmFtZV9kaWcgMjUKICAgIGZyYW1lX2J1cnkgMjQKICAgIGIgZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VANTMKCmVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl93aGlsZUA1NToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODIwCiAgICAvLyBjb25zdCBuZXdQb29sVG90YWxTdGFrZTogdWludDY0ID0gdGhpcy50b3RhbEFsZ29TdGFrZWQudmFsdWUgLSBwYXJ0aWFsU3Rha2Vyc1RvdGFsU3Rha2UKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjc4CiAgICAvLyB0b3RhbEFsZ29TdGFrZWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnc3Rha2VkJyB9KQogICAgYnl0ZWMgNSAvLyAic3Rha2VkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4MjAKICAgIC8vIGNvbnN0IG5ld1Bvb2xUb3RhbFN0YWtlOiB1aW50NjQgPSB0aGlzLnRvdGFsQWxnb1N0YWtlZC52YWx1ZSAtIHBhcnRpYWxTdGFrZXJzVG90YWxTdGFrZQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGZyYW1lX2RpZyAyNAogICAgLQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDIzCiAgICBmcmFtZV9kaWcgMzQKICAgIGZyYW1lX2J1cnkgMzUKICAgIGZyYW1lX2RpZyAxNwogICAgZnJhbWVfYnVyeSAxOAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4MjQKICAgIC8vIGlmIChuZXdQb29sVG90YWxTdGFrZSA+IDApIHsKICAgIGJ6IGVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDY5CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgyNgogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHRoaXMuc3Rha2Vycy52YWx1ZS5sZW5ndGg7IGkgKz0gMSkgewogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgMjAKCmVwb2NoQmFsYW5jZVVwZGF0ZV93aGlsZV90b3BANTc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkyCiAgICAvLyBzdGFrZXJzID0gQm94PEZpeGVkQXJyYXk8U3Rha2VkSW5mbywgdHlwZW9mIE1BWF9TVEFLRVJTX1BFUl9QT09MPj4oeyBrZXk6ICdzdGFrZXJzJyB9KQogICAgYnl0ZWNfMCAvLyAic3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODI2CiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgdGhpcy5zdGFrZXJzLnZhbHVlLmxlbmd0aDsgaSArPSAxKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBmcmFtZV9kaWcgMjAKICAgIGludGMgNCAvLyAyMDAKICAgIDwKICAgIGJ6IGVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl93aGlsZUA2OAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4MjcKICAgIC8vIGVuc3VyZUJ1ZGdldCgyMDApCiAgICBpbnRjIDQgLy8gMjAwCiAgICBpbnRjXzAgLy8gMAogICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgyOQogICAgLy8gY29uc3QgY21wU3Rha2VyID0gY2xvbmUodGhpcy5zdGFrZXJzLnZhbHVlW2ldKQogICAgZnJhbWVfZGlnIDIwCiAgICBpbnRjXzIgLy8gNjQKICAgICoKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxNAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MgogICAgLy8gc3Rha2VycyA9IEJveDxGaXhlZEFycmF5PFN0YWtlZEluZm8sIHR5cGVvZiBNQVhfU1RBS0VSU19QRVJfUE9PTD4+KHsga2V5OiAnc3Rha2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInN0YWtlcnMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgyOQogICAgLy8gY29uc3QgY21wU3Rha2VyID0gY2xvbmUodGhpcy5zdGFrZXJzLnZhbHVlW2ldKQogICAgc3dhcAogICAgaW50Y18yIC8vIDY0CiAgICBib3hfZXh0cmFjdAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODI5LTgzMAogICAgLy8gY29uc3QgY21wU3Rha2VyID0gY2xvbmUodGhpcy5zdGFrZXJzLnZhbHVlW2ldKQogICAgLy8gaWYgKGNtcFN0YWtlci5hY2NvdW50Lm5hdGl2ZSAhPT0gR2xvYmFsLnplcm9BZGRyZXNzICYmIGNtcFN0YWtlci5lbnRyeVJvdW5kIDwgdGhpc0Vwb2NoQmVnaW4pIHsKICAgIGV4dHJhY3QgMCAzMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4MzAKICAgIC8vIGlmIChjbXBTdGFrZXIuYWNjb3VudC5uYXRpdmUgIT09IEdsb2JhbC56ZXJvQWRkcmVzcyAmJiBjbXBTdGFrZXIuZW50cnlSb3VuZCA8IHRoaXNFcG9jaEJlZ2luKSB7CiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgICE9CiAgICBmcmFtZV9kaWcgMTcKICAgIGZyYW1lX2J1cnkgMTgKICAgIGZyYW1lX2RpZyAzNAogICAgZnJhbWVfYnVyeSAzNQogICAgYnogZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VANjcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTIKICAgIC8vIHN0YWtlcnMgPSBCb3g8Rml4ZWRBcnJheTxTdGFrZWRJbmZvLCB0eXBlb2YgTUFYX1NUQUtFUlNfUEVSX1BPT0w+Pih7IGtleTogJ3N0YWtlcnMnIH0pCiAgICBieXRlY18wIC8vICJzdGFrZXJzIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4MjktODMwCiAgICAvLyBjb25zdCBjbXBTdGFrZXIgPSBjbG9uZSh0aGlzLnN0YWtlcnMudmFsdWVbaV0pCiAgICAvLyBpZiAoY21wU3Rha2VyLmFjY291bnQubmF0aXZlICE9PSBHbG9iYWwuemVyb0FkZHJlc3MgJiYgY21wU3Rha2VyLmVudHJ5Um91bmQgPCB0aGlzRXBvY2hCZWdpbikgewogICAgZnJhbWVfZGlnIDE0CiAgICBpbnRjXzIgLy8gNjQKICAgIGJveF9leHRyYWN0CiAgICBwdXNoaW50IDU2IC8vIDU2CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgzMAogICAgLy8gaWYgKGNtcFN0YWtlci5hY2NvdW50Lm5hdGl2ZSAhPT0gR2xvYmFsLnplcm9BZGRyZXNzICYmIGNtcFN0YWtlci5lbnRyeVJvdW5kIDwgdGhpc0Vwb2NoQmVnaW4pIHsKICAgIGV4dHJhY3RfdWludDY0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMzkKICAgIGZyYW1lX2RpZyA0NwogICAgPAogICAgZnJhbWVfZGlnIDE3CiAgICBmcmFtZV9idXJ5IDE4CiAgICBmcmFtZV9kaWcgMzQKICAgIGZyYW1lX2J1cnkgMzUKICAgIGJ6IGVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDY3CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgzMQogICAgLy8gY29uc3QgdGltZUluUG9vbDogdWludDY0ID0gdGhpc0Vwb2NoQmVnaW4gLSBjbXBTdGFrZXIuZW50cnlSb3VuZAogICAgZnJhbWVfZGlnIDQ3CiAgICBmcmFtZV9kaWcgMzkKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODMzCiAgICAvLyBpZiAodGltZUluUG9vbCA+PSBlcG9jaFJvdW5kTGVuZ3RoKSB7CiAgICBmcmFtZV9kaWcgNDUKICAgID49CiAgICBmcmFtZV9kaWcgMTcKICAgIGZyYW1lX2J1cnkgMTgKICAgIGZyYW1lX2RpZyAzNAogICAgZnJhbWVfYnVyeSAzNQogICAgYnogZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VANjYKICAgIGZyYW1lX2RpZyAzNAogICAgZnJhbWVfYnVyeSAzNQogICAgZnJhbWVfZGlnIDUKICAgIGZyYW1lX2J1cnkgNgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4MzgKICAgIC8vIGlmICh0b2tlblJld2FyZEF2YWlsID4gMCkgewogICAgZnJhbWVfZGlnIDMyCiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUA2MwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MgogICAgLy8gc3Rha2VycyA9IEJveDxGaXhlZEFycmF5PFN0YWtlZEluZm8sIHR5cGVvZiBNQVhfU1RBS0VSU19QRVJfUE9PTD4+KHsga2V5OiAnc3Rha2VycycgfSkKICAgIGJ5dGVjXzAgLy8gInN0YWtlcnMiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgyOQogICAgLy8gY29uc3QgY21wU3Rha2VyID0gY2xvbmUodGhpcy5zdGFrZXJzLnZhbHVlW2ldKQogICAgZnJhbWVfZGlnIDE0CiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGludGNfMiAvLyA2NAogICAgYm94X2V4dHJhY3QKICAgIHB1c2hpbnQgMzIgLy8gMzIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODM5CiAgICAvLyBjb25zdCBzdGFrZXJUb2tlblJld2FyZCA9IHdpZGVSYXRpbyhbY21wU3Rha2VyLmJhbGFuY2UsIHRva2VuUmV3YXJkQXZhaWxdLCBbbmV3UG9vbFRvdGFsU3Rha2VdKQogICAgZXh0cmFjdF91aW50NjQKICAgIGl0b2IKICAgIGJ5dGVjIDggLy8gMHgwMDAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAzMgogICAgaXRvYgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgMjMKICAgIGl0b2IKICAgIGJ5dGVjIDE3IC8vIDB4MDAwMQogICAgc3dhcAogICAgY29uY2F0CiAgICBjYWxsc3ViIHdpZGVSYXRpbwogICAgcG9wbiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkyCiAgICAvLyBzdGFrZXJzID0gQm94PEZpeGVkQXJyYXk8U3Rha2VkSW5mbywgdHlwZW9mIE1BWF9TVEFLRVJTX1BFUl9QT09MPj4oeyBrZXk6ICdzdGFrZXJzJyB9KQogICAgYnl0ZWNfMCAvLyAic3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODI5CiAgICAvLyBjb25zdCBjbXBTdGFrZXIgPSBjbG9uZSh0aGlzLnN0YWtlcnMudmFsdWVbaV0pCiAgICB1bmNvdmVyIDIKICAgIGludGNfMiAvLyA2NAogICAgYm94X2V4dHJhY3QKICAgIHB1c2hpbnQgNDggLy8gNDgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODQyCiAgICAvLyBjbXBTdGFrZXIucmV3YXJkVG9rZW5CYWxhbmNlICs9IHN0YWtlclRva2VuUmV3YXJkCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDEKICAgICsKICAgIGl0b2IKICAgIGZyYW1lX2RpZyA1CiAgICBzd2FwCiAgICByZXBsYWNlMiA0OAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4NDMKICAgIC8vIHRva2VuUmV3YXJkUGFpZE91dCArPSBzdGFrZXJUb2tlblJld2FyZAogICAgZnJhbWVfZGlnIDM0CiAgICB1bmNvdmVyIDIKICAgICsKICAgIGZyYW1lX2J1cnkgMzUKICAgIGZyYW1lX2J1cnkgNgoKZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VANjM6CiAgICBmcmFtZV9kaWcgMzUKICAgIGZyYW1lX2J1cnkgMzQKICAgIGZyYW1lX2RpZyA2CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNQogICAgZnJhbWVfZGlnIDE3CiAgICBmcmFtZV9idXJ5IDE4CiAgICBmcmFtZV9idXJ5IDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODQ1CiAgICAvLyBpZiAoYWxnb1Jld2FyZEF2YWlsID4gMCkgewogICAgZnJhbWVfZGlnIDEwCiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUA2NQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4NDYKICAgIC8vIGNvbnN0IHN0YWtlclJld2FyZCA9IHdpZGVSYXRpbyhbY21wU3Rha2VyLmJhbGFuY2UsIGFsZ29SZXdhcmRBdmFpbF0sIFtuZXdQb29sVG90YWxTdGFrZV0pCiAgICBmcmFtZV9kaWcgNQogICAgZHVwCiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZHVwCiAgICBpdG9iCiAgICBieXRlYyA4IC8vIDB4MDAwMgogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgMTAKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIDIzCiAgICBpdG9iCiAgICBieXRlYyAxNyAvLyAweDAwMDEKICAgIHN3YXAKICAgIGNvbmNhdAogICAgY2FsbHN1YiB3aWRlUmF0aW8KICAgIHBvcG4gMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4NDkKICAgIC8vIGNtcFN0YWtlci5iYWxhbmNlICs9IHN0YWtlclJld2FyZAogICAgc3dhcAogICAgZGlnIDEKICAgICsKICAgIGl0b2IKICAgIHVuY292ZXIgMgogICAgc3dhcAogICAgcmVwbGFjZTIgMzIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODUwCiAgICAvLyBjbXBTdGFrZXIudG90YWxSZXdhcmRlZCArPSBzdGFrZXJSZXdhcmQKICAgIGR1cAogICAgcHVzaGludCA0MCAvLyA0MAogICAgZXh0cmFjdF91aW50NjQKICAgIGRpZyAyCiAgICArCiAgICBpdG9iCiAgICByZXBsYWNlMiA0MAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4NTEKICAgIC8vIGluY3JlYXNlZFN0YWtlICs9IHN0YWtlclJld2FyZAogICAgZnJhbWVfZGlnIDE3CiAgICB1bmNvdmVyIDIKICAgICsKICAgIGZyYW1lX2J1cnkgMTgKICAgIGZyYW1lX2J1cnkgNgoKZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VANjU6CiAgICBmcmFtZV9kaWcgMTgKICAgIGZyYW1lX2RpZyA2CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkyCiAgICAvLyBzdGFrZXJzID0gQm94PEZpeGVkQXJyYXk8U3Rha2VkSW5mbywgdHlwZW9mIE1BWF9TVEFLRVJTX1BFUl9QT09MPj4oeyBrZXk6ICdzdGFrZXJzJyB9KQogICAgYnl0ZWNfMCAvLyAic3Rha2VycyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODU1CiAgICAvLyB0aGlzLnN0YWtlcnMudmFsdWVbaV0gPSBjbG9uZShjbXBTdGFrZXIpCiAgICBmcmFtZV9kaWcgMTQKICAgIHVuY292ZXIgMgogICAgYm94X3JlcGxhY2UKICAgIGZyYW1lX2J1cnkgMTgKICAgIGZyYW1lX2RpZyAzNAogICAgZnJhbWVfYnVyeSAzNQoKZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VANjY6CiAgICBiIGVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDY3CgplcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUA2NzoKICAgIGZyYW1lX2RpZyAxOAogICAgZnJhbWVfYnVyeSAxNwogICAgZnJhbWVfZGlnIDM1CiAgICBmcmFtZV9idXJ5IDM0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjgyNgogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IHRoaXMuc3Rha2Vycy52YWx1ZS5sZW5ndGg7IGkgKz0gMSkgewogICAgZnJhbWVfZGlnIDIwCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAyMAogICAgYiBlcG9jaEJhbGFuY2VVcGRhdGVfd2hpbGVfdG9wQDU3CgplcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfd2hpbGVANjg6CiAgICBmcmFtZV9kaWcgMzQKICAgIGZyYW1lX2J1cnkgMzUKICAgIGZyYW1lX2RpZyAxNwogICAgZnJhbWVfYnVyeSAxOAoKZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VANjk6CiAgICBiIGVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDcwCgplcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUA3MDoKICAgIGZyYW1lX2RpZyAzNQogICAgZnJhbWVfZGlnIDE4CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjg2NQogICAgLy8gY29uc3Qgcm91bmRzTGVmdEluQmluOiB1aW50NjQgPSB0aGlzLmJpblJvdW5kU3RhcnQudmFsdWUgKyB0aGlzLnJvdW5kc1BlckRheS52YWx1ZSAtIEdsb2JhbC5yb3VuZAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTgKICAgIC8vIGJpblJvdW5kU3RhcnQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnYmluUm91bmRTdGFydCcgfSkKICAgIGJ5dGVjIDkgLy8gImJpblJvdW5kU3RhcnQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjg2NQogICAgLy8gY29uc3Qgcm91bmRzTGVmdEluQmluOiB1aW50NjQgPSB0aGlzLmJpblJvdW5kU3RhcnQudmFsdWUgKyB0aGlzLnJvdW5kc1BlckRheS52YWx1ZSAtIEdsb2JhbC5yb3VuZAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk2CiAgICAvLyByb3VuZHNQZXJEYXkgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAncm91bmRzUGVyRGF5JyB9KQogICAgYnl0ZWMgNyAvLyAicm91bmRzUGVyRGF5IgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4NjUKICAgIC8vIGNvbnN0IHJvdW5kc0xlZnRJbkJpbjogdWludDY0ID0gdGhpcy5iaW5Sb3VuZFN0YXJ0LnZhbHVlICsgdGhpcy5yb3VuZHNQZXJEYXkudmFsdWUgLSBHbG9iYWwucm91bmQKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICArCiAgICBnbG9iYWwgUm91bmQKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODY2CiAgICAvLyB0aGlzLnRvdGFsQWxnb1N0YWtlZC52YWx1ZSArPSBpbmNyZWFzZWRTdGFrZQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzgKICAgIC8vIHRvdGFsQWxnb1N0YWtlZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdzdGFrZWQnIH0pCiAgICBieXRlYyA1IC8vICJzdGFrZWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjg2NgogICAgLy8gdGhpcy50b3RhbEFsZ29TdGFrZWQudmFsdWUgKz0gaW5jcmVhc2VkU3Rha2UKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBkaWcgMgogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3OAogICAgLy8gdG90YWxBbGdvU3Rha2VkID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ3N0YWtlZCcgfSkKICAgIGJ5dGVjIDUgLy8gInN0YWtlZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODY2CiAgICAvLyB0aGlzLnRvdGFsQWxnb1N0YWtlZC52YWx1ZSArPSBpbmNyZWFzZWRTdGFrZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODY4CiAgICAvLyB0aGlzLnN0YWtlQWNjdW11bGF0b3IudmFsdWUubmF0aXZlICsgQmlnVWludChpbmNyZWFzZWRTdGFrZSkgKiBCaWdVaW50KHJvdW5kc0xlZnRJbkJpbiksCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDAKICAgIC8vIHN0YWtlQWNjdW11bGF0b3IgPSBHbG9iYWxTdGF0ZTxVaW50MTI4Pih7IGtleTogJ3N0YWtlQWNjdW11bGF0b3InIH0pCiAgICBieXRlYyA2IC8vICJzdGFrZUFjY3VtdWxhdG9yIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4NjgKICAgIC8vIHRoaXMuc3Rha2VBY2N1bXVsYXRvci52YWx1ZS5uYXRpdmUgKyBCaWdVaW50KGluY3JlYXNlZFN0YWtlKSAqIEJpZ1VpbnQocm91bmRzTGVmdEluQmluKSwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBkaWcgMgogICAgaXRvYgogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICBkaWcgMQogICAgYioKICAgIHVuY292ZXIgMgogICAgYisKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODY3LTg2OQogICAgLy8gdGhpcy5zdGFrZUFjY3VtdWxhdG9yLnZhbHVlID0gbmV3IFVpbnQxMjgoCiAgICAvLyAgIHRoaXMuc3Rha2VBY2N1bXVsYXRvci52YWx1ZS5uYXRpdmUgKyBCaWdVaW50KGluY3JlYXNlZFN0YWtlKSAqIEJpZ1VpbnQocm91bmRzTGVmdEluQmluKSwKICAgIC8vICkKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBiemVybwogICAgYnwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTAwCiAgICAvLyBzdGFrZUFjY3VtdWxhdG9yID0gR2xvYmFsU3RhdGU8VWludDEyOD4oeyBrZXk6ICdzdGFrZUFjY3VtdWxhdG9yJyB9KQogICAgYnl0ZWMgNiAvLyAic3Rha2VBY2N1bXVsYXRvciIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODY3LTg2OQogICAgLy8gdGhpcy5zdGFrZUFjY3VtdWxhdG9yLnZhbHVlID0gbmV3IFVpbnQxMjgoCiAgICAvLyAgIHRoaXMuc3Rha2VBY2N1bXVsYXRvci52YWx1ZS5uYXRpdmUgKyBCaWdVaW50KGluY3JlYXNlZFN0YWtlKSAqIEJpZ1VpbnQocm91bmRzTGVmdEluQmluKSwKICAgIC8vICkKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjg3MAogICAgLy8gdGhpcy5yZXdhcmRBY2N1bXVsYXRvci52YWx1ZSA9IHRoaXMucmV3YXJkQWNjdW11bGF0b3IudmFsdWUgKyBpbmNyZWFzZWRTdGFrZQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTAyCiAgICAvLyByZXdhcmRBY2N1bXVsYXRvciA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdyZXdhcmRBY2N1bXVsYXRvcicgfSkKICAgIGJ5dGVjIDExIC8vICJyZXdhcmRBY2N1bXVsYXRvciIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODcwCiAgICAvLyB0aGlzLnJld2FyZEFjY3VtdWxhdG9yLnZhbHVlID0gdGhpcy5yZXdhcmRBY2N1bXVsYXRvci52YWx1ZSArIGluY3JlYXNlZFN0YWtlCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgdW5jb3ZlciAyCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwMgogICAgLy8gcmV3YXJkQWNjdW11bGF0b3IgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAncmV3YXJkQWNjdW11bGF0b3InIH0pCiAgICBieXRlYyAxMSAvLyAicmV3YXJkQWNjdW11bGF0b3IiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjg3MAogICAgLy8gdGhpcy5yZXdhcmRBY2N1bXVsYXRvci52YWx1ZSA9IHRoaXMucmV3YXJkQWNjdW11bGF0b3IudmFsdWUgKyBpbmNyZWFzZWRTdGFrZQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODc2LTg4NQogICAgLy8gYWJpQ2FsbChWYWxpZGF0b3JSZWdpc3RyeUFCSS5wcm90b3R5cGUuc3Rha2VVcGRhdGVkVmlhUmV3YXJkcywgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFsKICAgIC8vICAgICB7IGlkOiB0aGlzLnZhbGlkYXRvcklkLnZhbHVlLCBwb29sSWQ6IHRoaXMucG9vbElkLnZhbHVlLCBwb29sQXBwSWQ6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZC5pZCB9LAogICAgLy8gICAgIGluY3JlYXNlZFN0YWtlLAogICAgLy8gICAgIHRva2VuUmV3YXJkUGFpZE91dCwKICAgIC8vICAgICB2YWxpZGF0b3JDb21taXNzaW9uUGFpZE91dCwKICAgIC8vICAgICBleGNlc3NUb0ZlZVNpbmssCiAgICAvLyAgIF0sCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo4NzcKICAgIC8vIGFwcElkOiB0aGlzLmNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZC52YWx1ZSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY2CiAgICAvLyBjcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnY3JlYXRvckFwcCcgfSkKICAgIGJ5dGVjXzEgLy8gImNyZWF0b3JBcHAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjg3NwogICAgLy8gYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODc5CiAgICAvLyB7IGlkOiB0aGlzLnZhbGlkYXRvcklkLnZhbHVlLCBwb29sSWQ6IHRoaXMucG9vbElkLnZhbHVlLCBwb29sQXBwSWQ6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZC5pZCB9LAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjkKICAgIC8vIHZhbGlkYXRvcklkID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ3ZhbGlkYXRvcklkJyB9KQogICAgYnl0ZWNfMyAvLyAidmFsaWRhdG9ySWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjg3OQogICAgLy8geyBpZDogdGhpcy52YWxpZGF0b3JJZC52YWx1ZSwgcG9vbElkOiB0aGlzLnBvb2xJZC52YWx1ZSwgcG9vbEFwcElkOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQuaWQgfSwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MgogICAgLy8gcG9vbElkID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ3Bvb2xJZCcgfSkKICAgIGJ5dGVjIDQgLy8gInBvb2xJZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODc5CiAgICAvLyB7IGlkOiB0aGlzLnZhbGlkYXRvcklkLnZhbHVlLCBwb29sSWQ6IHRoaXMucG9vbElkLnZhbHVlLCBwb29sQXBwSWQ6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZC5pZCB9LAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjg4MQogICAgLy8gdG9rZW5SZXdhcmRQYWlkT3V0LAogICAgdW5jb3ZlciAzCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjg4MgogICAgLy8gdmFsaWRhdG9yQ29tbWlzc2lvblBhaWRPdXQsCiAgICBmcmFtZV9kaWcgMzYKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODgzCiAgICAvLyBleGNlc3NUb0ZlZVNpbmssCiAgICBmcmFtZV9kaWcgMTUKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6ODc2LTg4NQogICAgLy8gYWJpQ2FsbChWYWxpZGF0b3JSZWdpc3RyeUFCSS5wcm90b3R5cGUuc3Rha2VVcGRhdGVkVmlhUmV3YXJkcywgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFsKICAgIC8vICAgICB7IGlkOiB0aGlzLnZhbGlkYXRvcklkLnZhbHVlLCBwb29sSWQ6IHRoaXMucG9vbElkLnZhbHVlLCBwb29sQXBwSWQ6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZC5pZCB9LAogICAgLy8gICAgIGluY3JlYXNlZFN0YWtlLAogICAgLy8gICAgIHRva2VuUmV3YXJkUGFpZE91dCwKICAgIC8vICAgICB2YWxpZGF0b3JDb21taXNzaW9uUGFpZE91dCwKICAgIC8vICAgICBleGNlc3NUb0ZlZVNpbmssCiAgICAvLyAgIF0sCiAgICAvLyB9KQogICAgcHVzaGJ5dGVzIDB4NDE4ZmNlZmMgLy8gbWV0aG9kICJzdGFrZVVwZGF0ZWRWaWFSZXdhcmRzKCh1aW50NjQsdWludDY0LHVpbnQ2NCksdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgdW5jb3ZlciAzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgdW5jb3ZlciA0CiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgdW5jb3ZlciAyCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgc3dhcAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMyAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCmVwb2NoQmFsYW5jZVVwZGF0ZV9lbHNlX2JvZHlAMjc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY4OAogICAgLy8gfSBlbHNlIGlmICh2YWxpZGF0b3JDb25maWcucGVyY2VudFRvVmFsaWRhdG9yLm5hdGl2ZSAhPT0gMCkgewogICAgZnJhbWVfZGlnIDQ0CiAgICBwdXNoaW50IDE3NyAvLyAxNzcKICAgIGV4dHJhY3RfdWludDMyCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMzAKICAgIGZyYW1lX2RpZyAxMAogICAgZnJhbWVfYnVyeSAxMQogICAgYnogZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VAMzgKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjkxCiAgICAvLyB2YWxpZGF0b3JDb21taXNzaW9uUGFpZE91dCA9IHdpZGVSYXRpbyhbYWxnb1Jld2FyZEF2YWlsLCB2YWxpZGF0b3JDb25maWcucGVyY2VudFRvVmFsaWRhdG9yLm5hdGl2ZV0sIFsxXzAwMF8wMDBdKQogICAgZnJhbWVfZGlnIDEwCiAgICBkdXAKICAgIGl0b2IKICAgIGJ5dGVjIDggLy8gMHgwMDAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAzMAogICAgaXRvYgogICAgY29uY2F0CiAgICBieXRlYyAyNiAvLyAweDAwMDEwMDAwMDAwMDAwMGY0MjQwCiAgICBjYWxsc3ViIHdpZGVSYXRpbwogICAgcG9wbiAyCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMzYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6Njk0CiAgICAvLyBhbGdvUmV3YXJkQXZhaWwgLT0gdmFsaWRhdG9yQ29tbWlzc2lvblBhaWRPdXQKICAgIHN3YXAKICAgIGRpZyAxCiAgICAtCiAgICBmcmFtZV9idXJ5IDEwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjcwMQogICAgLy8gaWYgKHZhbGlkYXRvckNvbW1pc3Npb25QYWlkT3V0ID4gMCkgewogICAgYnogZXBvY2hCYWxhbmNlVXBkYXRlX2FmdGVyX2lmX2Vsc2VAMzcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzA0CiAgICAvLyBsZXQgbWFuYWdlclRvcE9mZjogdWludDY0ID0gMAogICAgaW50Y18wIC8vIDAKICAgIGR1cAogICAgZnJhbWVfYnVyeSAyMQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MDYKICAgIC8vIHZhbGlkYXRvckNvbmZpZy5tYW5hZ2VyICE9PSB2YWxpZGF0b3JDb25maWcudmFsaWRhdG9yQ29tbWlzc2lvbkFkZHJlc3MgJiYKICAgIGZyYW1lX2RpZyA0NAogICAgZHVwCiAgICBleHRyYWN0IDQ0IDMyCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGZyYW1lX2J1cnkgMAogICAgZXh0cmFjdCAxODEgMzIKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxCiAgICAhPQogICAgc3dhcAogICAgZnJhbWVfYnVyeSAyMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MDYtNzA3CiAgICAvLyB2YWxpZGF0b3JDb25maWcubWFuYWdlciAhPT0gdmFsaWRhdG9yQ29uZmlnLnZhbGlkYXRvckNvbW1pc3Npb25BZGRyZXNzICYmCiAgICAvLyB2YWxpZGF0b3JDb25maWcubWFuYWdlci5uYXRpdmUuYmFsYW5jZSAtIHZhbGlkYXRvckNvbmZpZy5tYW5hZ2VyLm5hdGl2ZS5taW5CYWxhbmNlIDwgMl8xMDBfMDAwCiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUAzMwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MDcKICAgIC8vIHZhbGlkYXRvckNvbmZpZy5tYW5hZ2VyLm5hdGl2ZS5iYWxhbmNlIC0gdmFsaWRhdG9yQ29uZmlnLm1hbmFnZXIubmF0aXZlLm1pbkJhbGFuY2UgPCAyXzEwMF8wMDAKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICBzd2FwCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgLQogICAgaW50YyA4IC8vIDIxMDAwMDAKICAgIDwKICAgIGZyYW1lX2RpZyAyMQogICAgZnJhbWVfYnVyeSAyMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MDYtNzA3CiAgICAvLyB2YWxpZGF0b3JDb25maWcubWFuYWdlciAhPT0gdmFsaWRhdG9yQ29uZmlnLnZhbGlkYXRvckNvbW1pc3Npb25BZGRyZXNzICYmCiAgICAvLyB2YWxpZGF0b3JDb25maWcubWFuYWdlci5uYXRpdmUuYmFsYW5jZSAtIHZhbGlkYXRvckNvbmZpZy5tYW5hZ2VyLm5hdGl2ZS5taW5CYWxhbmNlIDwgMl8xMDBfMDAwCiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUAzMwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MDkKICAgIC8vIG1hbmFnZXJUb3BPZmYgPSB2YWxpZGF0b3JDb21taXNzaW9uUGFpZE91dCA8IDJfMTAwXzAwMCA/IHZhbGlkYXRvckNvbW1pc3Npb25QYWlkT3V0IDogMl8xMDBfMDAwCiAgICBmcmFtZV9kaWcgMzYKICAgIGR1cAogICAgaW50YyA4IC8vIDIxMDAwMDAKICAgIDwKICAgIGludGMgOCAvLyAyMTAwMDAwCiAgICBjb3ZlciAyCiAgICBzZWxlY3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzEwLTcxNgogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgYW1vdW50OiBtYW5hZ2VyVG9wT2ZmLAogICAgLy8gICAgIHJlY2VpdmVyOiB2YWxpZGF0b3JDb25maWcubWFuYWdlci5uYXRpdmUsCiAgICAvLyAgICAgbm90ZTogJ3ZhbGlkYXRvciByZXdhcmQgdG8gbWFuYWdlciBmb3IgZnVuZGluZyBlcG9jaCB1cGRhdGVzJywKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjcxNAogICAgLy8gbm90ZTogJ3ZhbGlkYXRvciByZXdhcmQgdG8gbWFuYWdlciBmb3IgZnVuZGluZyBlcG9jaCB1cGRhdGVzJywKICAgIHB1c2hieXRlcyAidmFsaWRhdG9yIHJld2FyZCB0byBtYW5hZ2VyIGZvciBmdW5kaW5nIGVwb2NoIHVwZGF0ZXMiCiAgICBpdHhuX2ZpZWxkIE5vdGUKICAgIGZyYW1lX2RpZyAwCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICBkdXAKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjcxMC03MTUKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIGFtb3VudDogbWFuYWdlclRvcE9mZiwKICAgIC8vICAgICByZWNlaXZlcjogdmFsaWRhdG9yQ29uZmlnLm1hbmFnZXIubmF0aXZlLAogICAgLy8gICAgIG5vdGU6ICd2YWxpZGF0b3IgcmV3YXJkIHRvIG1hbmFnZXIgZm9yIGZ1bmRpbmcgZXBvY2ggdXBkYXRlcycsCiAgICAvLyAgIH0pCiAgICBpbnRjXzEgLy8gMQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjcxMC03MTYKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIGFtb3VudDogbWFuYWdlclRvcE9mZiwKICAgIC8vICAgICByZWNlaXZlcjogdmFsaWRhdG9yQ29uZmlnLm1hbmFnZXIubmF0aXZlLAogICAgLy8gICAgIG5vdGU6ICd2YWxpZGF0b3IgcmV3YXJkIHRvIG1hbmFnZXIgZm9yIGZ1bmRpbmcgZXBvY2ggdXBkYXRlcycsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIGZyYW1lX2J1cnkgMjIKCmVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDMzOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MTgKICAgIC8vIGlmICh2YWxpZGF0b3JDb21taXNzaW9uUGFpZE91dCAtIG1hbmFnZXJUb3BPZmYgPiAwKSB7CiAgICBmcmFtZV9kaWcgMzYKICAgIGZyYW1lX2RpZyAyMgogICAgLQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDMxCiAgICBieiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUAzNwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MTktNzI1CiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQ6IHZhbGlkYXRvckNvbW1pc3Npb25QYWlkT3V0IC0gbWFuYWdlclRvcE9mZiwKICAgIC8vICAgICByZWNlaXZlcjogdmFsaWRhdG9yQ29uZmlnLnZhbGlkYXRvckNvbW1pc3Npb25BZGRyZXNzLm5hdGl2ZSwKICAgIC8vICAgICBub3RlOiAndmFsaWRhdG9yIHJld2FyZCcsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MjMKICAgIC8vIG5vdGU6ICd2YWxpZGF0b3IgcmV3YXJkJywKICAgIHB1c2hieXRlcyAidmFsaWRhdG9yIHJld2FyZCIKICAgIGl0eG5fZmllbGQgTm90ZQogICAgZnJhbWVfZGlnIDEKICAgIGl0eG5fZmllbGQgUmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAzMQogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzE5LTcyNAogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgYW1vdW50OiB2YWxpZGF0b3JDb21taXNzaW9uUGFpZE91dCAtIG1hbmFnZXJUb3BPZmYsCiAgICAvLyAgICAgcmVjZWl2ZXI6IHZhbGlkYXRvckNvbmZpZy52YWxpZGF0b3JDb21taXNzaW9uQWRkcmVzcy5uYXRpdmUsCiAgICAvLyAgICAgbm90ZTogJ3ZhbGlkYXRvciByZXdhcmQnLAogICAgLy8gICB9KQogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3MTktNzI1CiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQ6IHZhbGlkYXRvckNvbW1pc3Npb25QYWlkT3V0IC0gbWFuYWdlclRvcE9mZiwKICAgIC8vICAgICByZWNlaXZlcjogdmFsaWRhdG9yQ29uZmlnLnZhbGlkYXRvckNvbW1pc3Npb25BZGRyZXNzLm5hdGl2ZSwKICAgIC8vICAgICBub3RlOiAndmFsaWRhdG9yIHJld2FyZCcsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKCmVwb2NoQmFsYW5jZVVwZGF0ZV9hZnRlcl9pZl9lbHNlQDM3OgogICAgZnJhbWVfZGlnIDEwCiAgICBmcmFtZV9idXJ5IDExCgplcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUAzODoKICAgIGZyYW1lX2RpZyAxMQogICAgZnJhbWVfYnVyeSAxMAogICAgYiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUAzOQoKZXBvY2hCYWxhbmNlVXBkYXRlX2Vsc2VfYm9keUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjAyLTYwNQogICAgLy8gYWJpQ2FsbChTdGFraW5nUG9vbC5wcm90b3R5cGUucHJveGllZFNldFRva2VuUGF5b3V0UmF0aW8sIHsKICAgIC8vICAgYXBwSWQ6IHBvb2xPbmVBcHBJRCwKICAgIC8vICAgYXJnczogW3sgaWQ6IHRoaXMudmFsaWRhdG9ySWQudmFsdWUsIHBvb2xJZDogdGhpcy5wb29sSWQudmFsdWUsIHBvb2xBcHBJZDogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLmlkIH1dLAogICAgLy8gfSkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjA0CiAgICAvLyBhcmdzOiBbeyBpZDogdGhpcy52YWxpZGF0b3JJZC52YWx1ZSwgcG9vbElkOiB0aGlzLnBvb2xJZC52YWx1ZSwgcG9vbEFwcElkOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQuaWQgfV0sCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2OQogICAgLy8gdmFsaWRhdG9ySWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAndmFsaWRhdG9ySWQnIH0pCiAgICBieXRlY18zIC8vICJ2YWxpZGF0b3JJZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NjA0CiAgICAvLyBhcmdzOiBbeyBpZDogdGhpcy52YWxpZGF0b3JJZC52YWx1ZSwgcG9vbElkOiB0aGlzLnBvb2xJZC52YWx1ZSwgcG9vbEFwcElkOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uSWQuaWQgfV0sCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6NzIKICAgIC8vIHBvb2xJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdwb29sSWQnIH0pCiAgICBieXRlYyA0IC8vICJwb29sSWQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYwNAogICAgLy8gYXJnczogW3sgaWQ6IHRoaXMudmFsaWRhdG9ySWQudmFsdWUsIHBvb2xJZDogdGhpcy5wb29sSWQudmFsdWUsIHBvb2xBcHBJZDogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbklkLmlkIH1dLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25JRAogICAgdW5jb3ZlciAyCiAgICBpdG9iCiAgICB1bmNvdmVyIDIKICAgIGl0b2IKICAgIGNvbmNhdAogICAgc3dhcAogICAgaXRvYgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjYwMi02MDUKICAgIC8vIGFiaUNhbGwoU3Rha2luZ1Bvb2wucHJvdG90eXBlLnByb3hpZWRTZXRUb2tlblBheW91dFJhdGlvLCB7CiAgICAvLyAgIGFwcElkOiBwb29sT25lQXBwSUQsCiAgICAvLyAgIGFyZ3M6IFt7IGlkOiB0aGlzLnZhbGlkYXRvcklkLnZhbHVlLCBwb29sSWQ6IHRoaXMucG9vbElkLnZhbHVlLCBwb29sQXBwSWQ6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25JZC5pZCB9XSwKICAgIC8vIH0pCiAgICBieXRlYyAxOSAvLyBtZXRob2QgInByb3hpZWRTZXRUb2tlblBheW91dFJhdGlvKCh1aW50NjQsdWludDY0LHVpbnQ2NCkpKHVpbnQ2NFsyNF0sdWludDY0KSIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgZnJhbWVfZGlnIDI2CiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMyAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQnl0ZXMgaGFzIHZhbGlkIHByZWZpeAogICAgYiBlcG9jaEJhbGFuY2VVcGRhdGVfYWZ0ZXJfaWZfZWxzZUAxMgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OlN0YWtpbmdQb29sLmdvT25saW5lKGZlZVBheW1lbnQ6IHVpbnQ2NCwgdm90ZVBLOiBieXRlcywgc2VsZWN0aW9uUEs6IGJ5dGVzLCBzdGF0ZVByb29mUEs6IGJ5dGVzLCB2b3RlRmlyc3Q6IHVpbnQ2NCwgdm90ZUxhc3Q6IHVpbnQ2NCwgdm90ZUtleURpbHV0aW9uOiB1aW50NjQpIC0+IHZvaWQ6CmdvT25saW5lOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MDEtOTA5CiAgICAvLyBnb09ubGluZSgKICAgIC8vICAgZmVlUGF5bWVudDogZ3R4bi5QYXltZW50VHhuLAogICAgLy8gICB2b3RlUEs6IGJ5dGVzLAogICAgLy8gICBzZWxlY3Rpb25QSzogYnl0ZXMsCiAgICAvLyAgIHN0YXRlUHJvb2ZQSzogYnl0ZXMsCiAgICAvLyAgIHZvdGVGaXJzdDogdWludDY0LAogICAgLy8gICB2b3RlTGFzdDogdWludDY0LAogICAgLy8gICB2b3RlS2V5RGlsdXRpb246IHVpbnQ2NCwKICAgIC8vICk6IHZvaWQgewogICAgcHJvdG8gNyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkxMAogICAgLy8gYXNzZXJ0KHRoaXMuaXNPd25lck9yTWFuYWdlckNhbGxlcigpLCAnY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IG93bmVyIG9yIG1hbmFnZXIgb2YgdmFsaWRhdG9yJykKICAgIGNhbGxzdWIgaXNPd25lck9yTWFuYWdlckNhbGxlcgogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGJlIGNhbGxlZCBieSBvd25lciBvciBtYW5hZ2VyIG9mIHZhbGlkYXRvcgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MTIKICAgIC8vIGFzc2VydE1hdGNoKGZlZVBheW1lbnQsIHsgcmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLCBhbW91bnQ6IGV4dHJhRmVlIH0pCiAgICBmcmFtZV9kaWcgLTcKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIGZyYW1lX2RpZyAtNwogICAgZ3R4bnMgQW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwMTYKICAgIC8vIHJldHVybiAyXzAwMF8wMDAKICAgIHB1c2hpbnQgMjAwMDAwMCAvLyAyMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkxMgogICAgLy8gYXNzZXJ0TWF0Y2goZmVlUGF5bWVudCwgeyByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsIGFtb3VudDogZXh0cmFGZWUgfSkKICAgID09CiAgICAmJgogICAgYXNzZXJ0IC8vIGFzc2VydCB0YXJnZXQgaXMgbWF0Y2ggZm9yIGNvbmRpdGlvbnMKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OlN0YWtpbmdQb29sLmdvT2ZmbGluZSgpIC0+IHZvaWQ6CmdvT2ZmbGluZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTMzCiAgICAvLyBpZiAoVHhuLnNlbmRlciAhPT0gQXBwbGljYXRpb24odGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUpLmFkZHJlc3MpIHsKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY2CiAgICAvLyBjcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnY3JlYXRvckFwcCcgfSkKICAgIGJ5dGVjXzEgLy8gImNyZWF0b3JBcHAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjkzMwogICAgLy8gaWYgKFR4bi5zZW5kZXIgIT09IEFwcGxpY2F0aW9uKHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlKS5hZGRyZXNzKSB7CiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwogICAgYXNzZXJ0IC8vIGFwcGxpY2F0aW9uIGV4aXN0cwogICAgIT0KICAgIGJ6IGdvT2ZmbGluZV9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTM0CiAgICAvLyBhc3NlcnQodGhpcy5pc093bmVyT3JNYW5hZ2VyQ2FsbGVyKCksICdjYW4gb25seSBiZSBjYWxsZWQgYnkgb3duZXIgb3IgbWFuYWdlciBvZiB2YWxpZGF0b3InKQogICAgY2FsbHN1YiBpc093bmVyT3JNYW5hZ2VyQ2FsbGVyCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgYmUgY2FsbGVkIGJ5IG93bmVyIG9yIG1hbmFnZXIgb2YgdmFsaWRhdG9yCgpnb09mZmxpbmVfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5MzcKICAgIC8vIGl0eG4ua2V5UmVnaXN0cmF0aW9uKHt9KS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgcHVzaGludCAyIC8vIDIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OlN0YWtpbmdQb29sLmxpbmtUb05GRChuZmRBcHBJZDogdWludDY0LCBuZmROYW1lOiBieXRlcykgLT4gdm9pZDoKbGlua1RvTkZEOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5NDMKICAgIC8vIGxpbmtUb05GRChuZmRBcHBJZDogdWludDY0LCBuZmROYW1lOiBzdHJpbmcpOiB2b2lkIHsKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5NDQKICAgIC8vIGFzc2VydCh0aGlzLmlzT3duZXJPck1hbmFnZXJDYWxsZXIoKSwgJ2NhbiBvbmx5IGJlIGNhbGxlZCBieSBvd25lciBvciBtYW5hZ2VyIG9mIHZhbGlkYXRvcicpCiAgICBjYWxsc3ViIGlzT3duZXJPck1hbmFnZXJDYWxsZXIKICAgIGFzc2VydCAvLyBjYW4gb25seSBiZSBjYWxsZWQgYnkgb3duZXIgb3IgbWFuYWdlciBvZiB2YWxpZGF0b3IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTQ2LTk1NwogICAgLy8gaXR4bgogICAgLy8gICAuYXBwbGljYXRpb25DYWxsKHsKICAgIC8vICAgICBhcHBJZDogVGVtcGxhdGVWYXI8dWludDY0PignTkZEX1JFR0lTVFJZX0FQUF9JRCcpLAogICAgLy8gICAgIGFwcEFyZ3M6IFsKICAgIC8vICAgICAgIEJ5dGVzKCd2ZXJpZnlfbmZkX2FkZHInKSwKICAgIC8vICAgICAgIEJ5dGVzKG5mZE5hbWUpLAogICAgLy8gICAgICAgb3AuaXRvYihuZmRBcHBJZCksCiAgICAvLyAgICAgICBuZXcgQWRkcmVzcyhHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcykuYnl0ZXMsCiAgICAvLyAgICAgXSwKICAgIC8vICAgICBhcHBzOiBbbmZkQXBwSWRdLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTQ4CiAgICAvLyBhcHBJZDogVGVtcGxhdGVWYXI8dWludDY0PignTkZEX1JFR0lTVFJZX0FQUF9JRCcpLAogICAgaW50YyAxMCAvLyBUTVBMX05GRF9SRUdJU1RSWV9BUFBfSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTUyCiAgICAvLyBvcC5pdG9iKG5mZEFwcElkKSwKICAgIGZyYW1lX2RpZyAtMgogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5NTMKICAgIC8vIG5ldyBBZGRyZXNzKEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzKS5ieXRlcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBmcmFtZV9kaWcgLTIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25zCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk1MAogICAgLy8gQnl0ZXMoJ3ZlcmlmeV9uZmRfYWRkcicpLAogICAgcHVzaGJ5dGVzICJ2ZXJpZnlfbmZkX2FkZHIiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgc3dhcAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTQ2LTk1NgogICAgLy8gaXR4bgogICAgLy8gICAuYXBwbGljYXRpb25DYWxsKHsKICAgIC8vICAgICBhcHBJZDogVGVtcGxhdGVWYXI8dWludDY0PignTkZEX1JFR0lTVFJZX0FQUF9JRCcpLAogICAgLy8gICAgIGFwcEFyZ3M6IFsKICAgIC8vICAgICAgIEJ5dGVzKCd2ZXJpZnlfbmZkX2FkZHInKSwKICAgIC8vICAgICAgIEJ5dGVzKG5mZE5hbWUpLAogICAgLy8gICAgICAgb3AuaXRvYihuZmRBcHBJZCksCiAgICAvLyAgICAgICBuZXcgQWRkcmVzcyhHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcykuYnl0ZXMsCiAgICAvLyAgICAgXSwKICAgIC8vICAgICBhcHBzOiBbbmZkQXBwSWRdLAogICAgLy8gICB9KQogICAgaW50Y18zIC8vIDYKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5NDYtOTU3CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hcHBsaWNhdGlvbkNhbGwoewogICAgLy8gICAgIGFwcElkOiBUZW1wbGF0ZVZhcjx1aW50NjQ+KCdORkRfUkVHSVNUUllfQVBQX0lEJyksCiAgICAvLyAgICAgYXBwQXJnczogWwogICAgLy8gICAgICAgQnl0ZXMoJ3ZlcmlmeV9uZmRfYWRkcicpLAogICAgLy8gICAgICAgQnl0ZXMobmZkTmFtZSksCiAgICAvLyAgICAgICBvcC5pdG9iKG5mZEFwcElkKSwKICAgIC8vICAgICAgIG5ldyBBZGRyZXNzKEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzKS5ieXRlcywKICAgIC8vICAgICBdLAogICAgLy8gICAgIGFwcHM6IFtuZmRBcHBJZF0sCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OlN0YWtpbmdQb29sLnByb3hpZWRTZXRUb2tlblBheW91dFJhdGlvKHBvb2xLZXk6IGJ5dGVzKSAtPiBieXRlczoKcHJveGllZFNldFRva2VuUGF5b3V0UmF0aW86CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk2NgogICAgLy8gcHJveGllZFNldFRva2VuUGF5b3V0UmF0aW8ocG9vbEtleTogVmFsaWRhdG9yUG9vbEtleSk6IFBvb2xUb2tlblBheW91dFJhdGlvIHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5NjcKICAgIC8vIGFzc2VydCh0aGlzLnZhbGlkYXRvcklkLnZhbHVlID09PSBwb29sS2V5LmlkLCAnY2FsbGVyIG11c3QgYmUgcGFydCBvZiBzYW1lIHZhbGlkYXRvciBzZXQhJykKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY5CiAgICAvLyB2YWxpZGF0b3JJZCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICd2YWxpZGF0b3JJZCcgfSkKICAgIGJ5dGVjXzMgLy8gInZhbGlkYXRvcklkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5NjcKICAgIC8vIGFzc2VydCh0aGlzLnZhbGlkYXRvcklkLnZhbHVlID09PSBwb29sS2V5LmlkLCAnY2FsbGVyIG11c3QgYmUgcGFydCBvZiBzYW1lIHZhbGlkYXRvciBzZXQhJykKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBmcmFtZV9kaWcgLTEKICAgIGV4dHJhY3QgMCA4CiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMCAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZGlnIDIKICAgID09CiAgICBhc3NlcnQgLy8gY2FsbGVyIG11c3QgYmUgcGFydCBvZiBzYW1lIHZhbGlkYXRvciBzZXQhCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk2OAogICAgLy8gYXNzZXJ0KHRoaXMucG9vbElkLnZhbHVlID09PSAxLCAnY2FsbGVlIG11c3QgYmUgcG9vbCAxJykKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjcyCiAgICAvLyBwb29sSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAncG9vbElkJyB9KQogICAgYnl0ZWMgNCAvLyAicG9vbElkIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5NjgKICAgIC8vIGFzc2VydCh0aGlzLnBvb2xJZC52YWx1ZSA9PT0gMSwgJ2NhbGxlZSBtdXN0IGJlIHBvb2wgMScpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBhc3NlcnQgLy8gY2FsbGVlIG11c3QgYmUgcG9vbCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk2OQogICAgLy8gYXNzZXJ0KHBvb2xLZXkucG9vbElkICE9PSAxLCAnY2FsbGVyIG11c3QgTk9UIGJlIHBvb2wgMScpCiAgICBmcmFtZV9kaWcgLTEKICAgIGV4dHJhY3QgOCA4CiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgOCAvLyA4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDEKICAgICE9CiAgICBhc3NlcnQgLy8gY2FsbGVyIG11c3QgTk9UIGJlIHBvb2wgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5NzEtOTc0CiAgICAvLyBjb25zdCBjYWxsZXJQb29sQXBwSUQgPSBhYmlDYWxsKFZhbGlkYXRvclJlZ2lzdHJ5QUJJLnByb3RvdHlwZS5nZXRQb29sQXBwSWQsIHsKICAgIC8vICAgYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgLy8gICBhcmdzOiBbcG9vbEtleS5pZCwgcG9vbEtleS5wb29sSWRdLAogICAgLy8gfSkucmV0dXJuVmFsdWUKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTcyCiAgICAvLyBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2NgogICAgLy8gY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ2NyZWF0b3JBcHAnIH0pCiAgICBieXRlY18xIC8vICJjcmVhdG9yQXBwIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5NzIKICAgIC8vIGFwcElkOiB0aGlzLmNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZC52YWx1ZSwKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk3MS05NzQKICAgIC8vIGNvbnN0IGNhbGxlclBvb2xBcHBJRCA9IGFiaUNhbGwoVmFsaWRhdG9yUmVnaXN0cnlBQkkucHJvdG90eXBlLmdldFBvb2xBcHBJZCwgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFtwb29sS2V5LmlkLCBwb29sS2V5LnBvb2xJZF0sCiAgICAvLyB9KS5yZXR1cm5WYWx1ZQogICAgYnl0ZWMgMjQgLy8gbWV0aG9kICJnZXRQb29sQXBwSWQodWludDY0LHVpbnQ2NCl1aW50NjQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgdW5jb3ZlciAyCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgc3dhcAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGR1cAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECiAgICBpbnRjXzMgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBMYXN0TG9nCiAgICBkdXAKICAgIGV4dHJhY3QgNCAwCiAgICBzd2FwCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEJ5dGVzIGhhcyB2YWxpZCBwcmVmaXgKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTc2CiAgICAvLyBhc3NlcnQoY2FsbGVyUG9vbEFwcElEID09PSBwb29sS2V5LnBvb2xBcHBJZCkKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdF91aW50NjQKICAgIHN3YXAKICAgIGRpZyAxCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk3NwogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIgPT09IEFwcGxpY2F0aW9uKHBvb2xLZXkucG9vbEFwcElkKS5hZGRyZXNzKQogICAgdHhuIFNlbmRlcgogICAgc3dhcAogICAgYXBwX3BhcmFtc19nZXQgQXBwQWRkcmVzcwogICAgYXNzZXJ0IC8vIGFwcGxpY2F0aW9uIGV4aXN0cwogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5NzktOTgyCiAgICAvLyByZXR1cm4gYWJpQ2FsbChWYWxpZGF0b3JSZWdpc3RyeUFCSS5wcm90b3R5cGUuc2V0VG9rZW5QYXlvdXRSYXRpbywgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlXSwKICAgIC8vIH0pLnJldHVyblZhbHVlCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk4MQogICAgLy8gYXJnczogW3RoaXMudmFsaWRhdG9ySWQudmFsdWVdLAogICAgc3dhcAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5NzktOTgyCiAgICAvLyByZXR1cm4gYWJpQ2FsbChWYWxpZGF0b3JSZWdpc3RyeUFCSS5wcm90b3R5cGUuc2V0VG9rZW5QYXlvdXRSYXRpbywgewogICAgLy8gICBhcHBJZDogdGhpcy5jcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQudmFsdWUsCiAgICAvLyAgIGFyZ3M6IFt0aGlzLnZhbGlkYXRvcklkLnZhbHVlXSwKICAgIC8vIH0pLnJldHVyblZhbHVlCiAgICBieXRlYyAyNSAvLyBtZXRob2QgInNldFRva2VuUGF5b3V0UmF0aW8odWludDY0KSh1aW50NjRbMjRdLHVpbnQ2NCkiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgaW50Y18zIC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDQgMAogICAgc3dhcAogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBCeXRlcyBoYXMgdmFsaWQgcHJlZml4CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjpTdGFraW5nUG9vbC5pc093bmVyT3JNYW5hZ2VyQ2FsbGVyKCkgLT4gdWludDY0Ogppc093bmVyT3JNYW5hZ2VyQ2FsbGVyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5ODUKICAgIC8vIHByaXZhdGUgaXNPd25lck9yTWFuYWdlckNhbGxlcigpOiBib29sZWFuIHsKICAgIHByb3RvIDAgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5ODYtOTg5CiAgICAvLyBjb25zdCBPd25lckFuZE1hbmFnZXIgPSBhYmlDYWxsKFZhbGlkYXRvclJlZ2lzdHJ5QUJJLnByb3RvdHlwZS5nZXRWYWxpZGF0b3JPd25lckFuZE1hbmFnZXIsIHsKICAgIC8vICAgYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgLy8gICBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICAvLyB9KS5yZXR1cm5WYWx1ZQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5ODcKICAgIC8vIGFwcElkOiB0aGlzLmNyZWF0aW5nVmFsaWRhdG9yQ29udHJhY3RBcHBJZC52YWx1ZSwKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjY2CiAgICAvLyBjcmVhdGluZ1ZhbGlkYXRvckNvbnRyYWN0QXBwSWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnY3JlYXRvckFwcCcgfSkKICAgIGJ5dGVjXzEgLy8gImNyZWF0b3JBcHAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk4NwogICAgLy8gYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTg4CiAgICAvLyBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo2OQogICAgLy8gdmFsaWRhdG9ySWQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAndmFsaWRhdG9ySWQnIH0pCiAgICBieXRlY18zIC8vICJ2YWxpZGF0b3JJZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTg4CiAgICAvLyBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo5ODYtOTg5CiAgICAvLyBjb25zdCBPd25lckFuZE1hbmFnZXIgPSBhYmlDYWxsKFZhbGlkYXRvclJlZ2lzdHJ5QUJJLnByb3RvdHlwZS5nZXRWYWxpZGF0b3JPd25lckFuZE1hbmFnZXIsIHsKICAgIC8vICAgYXBwSWQ6IHRoaXMuY3JlYXRpbmdWYWxpZGF0b3JDb250cmFjdEFwcElkLnZhbHVlLAogICAgLy8gICBhcmdzOiBbdGhpcy52YWxpZGF0b3JJZC52YWx1ZV0sCiAgICAvLyB9KS5yZXR1cm5WYWx1ZQogICAgcHVzaGJ5dGVzIDB4MmZhMjJjNGIgLy8gbWV0aG9kICJnZXRWYWxpZGF0b3JPd25lckFuZE1hbmFnZXIodWludDY0KShhZGRyZXNzLGFkZHJlc3MpIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIGludGNfMyAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cG4gMgogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBCeXRlcyBoYXMgdmFsaWQgcHJlZml4CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk5MAogICAgLy8gcmV0dXJuIFR4bi5zZW5kZXIgPT09IE93bmVyQW5kTWFuYWdlclswXS5uYXRpdmUgfHwgVHhuLnNlbmRlciA9PT0gT3duZXJBbmRNYW5hZ2VyWzFdLm5hdGl2ZQogICAgdHhuIFNlbmRlcgogICAgc3dhcAogICAgZXh0cmFjdCA0IDMyCiAgICA9PQogICAgYm56IGlzT3duZXJPck1hbmFnZXJDYWxsZXJfYm9vbF90cnVlQDMKICAgIHR4biBTZW5kZXIKICAgIGZyYW1lX2RpZyAwCiAgICBleHRyYWN0IDM2IDMyCiAgICA9PQogICAgYnogaXNPd25lck9yTWFuYWdlckNhbGxlcl9ib29sX2ZhbHNlQDQKCmlzT3duZXJPck1hbmFnZXJDYWxsZXJfYm9vbF90cnVlQDM6CiAgICBpbnRjXzEgLy8gMQoKaXNPd25lck9yTWFuYWdlckNhbGxlcl9ib29sX21lcmdlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk5MAogICAgLy8gcmV0dXJuIFR4bi5zZW5kZXIgPT09IE93bmVyQW5kTWFuYWdlclswXS5uYXRpdmUgfHwgVHhuLnNlbmRlciA9PT0gT3duZXJBbmRNYW5hZ2VyWzFdLm5hdGl2ZQogICAgc3dhcAogICAgcmV0c3ViCgppc093bmVyT3JNYW5hZ2VyQ2FsbGVyX2Jvb2xfZmFsc2VANDoKICAgIGludGNfMCAvLyAwCiAgICBiIGlzT3duZXJPck1hbmFnZXJDYWxsZXJfYm9vbF9tZXJnZUA1CgoKLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo6U3Rha2luZ1Bvb2wuY2hlY2tJZkJpbkNsb3NlZCgpIC0+IHZvaWQ6CmNoZWNrSWZCaW5DbG9zZWQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwMjkKICAgIC8vIHByaXZhdGUgY2hlY2tJZkJpbkNsb3NlZCgpIHsKICAgIHByb3RvIDAgMAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTAzMAogICAgLy8gY29uc3QgY3VycmVudEJpblNpemUgPSBCaWdVaW50KHRoaXMucm91bmRzUGVyRGF5LnZhbHVlKQogICAgZHVwbiA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk2CiAgICAvLyByb3VuZHNQZXJEYXkgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAncm91bmRzUGVyRGF5JyB9KQogICAgYnl0ZWMgNyAvLyAicm91bmRzUGVyRGF5IgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDMwCiAgICAvLyBjb25zdCBjdXJyZW50QmluU2l6ZSA9IEJpZ1VpbnQodGhpcy5yb3VuZHNQZXJEYXkudmFsdWUpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgZHVwCiAgICBpdG9iCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwMzEKICAgIC8vIGlmIChHbG9iYWwucm91bmQgPj0gdGhpcy5iaW5Sb3VuZFN0YXJ0LnZhbHVlICsgdGhpcy5yb3VuZHNQZXJEYXkudmFsdWUpIHsKICAgIGdsb2JhbCBSb3VuZAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTgKICAgIC8vIGJpblJvdW5kU3RhcnQgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAnYmluUm91bmRTdGFydCcgfSkKICAgIGJ5dGVjIDkgLy8gImJpblJvdW5kU3RhcnQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwMzEKICAgIC8vIGlmIChHbG9iYWwucm91bmQgPj0gdGhpcy5iaW5Sb3VuZFN0YXJ0LnZhbHVlICsgdGhpcy5yb3VuZHNQZXJEYXkudmFsdWUpIHsKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICB1bmNvdmVyIDIKICAgICsKICAgID49CiAgICBieiBjaGVja0lmQmluQ2xvc2VkX2FmdGVyX2lmX2Vsc2VANgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDMyCiAgICAvLyBlbnN1cmVCdWRnZXQoMzAwKQogICAgaW50YyA3IC8vIDMwMAogICAgaW50Y18wIC8vIDAKICAgIGNhbGxzdWIgZW5zdXJlX2J1ZGdldAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDM0CiAgICAvLyBjb25zdCBhcHByb3hSb3VuZHNQZXJZZWFyOiBiaWd1aW50ID0gY3VycmVudEJpblNpemUgKiBCaWdVaW50KDM2NSkKICAgIGZyYW1lX2RpZyA0CiAgICBkdXAKICAgIHB1c2hieXRlcyAweDAxNmQKICAgIGIqCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTAzNQogICAgLy8gY29uc3QgYXZnU3Rha2U6IGJpZ3VpbnQgPSB0aGlzLnN0YWtlQWNjdW11bGF0b3IudmFsdWUubmF0aXZlIC8gY3VycmVudEJpblNpemUKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwMAogICAgLy8gc3Rha2VBY2N1bXVsYXRvciA9IEdsb2JhbFN0YXRlPFVpbnQxMjg+KHsga2V5OiAnc3Rha2VBY2N1bXVsYXRvcicgfSkKICAgIGJ5dGVjIDYgLy8gInN0YWtlQWNjdW11bGF0b3IiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwMzUKICAgIC8vIGNvbnN0IGF2Z1N0YWtlOiBiaWd1aW50ID0gdGhpcy5zdGFrZUFjY3VtdWxhdG9yLnZhbHVlLm5hdGl2ZSAvIGN1cnJlbnRCaW5TaXplCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgc3dhcAogICAgYi8KICAgIGR1cAogICAgZnJhbWVfYnVyeSAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwMzYKICAgIC8vIGlmIChhdmdTdGFrZSAhPT0gQmlnVWludCgwKSkgewogICAgcHVzaGJ5dGVzIDB4CiAgICBiIT0KICAgIGJ6IGNoZWNrSWZCaW5DbG9zZWRfYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwNDEKICAgIC8vICgoQmlnVWludCh0aGlzLnJld2FyZEFjY3VtdWxhdG9yLnZhbHVlKSAqIEJpZ1VpbnQoMTAwMDApKSAvIGF2Z1N0YWtlKSAqIChhcHByb3hSb3VuZHNQZXJZZWFyIC8gY3VycmVudEJpblNpemUpCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDIKICAgIC8vIHJld2FyZEFjY3VtdWxhdG9yID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ3Jld2FyZEFjY3VtdWxhdG9yJyB9KQogICAgYnl0ZWMgMTEgLy8gInJld2FyZEFjY3VtdWxhdG9yIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDQxCiAgICAvLyAoKEJpZ1VpbnQodGhpcy5yZXdhcmRBY2N1bXVsYXRvci52YWx1ZSkgKiBCaWdVaW50KDEwMDAwKSkgLyBhdmdTdGFrZSkgKiAoYXBwcm94Um91bmRzUGVyWWVhciAvIGN1cnJlbnRCaW5TaXplKQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIGl0b2IKICAgIHB1c2hieXRlcyAweDI3MTAKICAgIGIqCiAgICBmcmFtZV9kaWcgMwogICAgZHVwCiAgICBjb3ZlciAyCiAgICBiLwogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyA0CiAgICBiLwogICAgYioKICAgIGZyYW1lX2J1cnkgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDQzCiAgICAvLyBsZXQgYWxwaGEgPSBCaWdVaW50KDEwKSAvLyAuMQogICAgcHVzaGJ5dGVzIDB4MGEKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDQ1CiAgICAvLyBpZiAoYXZnU3Rha2UgPiBCaWdVaW50KDMwMDAwMDAwMDAwMCkpIHsKICAgIHB1c2hieXRlcyAweDQ1ZDk2NGI4MDAKICAgIGI+CiAgICBieiBjaGVja0lmQmluQ2xvc2VkX2FmdGVyX2lmX2Vsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDQ2CiAgICAvLyBhbHBoYSA9IEJpZ1VpbnQoOTApIC8vIC45CiAgICBwdXNoYnl0ZXMgMHg1YQogICAgZnJhbWVfYnVyeSAwCgpjaGVja0lmQmluQ2xvc2VkX2FmdGVyX2lmX2Vsc2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTA0OQogICAgLy8gKHRoaXMud2VpZ2h0ZWRNb3ZpbmdBdmVyYWdlLnZhbHVlLm5hdGl2ZSAqIChCaWdVaW50KDEwMCkgLSBhbHBoYSkpIC8gQmlnVWludCgxMDApICsKICAgIGludGNfMCAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwNAogICAgLy8gd2VpZ2h0ZWRNb3ZpbmdBdmVyYWdlID0gR2xvYmFsU3RhdGU8VWludDEyOD4oeyBrZXk6ICdld21hJyB9KQogICAgYnl0ZWMgMTYgLy8gImV3bWEiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwNDkKICAgIC8vICh0aGlzLndlaWdodGVkTW92aW5nQXZlcmFnZS52YWx1ZS5uYXRpdmUgKiAoQmlnVWludCgxMDApIC0gYWxwaGEpKSAvIEJpZ1VpbnQoMTAwKSArCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgYnl0ZWMgMTggLy8gMHg2NAogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgY292ZXIgMwogICAgYi0KICAgIGIqCiAgICBieXRlYyAxOCAvLyAweDY0CiAgICBiLwogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDUwCiAgICAvLyAoYXByICogYWxwaGEpIC8gQmlnVWludCgxMDApLAogICAgZnJhbWVfZGlnIDIKICAgIHVuY292ZXIgMgogICAgYioKICAgIGJ5dGVjIDE4IC8vIDB4NjQKICAgIGIvCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwNDktMTA1MAogICAgLy8gKHRoaXMud2VpZ2h0ZWRNb3ZpbmdBdmVyYWdlLnZhbHVlLm5hdGl2ZSAqIChCaWdVaW50KDEwMCkgLSBhbHBoYSkpIC8gQmlnVWludCgxMDApICsKICAgIC8vICAgKGFwciAqIGFscGhhKSAvIEJpZ1VpbnQoMTAwKSwKICAgIGIrCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwNDgtMTA1MQogICAgLy8gdGhpcy53ZWlnaHRlZE1vdmluZ0F2ZXJhZ2UudmFsdWUgPSBuZXcgVWludDEyOCgKICAgIC8vICAgKHRoaXMud2VpZ2h0ZWRNb3ZpbmdBdmVyYWdlLnZhbHVlLm5hdGl2ZSAqIChCaWdVaW50KDEwMCkgLSBhbHBoYSkpIC8gQmlnVWludCgxMDApICsKICAgIC8vICAgICAoYXByICogYWxwaGEpIC8gQmlnVWludCgxMDApLAogICAgLy8gKQogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIGJ6ZXJvCiAgICBifAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDQKICAgIC8vIHdlaWdodGVkTW92aW5nQXZlcmFnZSA9IEdsb2JhbFN0YXRlPFVpbnQxMjg+KHsga2V5OiAnZXdtYScgfSkKICAgIGJ5dGVjIDE2IC8vICJld21hIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDQ4LTEwNTEKICAgIC8vIHRoaXMud2VpZ2h0ZWRNb3ZpbmdBdmVyYWdlLnZhbHVlID0gbmV3IFVpbnQxMjgoCiAgICAvLyAgICh0aGlzLndlaWdodGVkTW92aW5nQXZlcmFnZS52YWx1ZS5uYXRpdmUgKiAoQmlnVWludCgxMDApIC0gYWxwaGEpKSAvIEJpZ1VpbnQoMTAwKSArCiAgICAvLyAgICAgKGFwciAqIGFscGhhKSAvIEJpZ1VpbnQoMTAwKSwKICAgIC8vICkKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CgpjaGVja0lmQmluQ2xvc2VkX2FmdGVyX2lmX2Vsc2VANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTYKICAgIC8vIHJvdW5kc1BlckRheSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdyb3VuZHNQZXJEYXknIH0pCiAgICBieXRlYyA3IC8vICJyb3VuZHNQZXJEYXkiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwNjMKICAgIC8vIHRoaXMucm91bmRzUGVyRGF5LnZhbHVlID0gQVZHX1JPVU5EU19QRVJfREFZCiAgICBpbnRjIDUgLy8gMzA4NTcKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwNTYKICAgIC8vIHRoaXMuc3Rha2VBY2N1bXVsYXRvci52YWx1ZSA9IG5ldyBVaW50MTI4KHRoaXMudG90YWxBbGdvU3Rha2VkLnZhbHVlICogdGhpcy5yb3VuZHNQZXJEYXkudmFsdWUpCiAgICBpbnRjXzAgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czo3OAogICAgLy8gdG90YWxBbGdvU3Rha2VkID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ3N0YWtlZCcgfSkKICAgIGJ5dGVjIDUgLy8gInN0YWtlZCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTA1NgogICAgLy8gdGhpcy5zdGFrZUFjY3VtdWxhdG9yLnZhbHVlID0gbmV3IFVpbnQxMjgodGhpcy50b3RhbEFsZ29TdGFrZWQudmFsdWUgKiB0aGlzLnJvdW5kc1BlckRheS52YWx1ZSkKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwNjMKICAgIC8vIHRoaXMucm91bmRzUGVyRGF5LnZhbHVlID0gQVZHX1JPVU5EU19QRVJfREFZCiAgICBpbnRjIDUgLy8gMzA4NTcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTA1NgogICAgLy8gdGhpcy5zdGFrZUFjY3VtdWxhdG9yLnZhbHVlID0gbmV3IFVpbnQxMjgodGhpcy50b3RhbEFsZ29TdGFrZWQudmFsdWUgKiB0aGlzLnJvdW5kc1BlckRheS52YWx1ZSkKICAgICoKICAgIGl0b2IKICAgIHB1c2hpbnQgMTYgLy8gMTYKICAgIGJ6ZXJvCiAgICBifAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDAKICAgIC8vIHN0YWtlQWNjdW11bGF0b3IgPSBHbG9iYWxTdGF0ZTxVaW50MTI4Pih7IGtleTogJ3N0YWtlQWNjdW11bGF0b3InIH0pCiAgICBieXRlYyA2IC8vICJzdGFrZUFjY3VtdWxhdG9yIgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDU2CiAgICAvLyB0aGlzLnN0YWtlQWNjdW11bGF0b3IudmFsdWUgPSBuZXcgVWludDEyOCh0aGlzLnRvdGFsQWxnb1N0YWtlZC52YWx1ZSAqIHRoaXMucm91bmRzUGVyRGF5LnZhbHVlKQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTAyCiAgICAvLyByZXdhcmRBY2N1bXVsYXRvciA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdyZXdhcmRBY2N1bXVsYXRvcicgfSkKICAgIGJ5dGVjIDExIC8vICJyZXdhcmRBY2N1bXVsYXRvciIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6MTA1NwogICAgLy8gdGhpcy5yZXdhcmRBY2N1bXVsYXRvci52YWx1ZSA9IDAKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDU4CiAgICAvLyB0aGlzLmJpblJvdW5kU3RhcnQudmFsdWUgPSBHbG9iYWwucm91bmQgLSAoR2xvYmFsLnJvdW5kICUgdGhpcy5yb3VuZHNQZXJEYXkudmFsdWUpCiAgICBnbG9iYWwgUm91bmQKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9yZXRpL3N0YWtpbmdQb29sLmFsZ28udHM6OTYKICAgIC8vIHJvdW5kc1BlckRheSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICdyb3VuZHNQZXJEYXknIH0pCiAgICBieXRlYyA3IC8vICJyb3VuZHNQZXJEYXkiCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjEwNTgKICAgIC8vIHRoaXMuYmluUm91bmRTdGFydC52YWx1ZSA9IEdsb2JhbC5yb3VuZCAtIChHbG9iYWwucm91bmQgJSB0aGlzLnJvdW5kc1BlckRheS52YWx1ZSkKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAlCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvcmV0aS9zdGFraW5nUG9vbC5hbGdvLnRzOjk4CiAgICAvLyBiaW5Sb3VuZFN0YXJ0ID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogJ2JpblJvdW5kU3RhcnQnIH0pCiAgICBieXRlYyA5IC8vICJiaW5Sb3VuZFN0YXJ0IgogICAgLy8gc21hcnRfY29udHJhY3RzL3JldGkvc3Rha2luZ1Bvb2wuYWxnby50czoxMDU4CiAgICAvLyB0aGlzLmJpblJvdW5kU3RhcnQudmFsdWUgPSBHbG9iYWwucm91bmQgLSAoR2xvYmFsLnJvdW5kICUgdGhpcy5yb3VuZHNQZXJEYXkudmFsdWUpCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAoKY2hlY2tJZkJpbkNsb3NlZF9hZnRlcl9pZl9lbHNlQDY6CiAgICByZXRzdWIK","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiALAAFABsgBifEBnQGsAqCWgAHAhD0AJh0Hc3Rha2VycwpjcmVhdG9yQXBwBBUffHULdmFsaWRhdG9ySWQGcG9vbElkBnN0YWtlZBBzdGFrZUFjY3VtdWxhdG9yDHJvdW5kc1BlckRheQIAAg1iaW5Sb3VuZFN0YXJ0Cm51bVN0YWtlcnMRcmV3YXJkQWNjdW11bGF0b3IKbGFzdFBheW91dAR1r/YdDW1pbkVudHJ5U3Rha2ULZXBvY2hOdW1iZXIEZXdtYQIAAQFkBAwiReEDBoEBEAAAAAAAAAAAAAAAAAAAAAEQAAAAAAAAAAAAAAAAAAAAAASi3FG1BFcnZ9EETfjYbgoAAQAAAAAAD0JAAgADADEbQQBtgg4ERvdlMwRZ6QqmBDFyyp0ER8/MBAT5xwy9BEIbWr4E9YktVgRc+7BXBGPz8osEhqNyXATvwmCNBEAOFPsEUe87IQSiTicXJxM2GgCODwEsAQ8BBgDwANIAvwCzAKAAiQB3AGsANwArABUAAiJDMRkURDEYRDYaAYgPDCpMULAjQzEZFEQxGEQ2GgEXNhoCVwIAiA65I0MxGRREMRhEiA6SI0MxGRREMRhEMRYjCUk4ECMSRDYaAVcCADYaAlcCADYaA1cCADYaBBc2GgUXNhoGF4gORCNDMRkURDEYRIgHIiNDMRkURDEYRDYaAVcCAIgG+yNDMRkURDEYRDYaATYaAhc2GgMXiAa1I0MxGRREMRhENhoBiAZrKkxQsCNDMRkURDEYRIgFciNDMRkURDEYRDYaATYaAheIA4kjQzEZFEQxGEQxFiMJSTgQIxJENhoBiAIvFipMULAjQzEZFEQxGEQxFiMJSTgQIxJEiAGII0MxGRREMRhEI0MxGRREMRgURDYaARc2GgIXNhoDFzYaBBeIAQEjQzEZgQQSRDEYRIgAzCNDigIAi/6BCgiLADIMDUEAKbElshCBBbIZJxSyHicUsh+L/40CAAsABLNC/9wyALIBQv/1IrIBQv/viYoCAyKAAEknFYv+IlkiiwWLBAxBACWL/lcCAIsFSU4CgQgLWxaLA6NJFYEQDkSBEK+rjAMjCIwFQv/TJxWMAIv/IlmMASKMAosCiwEMQQAli/9XAgCLAklOAoEIC1sWiwCjSRWBEA5EgRCvq4wAIwiMAkL/04sDiwCiSRWBCA5EgQivqxeL/ov/jAKMAYwAiTEAgCBeeV0iNViuVKuRImvJgMRRMTBozI+mLW+ccHa9gLtlrxJEiYoEAIv8QABQi/0URIv+FESL/yEJD0Qpi/xnK4v9ZycEi/5nJwoiZycFImcnDov/ZycMMgZnJw8iZycHIQVnMgZJIQUYCScJTGcnBicWZycLImcnECcWZ4mL/USL/kRC/6+KAQAovUUBFESxIillRCIrZUQWJw2yGrIashglshAisgGztD5JVwAEKhJEIQZbSUEAViInBGVEIxJBAEwjgaCNBguB1Pa+AgiL/zgHMghyCEQSi/84CE8CEhBEKIGAZLlIiwBBACEiJwRlRCMSQQAXsTIIcghEIrISshSLALIRgQSyECKyAbOJIkL/sYoCASJJgABJKL1FAUQxACIpZURyCEQSRIv/MgMTRIgMq4v+OAAiKWVEcghEEov+OAcyChIQi/44CElPAiMQRDIGgcACCEwiTCInBWVESwEIJwVMZyInCWVEIicHZUQIMgYJIicGZURPAhZJTgNPAhajoEkVgRAORIEQr6snBkxnIii9RQFEiwghBAxBAGwhByKI/Y6LCCQLSYwCKEwkukmMAVcAIEmMAIv/EkEAJSiLAklOAiS6gSBbiwQIFosBTFwgiwVJTgIWXDgoTwNPAruMAImLBkmMA0AAEosAMgMSiwaMA0EABosIIwiMA4sDjAaLCCMIjAhC/4eLBkkUFEQiJw5lRIsEDkQjCSQLKEsBJLpXACAyAxJEi/+LB1AiFkxLAVBMUIsFSU4CFlAoTwNPArsiJwplRCMIJwpMZ4wAiYoCACJJgABHBov+MQATQQAEiAsxRIgLcyKMBii9RQFEiwZJIQQMRCEHIoj8tCQLSYwFKEwkukmMAFcAIIv+EkEBi4v/jASL/0AADSiLBSS6gSBbSYz/jASLBIz/KIsFJLqBIFtJi/8MFESL/wkWiwBMXCBJjAAiJwVlRIv/CScFTGcijAJJgTBbSYwDTIwBQQBTIicEZUQjEkEBJbEiKWVEIitlRBYnDbIashqyGCWyECKyAbO0PklXAAQqEkSxIQZbiwOyEov+shSyEYEEshAisgGzIhaLAExcMIwAiwOMAosAjAGLAUmMAIEgW0mMCEEACyInDmVEiwgOQQC/I0SxgAh1bnN0YWtlZLIFi/6yB4v/sggjshAisgGzIowHiwCMAYsIQAAgIicKZUQjCScKTGeLADIDXAAiFkxLAVwoTFwwI4wHjAGLASiLBU8CuyInCWVEIicHZUQIMgYJi/8LFiInBmVETKFJFYEQDkSBEK+rJwZMZ7EiKWVEIitlRCInBGVEMghPAhZPAhZQTBZQi/8WiwIWgAEAIosHVCcXshpPA7Iai/6yGk8CshpMshqyGrIYJbIQIrIBs4kiQv8+IhaLAExcMIwAQv8QiwYjCIwGQv5FigAAIkmAAEkxACIovUUBRIsFSSEEDEQhByKI+u4kC0mMAyhMJLpJjAFXACCLBBJBAK4oiwMkuklXMAiMAIEwW0mMAkAAAYkiJwRlRCMSQQCDsSIpZUQiK2VEFicNshqyGrIYJbIQIrIBs7Q+SVcABCoSRLEhBluLArISiwSyFLIRgQSyECKyAbMiFosBTFwwjAEoiwOLAbuxIillRCIrZUQiJwRlRDIITwIWTwIWUEwWUCIWJxeyGkyyGosEshqyGosAshqAAQCyGrIYJbIQIrIBs4kiFosBTFwwjAFC/7KLBSMIjAVC/yKKAQGAACIovUUBRIsBSSEEDEQhBCKI+gokC0mMAChMJLpXACCL/xJBAAgoiwAkuowAiYsBIwiMAUL/y4oDADEAIillRHIIRBJEIicEZUQjEkSL/kSxi/+yEov9shSL/rIRgQSyECKyAbOJigEAiAgWRIAIYWxnb2RWZXKL/2eJigAAIkcJgABHICKxIillRCIrZUQWJw2yGrIashglshAisgGztD5HAlcABCoSRIGtAVpJMgZJTgJJTwIYCSInDGVFAUEADiInDGVESYstGAmLLxNEiAf2JwyLLmciJw9lRCMIJw9MZ4ssIQZbSYwlMgiMGjIKSYwHiyuMCYwIQQB4IicEZUQjE0EANbEiKWVEIitlRBYjFicYshpMshqyGrIYJbIQIrIBs7Q+SVcEAExXAAQqEkQXSYwacghMjAdEIicEZUQjEkEGGrEiKWVEIitlRBYnGbIashqyGCWyECKyAbO0PklXBACMK1cABCoSRIsrjAmLB4wIiwmMK4sIjAexIillRCIrZUQWgAQfLwEJshqyGrIYJbIQIrIBs7Q+SVcABCoSREmBFluMGzIKcwBEIicFZUQJMgpzAUQJjAoijBOB6AcWjAKCAhIAAgAHGv1JjQAAAAAAAAAAAGQKAAEAAAAAAAAD6Ij4cUYCSYwMTIEOW0mMKAxBAAMjjBMiSYwgIowiIowkIowPjCGLJUEAP4sHiyVwAEiLGwmLLIGlAVtJjCkPQQAkIicEZUQjCYsrVwDATIEIC1uLKRYnCExQTBZQJxqI+BNGAowgiyCMIYshSYwgQAAiiwohCQxBABqAFiF0b2tlbiYmIW5vYWxnbyB0byBwYXmwiYsTQQP0iwpJFicITFCLDBZQiygWJxFMUIj3xkYCTEsBCUmMD7EnHIAicG9vbCBzYXR1cmF0ZWQsIGV4Y2VzcyB0byBmZWUgc2lua7IFsgeyCCOyECKyAbOMCiKMEYsKQAANiyKMI4sRjBKLIEEC+yKMGCKMECi9RQFEixAhBAxBAa6BkAMiiPceixAkC0mMDShMJLpJjANXACAyAxOLEYwSiwqMC4sijCOLIIwhixiMGUEAMiiLDSS6gThbSYwqiy8PQQA+KIsNJLqBIFuLGAiMGIsRjBKLCowLiyKMI4sgjCGLGIwZixKMEYsLjAqLI4wiiyGMIIsZjBiLECMIjBBC/3KLL4sqCUmMHIstDIsRjBKLCowLiyKMI4sgjCGLGIwZQQD0KIsNJLqBIFtJjCaLGAiMGIscgegHC4stCowdiyKMI4sgSYwhiwOMBEEARIsmFicbTFCLIElOAhZQix0WUCInBWVEFicITFCLAlCI9m9GAkxLAQkoiw0kuoEwW0sCCBaLA0xcMIsiTwMIjCOMBIwhiyOMIoshjCCLBEmMA4sRjBKLCkmMC0yMBEEATYsDSYEgW0kWJxtMUIsKSU4CFlCLHRZQIicFZUQWJwhMUIsCUIj2CkYCTEsBCU8CSwIIFk8DTFwgSYEoW0sDCBZcKIsRTwMIjBKMBIwLiwuLEosEKIsNTwK7jBKMC4sijCOLIIwhixiMGYsSjBGLC4wKiyOMIoshjCCLGYwYQv6iIicFZUSLGAlJjBeLIowjixGMEkEBISKMFCi9RQFEixQhBAxBAQkhBCKI9UuLFCQLSYwOKEwkukmMBVcAIDIDE4sRjBKLIowjQQDTKIsOJLqBOFtJjCeLLwyLEYwSiyKMI0EAuosviycJiy0PixGMEosijCNBAKSLIowjiwWMBosgQQA6KIsOSU4CJLqBIFsWJwhMUIsgFlCLFxYnEUxQiPUPRgIoTwIkuoEwW0sBCBaLBUxcMIsiTwIIjCOMBosjjCKLBkmMBYsRjBKMBosKQQA5iwVJgSBbSRYnCExQiwoWUIsXFicRTFCI9MVGAkxLAQgWTwJMXCBJgShbSwIIFlwoixFPAgiMEowGixKLBiiLDk8Cu4wSiyKMI0IAAIsSjBGLI4wiixQjCIwUQv7qiyKMI4sRjBJCAACLI4sSIicJZUQiJwdlRAgyBgkiJwVlREsCCCcFTGciJwZlREsCFk8CFksBo08CoEkVgRAORIEQr6snBkxnIicLZURPAggnC0xnsSIpZUQiK2VEIicEZUQyCE8CFk8CFlBMFlBPAxaLJBaLDxaABEGPzvyyGk8DshpPBLIaTwKyGkyyGrIashglshAisgGziYssgbEBWkmMHosKjAtBANiLCkkWJwhMUIseFlAnGojzx0YCSYwkTEsBCYwKQQC1IkmMFYssSVcsIElOAowAV7UgSYwBE0yMFkEAaosASXMARExzAUQJIQgMixWMFkEAVYskSSEIDCEITgJNsYA1dmFsaWRhdG9yIHJld2FyZCB0byBtYW5hZ2VyIGZvciBmdW5kaW5nIGVwb2NoIHVwZGF0ZXOyBYsAsgdJsggjshAisgGzjBaLJIsWCUmMH0EAJLGAEHZhbGlkYXRvciByZXdhcmSyBYsBsgeLH7III7IQIrIBs4sKjAuLC4wKQvtysSIrZUQiJwRlRDIITwIWTwIWUEwWUCcTshqyGosashglshAisgGztD5XAAQqEkRC+duKBwCIAOtEi/k4BzIKEov5OAiBgIl6EhBEiTEAIillRHIIRBNBAASIAMdEsYECshAisgGziYoCAIgAtkSxIQqL/hYyCov+sjKAD3ZlcmlmeV9uZmRfYWRkcrIai/+yGkyyGrIashglshAisgGziYoBASIrZUSL/1cACIv/IltLAhJEIicEZUQjEkSL/1cICIv/gQhbIxNEsSIpZUQnGLIaTwKyGkyyGkmyGCWyECKyAbO0PklXBABMVwAEKhJEF4v/gRBbTEsBEkQxAExyCEQSRLFMFicZshqyGrIYJbIQIrIBs7Q+SVcEAExXAAQqEkSJigABsSIpZUQiK2VEFoAEL6IsS7IashqyGCWyECKyAbO0PkcCVwAEKhJEMQBMVwQgEkAACzEAiwBXJCASQQADI0yJIkL/+ooAACJHBCcHZURJFkwyBiInCWVETwIID0EAniEHIojxNYsESYACAW2jjAEiJwZlREyiSYwDgACpQQBWIicLZUQWgAInEKOLA0lOAqKLAYsEoqOMAoABCowAgAVF2WS4AKVBAAWAAVqMACInEGVEJxKLAElOA6GjJxKiiwJPAqMnEqKgSRWBEA5EgRCvqycQTGcnByEFZyInBWVEIQULFoEQr6snBkxnJwsiZzIGSSInB2VEGAknCUxniQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{"NFD_REGISTRY_APP_ID":{"type":"AVMUint64"},"FEE_SINK_ADDR":{"type":"address"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type StakedInfo = {
  account: string,
  balance: bigint,
  totalRewarded: bigint,
  rewardTokenBalance: bigint,
  entryRound: bigint
}


/**
 * Converts the ABI tuple representation of a StakedInfo to the struct representation
 */
export function StakedInfoFromTuple(abiTuple: [string, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.StakedInfo, APP_SPEC.structs) as StakedInfo
}

export type PoolTokenPayoutRatio = {
  poolPctOfWhole: [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint],
  updatedForPayout: bigint
}


/**
 * Converts the ABI tuple representation of a PoolTokenPayoutRatio to the struct representation
 */
export function PoolTokenPayoutRatioFromTuple(abiTuple: [[bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint], bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PoolTokenPayoutRatio, APP_SPEC.structs) as PoolTokenPayoutRatio
}

export type ValidatorPoolKey = {
  id: bigint,
  poolId: bigint,
  poolAppId: bigint
}


/**
 * Converts the ABI tuple representation of a ValidatorPoolKey to the struct representation
 */
export function ValidatorPoolKeyFromTuple(abiTuple: [bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ValidatorPoolKey, APP_SPEC.structs) as ValidatorPoolKey
}

/**
 * Deploy-time template variables
 */
export type TemplateVariables = {
  NFD_REGISTRY_APP_ID: bigint,
  FEE_SINK_ADDR: string,
}

/**
 * The argument types for the StakingPool contract
 */
export type StakingPoolArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'updateApplication()void': Record<string, never>
    'createApplication(uint64,uint64,uint64,uint64)void': {
      /**
       * - id of contract that constructed us - the validator application (single global instance)
       */
      creatingContractId: bigint | number
      /**
       * - id of validator we're a staking pool of
       */
      validatorId: bigint | number
      /**
       * - which pool id are we
       */
      poolId: bigint | number
      /**
       * - minimum amount to be in pool, but also minimum amount balance can't go below (without removing all!)
       */
      minEntryStake: bigint | number
    }
    'gas()void': Record<string, never>
    'initStorage(pay)void': {
      /**
       * payment from caller which covers mbr increase of new staking pools' storage
       */
      mbrPayment: AppMethodCallTransactionArgument
    }
    'addStake(pay,address)uint64': {
      /**
       * prior payment coming from validator contract to us on behalf of staker.
       */
      stakedAmountPayment: AppMethodCallTransactionArgument
      /**
       * - The account adding new stake
       */
      staker: string
    }
    'removeStake(address,uint64)void': {
      /**
      * - account to remove.  normally same as sender, but the validator owner or manager can also call
      this to remove the specified staker explicitly. The removed stake MUST only go to the staker of course.  This is
      so a validator can shut down a poool and refund the stakers.  It can also be used to kick out stakers who no longer
      meet the gating requirements (determined by the node daemon).

       */
      staker: string
      /**
       * - The amount of stake to be removed.  Specify 0 to remove all stake.
       */
      amountToUnstake: bigint | number
    }
    'claimTokens()void': Record<string, never>
    'getStakerInfo(address)(address,uint64,uint64,uint64,uint64)': {
      /**
       * - The address of the staker.
       */
      staker: string
    }
    'payTokenReward(address,uint64,uint64)void': {
      /**
       * - the staker account to send rewards to
       */
      staker: string
      /**
       * - id of reward token (to avoid re-entrancy in calling validator back to get id)
       */
      rewardToken: bigint | number
      /**
       * - amount to send the staker (there is significant trust here(!) - also why only validator can call us
       */
      amountToSend: bigint | number
    }
    'updateAlgodVer(string)void': {
      /**
       * - string representing the algorand node daemon version (reti node daemon composes its own meta version)
       */
      algodVer: string
    }
    'epochBalanceUpdate()void': Record<string, never>
    'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void': {
      /**
       * - payment to cover extra fee of going online if offline - or 0 if not renewal
       */
      feePayment: AppMethodCallTransactionArgument
      /**
       * - The vote public key.
       */
      votePk: Uint8Array
      /**
       * - The selection public key.
       */
      selectionPk: Uint8Array
      /**
       * - The state proof public key.
       */
      stateProofPk: Uint8Array
      /**
       * - The first vote index.
       */
      voteFirst: bigint | number
      /**
       * - The last vote index.
       */
      voteLast: bigint | number
      /**
       * - The vote key dilution value.
       */
      voteKeyDilution: bigint | number
    }
    'goOffline()void': Record<string, never>
    'linkToNFD(uint64,string)void': {
      nfdAppId: bigint | number
      nfdName: string
    }
    'proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)': {
      /**
       * - ValidatorPoolKey tuple
       */
      poolKey: ValidatorPoolKey
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'updateApplication()void': []
    'createApplication(uint64,uint64,uint64,uint64)void': [creatingContractId: bigint | number, validatorId: bigint | number, poolId: bigint | number, minEntryStake: bigint | number]
    'gas()void': []
    'initStorage(pay)void': [mbrPayment: AppMethodCallTransactionArgument]
    'addStake(pay,address)uint64': [stakedAmountPayment: AppMethodCallTransactionArgument, staker: string]
    'removeStake(address,uint64)void': [staker: string, amountToUnstake: bigint | number]
    'claimTokens()void': []
    'getStakerInfo(address)(address,uint64,uint64,uint64,uint64)': [staker: string]
    'payTokenReward(address,uint64,uint64)void': [staker: string, rewardToken: bigint | number, amountToSend: bigint | number]
    'updateAlgodVer(string)void': [algodVer: string]
    'epochBalanceUpdate()void': []
    'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void': [feePayment: AppMethodCallTransactionArgument, votePk: Uint8Array, selectionPk: Uint8Array, stateProofPk: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number]
    'goOffline()void': []
    'linkToNFD(uint64,string)void': [nfdAppId: bigint | number, nfdName: string]
    'proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)': [poolKey: ValidatorPoolKey]
  }
}

/**
 * The return type for each method
 */
export type StakingPoolReturns = {
  'updateApplication()void': void
  'createApplication(uint64,uint64,uint64,uint64)void': void
  'gas()void': void
  'initStorage(pay)void': void
  'addStake(pay,address)uint64': bigint
  'removeStake(address,uint64)void': void
  'claimTokens()void': void
  'getStakerInfo(address)(address,uint64,uint64,uint64,uint64)': StakedInfo
  'payTokenReward(address,uint64,uint64)void': void
  'updateAlgodVer(string)void': void
  'epochBalanceUpdate()void': void
  'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void': void
  'goOffline()void': void
  'linkToNFD(uint64,string)void': void
  'proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)': PoolTokenPayoutRatio
}

/**
 * Defines the types of available calls and state of the StakingPool smart contract.
 */
export type StakingPoolTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: StakingPoolArgs['obj']['updateApplication()void']
      argsTuple: StakingPoolArgs['tuple']['updateApplication()void']
      returns: StakingPoolReturns['updateApplication()void']
    }>
    & Record<'createApplication(uint64,uint64,uint64,uint64)void' | 'createApplication', {
      argsObj: StakingPoolArgs['obj']['createApplication(uint64,uint64,uint64,uint64)void']
      argsTuple: StakingPoolArgs['tuple']['createApplication(uint64,uint64,uint64,uint64)void']
      returns: StakingPoolReturns['createApplication(uint64,uint64,uint64,uint64)void']
    }>
    & Record<'gas()void' | 'gas', {
      argsObj: StakingPoolArgs['obj']['gas()void']
      argsTuple: StakingPoolArgs['tuple']['gas()void']
      returns: StakingPoolReturns['gas()void']
    }>
    & Record<'initStorage(pay)void' | 'initStorage', {
      argsObj: StakingPoolArgs['obj']['initStorage(pay)void']
      argsTuple: StakingPoolArgs['tuple']['initStorage(pay)void']
      returns: StakingPoolReturns['initStorage(pay)void']
    }>
    & Record<'addStake(pay,address)uint64' | 'addStake', {
      argsObj: StakingPoolArgs['obj']['addStake(pay,address)uint64']
      argsTuple: StakingPoolArgs['tuple']['addStake(pay,address)uint64']
      /**
       * new 'entry round' round number of stake add
       */
      returns: StakingPoolReturns['addStake(pay,address)uint64']
    }>
    & Record<'removeStake(address,uint64)void' | 'removeStake', {
      argsObj: StakingPoolArgs['obj']['removeStake(address,uint64)void']
      argsTuple: StakingPoolArgs['tuple']['removeStake(address,uint64)void']
      returns: StakingPoolReturns['removeStake(address,uint64)void']
    }>
    & Record<'claimTokens()void' | 'claimTokens', {
      argsObj: StakingPoolArgs['obj']['claimTokens()void']
      argsTuple: StakingPoolArgs['tuple']['claimTokens()void']
      returns: StakingPoolReturns['claimTokens()void']
    }>
    & Record<'getStakerInfo(address)(address,uint64,uint64,uint64,uint64)' | 'getStakerInfo', {
      argsObj: StakingPoolArgs['obj']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)']
      argsTuple: StakingPoolArgs['tuple']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)']
      /**
       * - The staked information for the given staker.
       */
      returns: StakingPoolReturns['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)']
    }>
    & Record<'payTokenReward(address,uint64,uint64)void' | 'payTokenReward', {
      argsObj: StakingPoolArgs['obj']['payTokenReward(address,uint64,uint64)void']
      argsTuple: StakingPoolArgs['tuple']['payTokenReward(address,uint64,uint64)void']
      returns: StakingPoolReturns['payTokenReward(address,uint64,uint64)void']
    }>
    & Record<'updateAlgodVer(string)void' | 'updateAlgodVer', {
      argsObj: StakingPoolArgs['obj']['updateAlgodVer(string)void']
      argsTuple: StakingPoolArgs['tuple']['updateAlgodVer(string)void']
      returns: StakingPoolReturns['updateAlgodVer(string)void']
    }>
    & Record<'epochBalanceUpdate()void' | 'epochBalanceUpdate', {
      argsObj: StakingPoolArgs['obj']['epochBalanceUpdate()void']
      argsTuple: StakingPoolArgs['tuple']['epochBalanceUpdate()void']
      returns: StakingPoolReturns['epochBalanceUpdate()void']
    }>
    & Record<'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' | 'goOnline', {
      argsObj: StakingPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']
      argsTuple: StakingPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']
      returns: StakingPoolReturns['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']
    }>
    & Record<'goOffline()void' | 'goOffline', {
      argsObj: StakingPoolArgs['obj']['goOffline()void']
      argsTuple: StakingPoolArgs['tuple']['goOffline()void']
      returns: StakingPoolReturns['goOffline()void']
    }>
    & Record<'linkToNFD(uint64,string)void' | 'linkToNFD', {
      argsObj: StakingPoolArgs['obj']['linkToNFD(uint64,string)void']
      argsTuple: StakingPoolArgs['tuple']['linkToNFD(uint64,string)void']
      returns: StakingPoolReturns['linkToNFD(uint64,string)void']
    }>
    & Record<'proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)' | 'proxiedSetTokenPayoutRatio', {
      argsObj: StakingPoolArgs['obj']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)']
      argsTuple: StakingPoolArgs['tuple']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)']
      returns: StakingPoolReturns['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        creatingValidatorContractAppId: bigint
        validatorId: bigint
        poolId: bigint
        numStakers: bigint
        totalAlgoStaked: bigint
        minEntryStake: bigint
        lastPayout: bigint
        epochNumber: bigint
        algodVer: BinaryState
        roundsPerDay: bigint
        binRoundStart: bigint
        stakeAccumulator: bigint
        rewardAccumulator: bigint
        weightedMovingAverage: bigint
      }
      maps: {}
    }
    box: {
      keys: {
        stakers: [[string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint]]
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type StakingPoolSignatures = keyof StakingPoolTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type StakingPoolNonVoidMethodSignatures = keyof StakingPoolTypes['methods'] extends infer T ? T extends keyof StakingPoolTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the StakingPool smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends StakingPoolSignatures> = StakingPoolTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the StakingPool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StakingPoolSignatures> = StakingPoolTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = StakingPoolTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = StakingPoolTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type StakingPoolCreateCallParams =
  | Expand<CallParams<StakingPoolArgs['obj']['createApplication(uint64,uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['createApplication(uint64,uint64,uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<StakingPoolArgs['obj']['createApplication(uint64,uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['createApplication(uint64,uint64,uint64,uint64)void']> & {method: 'createApplication(uint64,uint64,uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type StakingPoolUpdateCallParams =
  | Expand<CallParams<StakingPoolArgs['obj']['updateApplication()void'] | StakingPoolArgs['tuple']['updateApplication()void']> & {method: 'updateApplication'}>
  | Expand<CallParams<StakingPoolArgs['obj']['updateApplication()void'] | StakingPoolArgs['tuple']['updateApplication()void']> & {method: 'updateApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type StakingPoolDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: StakingPoolCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: StakingPoolUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the StakingPool smart contract
 */
export abstract class StakingPoolParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends StakingPoolCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64,uint64,uint64,uint64)void':
            return StakingPoolParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the StakingPool smart contract using the createApplication(uint64,uint64,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<StakingPoolArgs['obj']['createApplication(uint64,uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['createApplication(uint64,uint64,uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64,uint64,uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.creatingContractId, params.args.validatorId, params.args.poolId, params.args.minEntryStake],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends StakingPoolUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication()void':
            return StakingPoolParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the StakingPool smart contract using the updateApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<StakingPoolArgs['obj']['updateApplication()void'] | StakingPoolArgs['tuple']['updateApplication()void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the gas()void ABI method
   *
   * gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static gas(params: CallParams<StakingPoolArgs['obj']['gas()void'] | StakingPoolArgs['tuple']['gas()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'gas()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the initStorage(pay)void ABI method
   *
  * Called after we're created and then funded, so we can create our large stakers ledger storage
  Caller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost
  If this is pool 1 AND the validator has specified a reward token, opt-in to that token
  so that the validator can seed the pool with future rewards of that token.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initStorage(params: CallParams<StakingPoolArgs['obj']['initStorage(pay)void'] | StakingPoolArgs['tuple']['initStorage(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initStorage(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPayment],
    }
  }
  /**
   * Constructs a no op call for the addStake(pay,address)uint64 ABI method
   *
  * Adds stake to the given account.
  Can ONLY be called by the validator contract that created us
  Must receive payment from the validator contract for amount being staked.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addStake(params: CallParams<StakingPoolArgs['obj']['addStake(pay,address)uint64'] | StakingPoolArgs['tuple']['addStake(pay,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addStake(pay,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.stakedAmountPayment, params.args.staker],
    }
  }
  /**
   * Constructs a no op call for the removeStake(address,uint64)void ABI method
   *
  * Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in
  full. Also notifies the validator contract for this pools validator of the staker / balance changes.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeStake(params: CallParams<StakingPoolArgs['obj']['removeStake(address,uint64)void'] | StakingPoolArgs['tuple']['removeStake(address,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeStake(address,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.staker, params.args.amountToUnstake],
    }
  }
  /**
   * Constructs a no op call for the claimTokens()void ABI method
   *
  * Claims all the available reward tokens a staker has available, sending their entire balance to the staker from
  pool 1 (either directly, or via validator->pool1 to pay it out)
  Also notifies the validator contract for this pools validator of the staker / balance changes.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimTokens(params: CallParams<StakingPoolArgs['obj']['claimTokens()void'] | StakingPoolArgs['tuple']['claimTokens()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimTokens()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getStakerInfo(address)(address,uint64,uint64,uint64,uint64) ABI method
   *
   * Retrieves the staked information for a given staker.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getStakerInfo(params: CallParams<StakingPoolArgs['obj']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getStakerInfo(address)(address,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.staker],
    }
  }
  /**
   * Constructs a no op call for the payTokenReward(address,uint64,uint64)void ABI method
   *
  * [Internal protocol method] Remove a specified amount of 'community token' rewards for a staker.
  This can ONLY be called by our validator and only if we're pool 1 - with the token.
  Note: this can also be called by validator as part of OWNER wanting to send the reward tokens
  somewhere else (ie if they're sunsetting their validator and need the reward tokens back).
  It's up to the validator to ensure that the balance in rewardTokenHeldBack is honored.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static payTokenReward(params: CallParams<StakingPoolArgs['obj']['payTokenReward(address,uint64,uint64)void'] | StakingPoolArgs['tuple']['payTokenReward(address,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'payTokenReward(address,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.staker, params.args.rewardToken, params.args.amountToSend],
    }
  }
  /**
   * Constructs a no op call for the updateAlgodVer(string)void ABI method
   *
  * Update the (honor system) algod version for the node associated to this pool.  The node management daemon
  should compare its current nodes version to the version stored in global state, updating when different.
  The reti node daemon composes its own version string using format:
  {major}.{minor}.{build} {branch} [{commit hash}],
  ie: 3.22.0 rel/stable [6b508975]
  [ ONLY OWNER OR MANAGER CAN CALL ]

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAlgodVer(params: CallParams<StakingPoolArgs['obj']['updateAlgodVer(string)void'] | StakingPoolArgs['tuple']['updateAlgodVer(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAlgodVer(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.algodVer],
    }
  }
  /**
   * Constructs a no op call for the epochBalanceUpdate()void ABI method
   *
  * Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)
  stakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance
  compounds over time and staker can remove that amount at will.
  The validator is paid their percentage each epoch payout.
  
  Note: ANYONE can call this.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static epochBalanceUpdate(params: CallParams<StakingPoolArgs['obj']['epochBalanceUpdate()void'] | StakingPoolArgs['tuple']['epochBalanceUpdate()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'epochBalanceUpdate()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method
   *
  * Registers a staking pool key online against a participation key.
  [ ONLY OWNER OR MANAGER CAN CALL ]

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static goOnline(params: CallParams<StakingPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.feePayment, params.args.votePk, params.args.selectionPk, params.args.stateProofPk, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution],
    }
  }
  /**
   * Constructs a no op call for the goOffline()void ABI method
   *
  * Marks a staking pool key OFFLINE.
  [ ONLY OWNER OR MANAGER CAN CALL ]

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static goOffline(params: CallParams<StakingPoolArgs['obj']['goOffline()void'] | StakingPoolArgs['tuple']['goOffline()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'goOffline()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the linkToNFD(uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static linkToNfd(params: CallParams<StakingPoolArgs['obj']['linkToNFD(uint64,string)void'] | StakingPoolArgs['tuple']['linkToNFD(uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'linkToNFD(uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.nfdAppId, params.args.nfdName],
    }
  }
  /**
   * Constructs a no op call for the proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64) ABI method
   *
  * proxiedSetTokenPayoutRatio is meant to be called by pools != 1 - calling US, pool #1
  We need to verify that we are in fact being called by another of OUR pools (not us)
  and then we'll call the validator on their behalf to update the token payouts

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static proxiedSetTokenPayoutRatio(params: CallParams<StakingPoolArgs['obj']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)'] | StakingPoolArgs['tuple']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolKey],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the StakingPool smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class StakingPoolFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `StakingPoolFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new StakingPoolClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new StakingPoolClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the StakingPool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: StakingPoolDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? StakingPoolParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (StakingPoolCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? StakingPoolParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (StakingPoolUpdateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new StakingPoolClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StakingPool smart contract using the createApplication(uint64,uint64,uint64,uint64)void ABI method.
       *
       * Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<StakingPoolArgs['obj']['createApplication(uint64,uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['createApplication(uint64,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(StakingPoolParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the StakingPool smart contract using the updateApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<StakingPoolArgs['obj']['updateApplication()void'] | StakingPoolArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appFactory.params.deployUpdate(StakingPoolParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StakingPool smart contract using the createApplication(uint64,uint64,uint64,uint64)void ABI method.
       *
       * Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<StakingPoolArgs['obj']['createApplication(uint64,uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['createApplication(uint64,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(StakingPoolParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StakingPool smart contract using an ABI method call using the createApplication(uint64,uint64,uint64,uint64)void ABI method.
       *
       * Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<StakingPoolArgs['obj']['createApplication(uint64,uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['createApplication(uint64,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(StakingPoolParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | StakingPoolReturns['createApplication(uint64,uint64,uint64,uint64)void']) }, appClient: new StakingPoolClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the StakingPool smart contract
 */
export class StakingPoolClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `StakingPoolClient`
   *
   * @param appClient An `AppClient` instance which has been created with the StakingPool app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `StakingPoolClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends StakingPoolNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `StakingPoolClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<StakingPoolClient> {
    return new StakingPoolClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `StakingPoolClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<StakingPoolClient> {
    return new StakingPoolClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the StakingPool smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<StakingPoolArgs['obj']['updateApplication()void'] | StakingPoolArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.params.update(StakingPoolParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the StakingPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the StakingPool smart contract using the `gas()void` ABI method.
     *
     * gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    gas: (params: CallParams<StakingPoolArgs['obj']['gas()void'] | StakingPoolArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.gas(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `initStorage(pay)void` ABI method.
     *
    * Called after we're created and then funded, so we can create our large stakers ledger storage
    Caller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost
    If this is pool 1 AND the validator has specified a reward token, opt-in to that token
    so that the validator can seed the pool with future rewards of that token.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initStorage: (params: CallParams<StakingPoolArgs['obj']['initStorage(pay)void'] | StakingPoolArgs['tuple']['initStorage(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.initStorage(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `addStake(pay,address)uint64` ABI method.
     *
    * Adds stake to the given account.
    Can ONLY be called by the validator contract that created us
    Must receive payment from the validator contract for amount being staked.

     *
     * @param params The params for the smart contract call
     * @returns The call params: new 'entry round' round number of stake add
     */
    addStake: (params: CallParams<StakingPoolArgs['obj']['addStake(pay,address)uint64'] | StakingPoolArgs['tuple']['addStake(pay,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.addStake(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `removeStake(address,uint64)void` ABI method.
     *
    * Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in
    full. Also notifies the validator contract for this pools validator of the staker / balance changes.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeStake: (params: CallParams<StakingPoolArgs['obj']['removeStake(address,uint64)void'] | StakingPoolArgs['tuple']['removeStake(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.removeStake(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `claimTokens()void` ABI method.
     *
    * Claims all the available reward tokens a staker has available, sending their entire balance to the staker from
    pool 1 (either directly, or via validator->pool1 to pay it out)
    Also notifies the validator contract for this pools validator of the staker / balance changes.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimTokens: (params: CallParams<StakingPoolArgs['obj']['claimTokens()void'] | StakingPoolArgs['tuple']['claimTokens()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.claimTokens(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `getStakerInfo(address)(address,uint64,uint64,uint64,uint64)` ABI method.
     *
     * Retrieves the staked information for a given staker.
     *
     * @param params The params for the smart contract call
     * @returns The call params: - The staked information for the given staker.
     */
    getStakerInfo: (params: CallParams<StakingPoolArgs['obj']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.getStakerInfo(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `payTokenReward(address,uint64,uint64)void` ABI method.
     *
    * [Internal protocol method] Remove a specified amount of 'community token' rewards for a staker.
    This can ONLY be called by our validator and only if we're pool 1 - with the token.
    Note: this can also be called by validator as part of OWNER wanting to send the reward tokens
    somewhere else (ie if they're sunsetting their validator and need the reward tokens back).
    It's up to the validator to ensure that the balance in rewardTokenHeldBack is honored.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    payTokenReward: (params: CallParams<StakingPoolArgs['obj']['payTokenReward(address,uint64,uint64)void'] | StakingPoolArgs['tuple']['payTokenReward(address,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.payTokenReward(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `updateAlgodVer(string)void` ABI method.
     *
    * Update the (honor system) algod version for the node associated to this pool.  The node management daemon
    should compare its current nodes version to the version stored in global state, updating when different.
    The reti node daemon composes its own version string using format:
    {major}.{minor}.{build} {branch} [{commit hash}],
    ie: 3.22.0 rel/stable [6b508975]
    [ ONLY OWNER OR MANAGER CAN CALL ]

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAlgodVer: (params: CallParams<StakingPoolArgs['obj']['updateAlgodVer(string)void'] | StakingPoolArgs['tuple']['updateAlgodVer(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.updateAlgodVer(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `epochBalanceUpdate()void` ABI method.
     *
    * Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)
    stakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance
    compounds over time and staker can remove that amount at will.
    The validator is paid their percentage each epoch payout.
    
    Note: ANYONE can call this.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    epochBalanceUpdate: (params: CallParams<StakingPoolArgs['obj']['epochBalanceUpdate()void'] | StakingPoolArgs['tuple']['epochBalanceUpdate()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.epochBalanceUpdate(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * Registers a staking pool key online against a participation key.
    [ ONLY OWNER OR MANAGER CAN CALL ]

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    goOnline: (params: CallParams<StakingPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.goOnline(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `goOffline()void` ABI method.
     *
    * Marks a staking pool key OFFLINE.
    [ ONLY OWNER OR MANAGER CAN CALL ]

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    goOffline: (params: CallParams<StakingPoolArgs['obj']['goOffline()void'] | StakingPoolArgs['tuple']['goOffline()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.goOffline(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `linkToNFD(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    linkToNfd: (params: CallParams<StakingPoolArgs['obj']['linkToNFD(uint64,string)void'] | StakingPoolArgs['tuple']['linkToNFD(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.linkToNfd(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)` ABI method.
     *
    * proxiedSetTokenPayoutRatio is meant to be called by pools != 1 - calling US, pool #1
    We need to verify that we are in fact being called by another of OUR pools (not us)
    and then we'll call the validator on their behalf to update the token payouts

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    proxiedSetTokenPayoutRatio: (params: CallParams<StakingPoolArgs['obj']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)'] | StakingPoolArgs['tuple']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.proxiedSetTokenPayoutRatio(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the StakingPool smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<StakingPoolArgs['obj']['updateApplication()void'] | StakingPoolArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.createTransaction.update(StakingPoolParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the StakingPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the StakingPool smart contract using the `gas()void` ABI method.
     *
     * gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    gas: (params: CallParams<StakingPoolArgs['obj']['gas()void'] | StakingPoolArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.gas(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `initStorage(pay)void` ABI method.
     *
    * Called after we're created and then funded, so we can create our large stakers ledger storage
    Caller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost
    If this is pool 1 AND the validator has specified a reward token, opt-in to that token
    so that the validator can seed the pool with future rewards of that token.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initStorage: (params: CallParams<StakingPoolArgs['obj']['initStorage(pay)void'] | StakingPoolArgs['tuple']['initStorage(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.initStorage(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `addStake(pay,address)uint64` ABI method.
     *
    * Adds stake to the given account.
    Can ONLY be called by the validator contract that created us
    Must receive payment from the validator contract for amount being staked.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction: new 'entry round' round number of stake add
     */
    addStake: (params: CallParams<StakingPoolArgs['obj']['addStake(pay,address)uint64'] | StakingPoolArgs['tuple']['addStake(pay,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.addStake(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `removeStake(address,uint64)void` ABI method.
     *
    * Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in
    full. Also notifies the validator contract for this pools validator of the staker / balance changes.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeStake: (params: CallParams<StakingPoolArgs['obj']['removeStake(address,uint64)void'] | StakingPoolArgs['tuple']['removeStake(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.removeStake(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `claimTokens()void` ABI method.
     *
    * Claims all the available reward tokens a staker has available, sending their entire balance to the staker from
    pool 1 (either directly, or via validator->pool1 to pay it out)
    Also notifies the validator contract for this pools validator of the staker / balance changes.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimTokens: (params: CallParams<StakingPoolArgs['obj']['claimTokens()void'] | StakingPoolArgs['tuple']['claimTokens()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.claimTokens(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `getStakerInfo(address)(address,uint64,uint64,uint64,uint64)` ABI method.
     *
     * Retrieves the staked information for a given staker.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: - The staked information for the given staker.
     */
    getStakerInfo: (params: CallParams<StakingPoolArgs['obj']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.getStakerInfo(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `payTokenReward(address,uint64,uint64)void` ABI method.
     *
    * [Internal protocol method] Remove a specified amount of 'community token' rewards for a staker.
    This can ONLY be called by our validator and only if we're pool 1 - with the token.
    Note: this can also be called by validator as part of OWNER wanting to send the reward tokens
    somewhere else (ie if they're sunsetting their validator and need the reward tokens back).
    It's up to the validator to ensure that the balance in rewardTokenHeldBack is honored.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    payTokenReward: (params: CallParams<StakingPoolArgs['obj']['payTokenReward(address,uint64,uint64)void'] | StakingPoolArgs['tuple']['payTokenReward(address,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.payTokenReward(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `updateAlgodVer(string)void` ABI method.
     *
    * Update the (honor system) algod version for the node associated to this pool.  The node management daemon
    should compare its current nodes version to the version stored in global state, updating when different.
    The reti node daemon composes its own version string using format:
    {major}.{minor}.{build} {branch} [{commit hash}],
    ie: 3.22.0 rel/stable [6b508975]
    [ ONLY OWNER OR MANAGER CAN CALL ]

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAlgodVer: (params: CallParams<StakingPoolArgs['obj']['updateAlgodVer(string)void'] | StakingPoolArgs['tuple']['updateAlgodVer(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.updateAlgodVer(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `epochBalanceUpdate()void` ABI method.
     *
    * Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)
    stakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance
    compounds over time and staker can remove that amount at will.
    The validator is paid their percentage each epoch payout.
    
    Note: ANYONE can call this.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    epochBalanceUpdate: (params: CallParams<StakingPoolArgs['obj']['epochBalanceUpdate()void'] | StakingPoolArgs['tuple']['epochBalanceUpdate()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.epochBalanceUpdate(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * Registers a staking pool key online against a participation key.
    [ ONLY OWNER OR MANAGER CAN CALL ]

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    goOnline: (params: CallParams<StakingPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.goOnline(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `goOffline()void` ABI method.
     *
    * Marks a staking pool key OFFLINE.
    [ ONLY OWNER OR MANAGER CAN CALL ]

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    goOffline: (params: CallParams<StakingPoolArgs['obj']['goOffline()void'] | StakingPoolArgs['tuple']['goOffline()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.goOffline(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `linkToNFD(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    linkToNfd: (params: CallParams<StakingPoolArgs['obj']['linkToNFD(uint64,string)void'] | StakingPoolArgs['tuple']['linkToNFD(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.linkToNfd(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)` ABI method.
     *
    * proxiedSetTokenPayoutRatio is meant to be called by pools != 1 - calling US, pool #1
    We need to verify that we are in fact being called by another of OUR pools (not us)
    and then we'll call the validator on their behalf to update the token payouts

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    proxiedSetTokenPayoutRatio: (params: CallParams<StakingPoolArgs['obj']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)'] | StakingPoolArgs['tuple']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.proxiedSetTokenPayoutRatio(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the StakingPool smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<StakingPoolArgs['obj']['updateApplication()void'] | StakingPoolArgs['tuple']['updateApplication()void']> & AppClientCompilationParams & SendParams = {args: []}) => {
        const result = await this.appClient.send.update(StakingPoolParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['updateApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the StakingPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the StakingPool smart contract using the `gas()void` ABI method.
     *
     * gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    gas: async (params: CallParams<StakingPoolArgs['obj']['gas()void'] | StakingPoolArgs['tuple']['gas()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.gas(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['gas()void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `initStorage(pay)void` ABI method.
     *
    * Called after we're created and then funded, so we can create our large stakers ledger storage
    Caller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost
    If this is pool 1 AND the validator has specified a reward token, opt-in to that token
    so that the validator can seed the pool with future rewards of that token.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initStorage: async (params: CallParams<StakingPoolArgs['obj']['initStorage(pay)void'] | StakingPoolArgs['tuple']['initStorage(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.initStorage(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['initStorage(pay)void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `addStake(pay,address)uint64` ABI method.
     *
    * Adds stake to the given account.
    Can ONLY be called by the validator contract that created us
    Must receive payment from the validator contract for amount being staked.

     *
     * @param params The params for the smart contract call
     * @returns The call result: new 'entry round' round number of stake add
     */
    addStake: async (params: CallParams<StakingPoolArgs['obj']['addStake(pay,address)uint64'] | StakingPoolArgs['tuple']['addStake(pay,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.addStake(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['addStake(pay,address)uint64'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `removeStake(address,uint64)void` ABI method.
     *
    * Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in
    full. Also notifies the validator contract for this pools validator of the staker / balance changes.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeStake: async (params: CallParams<StakingPoolArgs['obj']['removeStake(address,uint64)void'] | StakingPoolArgs['tuple']['removeStake(address,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.removeStake(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['removeStake(address,uint64)void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `claimTokens()void` ABI method.
     *
    * Claims all the available reward tokens a staker has available, sending their entire balance to the staker from
    pool 1 (either directly, or via validator->pool1 to pay it out)
    Also notifies the validator contract for this pools validator of the staker / balance changes.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimTokens: async (params: CallParams<StakingPoolArgs['obj']['claimTokens()void'] | StakingPoolArgs['tuple']['claimTokens()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.claimTokens(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['claimTokens()void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `getStakerInfo(address)(address,uint64,uint64,uint64,uint64)` ABI method.
     *
     * Retrieves the staked information for a given staker.
     *
     * @param params The params for the smart contract call
     * @returns The call result: - The staked information for the given staker.
     */
    getStakerInfo: async (params: CallParams<StakingPoolArgs['obj']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.getStakerInfo(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `payTokenReward(address,uint64,uint64)void` ABI method.
     *
    * [Internal protocol method] Remove a specified amount of 'community token' rewards for a staker.
    This can ONLY be called by our validator and only if we're pool 1 - with the token.
    Note: this can also be called by validator as part of OWNER wanting to send the reward tokens
    somewhere else (ie if they're sunsetting their validator and need the reward tokens back).
    It's up to the validator to ensure that the balance in rewardTokenHeldBack is honored.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    payTokenReward: async (params: CallParams<StakingPoolArgs['obj']['payTokenReward(address,uint64,uint64)void'] | StakingPoolArgs['tuple']['payTokenReward(address,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.payTokenReward(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['payTokenReward(address,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `updateAlgodVer(string)void` ABI method.
     *
    * Update the (honor system) algod version for the node associated to this pool.  The node management daemon
    should compare its current nodes version to the version stored in global state, updating when different.
    The reti node daemon composes its own version string using format:
    {major}.{minor}.{build} {branch} [{commit hash}],
    ie: 3.22.0 rel/stable [6b508975]
    [ ONLY OWNER OR MANAGER CAN CALL ]

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAlgodVer: async (params: CallParams<StakingPoolArgs['obj']['updateAlgodVer(string)void'] | StakingPoolArgs['tuple']['updateAlgodVer(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.updateAlgodVer(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['updateAlgodVer(string)void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `epochBalanceUpdate()void` ABI method.
     *
    * Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)
    stakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance
    compounds over time and staker can remove that amount at will.
    The validator is paid their percentage each epoch payout.
    
    Note: ANYONE can call this.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    epochBalanceUpdate: async (params: CallParams<StakingPoolArgs['obj']['epochBalanceUpdate()void'] | StakingPoolArgs['tuple']['epochBalanceUpdate()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.epochBalanceUpdate(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['epochBalanceUpdate()void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void` ABI method.
     *
    * Registers a staking pool key online against a participation key.
    [ ONLY OWNER OR MANAGER CAN CALL ]

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    goOnline: async (params: CallParams<StakingPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.goOnline(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `goOffline()void` ABI method.
     *
    * Marks a staking pool key OFFLINE.
    [ ONLY OWNER OR MANAGER CAN CALL ]

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    goOffline: async (params: CallParams<StakingPoolArgs['obj']['goOffline()void'] | StakingPoolArgs['tuple']['goOffline()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.goOffline(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['goOffline()void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `linkToNFD(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    linkToNfd: async (params: CallParams<StakingPoolArgs['obj']['linkToNFD(uint64,string)void'] | StakingPoolArgs['tuple']['linkToNFD(uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.linkToNfd(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['linkToNFD(uint64,string)void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)` ABI method.
     *
    * proxiedSetTokenPayoutRatio is meant to be called by pools != 1 - calling US, pool #1
    We need to verify that we are in fact being called by another of OUR pools (not us)
    and then we'll call the validator on their behalf to update the token payouts

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    proxiedSetTokenPayoutRatio: async (params: CallParams<StakingPoolArgs['obj']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)'] | StakingPoolArgs['tuple']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.proxiedSetTokenPayoutRatio(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new StakingPoolClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current StakingPool app
   */
  state = {
    /**
     * Methods to access global state for the current StakingPool app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          creatingValidatorContractAppId: result.creatingValidatorContractAppId,
          validatorId: result.validatorId,
          poolId: result.poolId,
          numStakers: result.numStakers,
          totalAlgoStaked: result.totalAlgoStaked,
          minEntryStake: result.minEntryStake,
          lastPayout: result.lastPayout,
          epochNumber: result.epochNumber,
          algodVer: new BinaryStateValue(result.algodVer),
          roundsPerDay: result.roundsPerDay,
          binRoundStart: result.binRoundStart,
          stakeAccumulator: result.stakeAccumulator,
          rewardAccumulator: result.rewardAccumulator,
          weightedMovingAverage: result.weightedMovingAverage,
        }
      },
      /**
       * Get the current value of the creatingValidatorContractAppId key in global state
       */
      creatingValidatorContractAppId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("creatingValidatorContractAppId")) as bigint | undefined },
      /**
       * Get the current value of the validatorId key in global state
       */
      validatorId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("validatorId")) as bigint | undefined },
      /**
       * Get the current value of the poolId key in global state
       */
      poolId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("poolId")) as bigint | undefined },
      /**
       * Get the current value of the numStakers key in global state
       */
      numStakers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("numStakers")) as bigint | undefined },
      /**
       * Get the current value of the totalAlgoStaked key in global state
       */
      totalAlgoStaked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalAlgoStaked")) as bigint | undefined },
      /**
       * Get the current value of the minEntryStake key in global state
       */
      minEntryStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minEntryStake")) as bigint | undefined },
      /**
       * Get the current value of the lastPayout key in global state
       */
      lastPayout: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastPayout")) as bigint | undefined },
      /**
       * Get the current value of the epochNumber key in global state
       */
      epochNumber: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("epochNumber")) as bigint | undefined },
      /**
       * Get the current value of the algodVer key in global state
       */
      algodVer: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("algodVer")) as Uint8Array | undefined) },
      /**
       * Get the current value of the roundsPerDay key in global state
       */
      roundsPerDay: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("roundsPerDay")) as bigint | undefined },
      /**
       * Get the current value of the binRoundStart key in global state
       */
      binRoundStart: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("binRoundStart")) as bigint | undefined },
      /**
       * Get the current value of the stakeAccumulator key in global state
       */
      stakeAccumulator: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("stakeAccumulator")) as bigint | undefined },
      /**
       * Get the current value of the rewardAccumulator key in global state
       */
      rewardAccumulator: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rewardAccumulator")) as bigint | undefined },
      /**
       * Get the current value of the weightedMovingAverage key in global state
       */
      weightedMovingAverage: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("weightedMovingAverage")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current StakingPool app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          stakers: result.stakers,
        }
      },
      /**
       * Get the current value of the stakers key in box state
       */
      stakers: async (): Promise<[[string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint]] | undefined> => { return (await this.appClient.state.box.getValue("stakers")) as [[string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint], [string, bigint, bigint, bigint, bigint]] | undefined },
    },
  }

  public newGroup(): StakingPoolComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a gas()void method call against the StakingPool contract
       */
      gas(params: CallParams<StakingPoolArgs['obj']['gas()void'] | StakingPoolArgs['tuple']['gas()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.gas(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a initStorage(pay)void method call against the StakingPool contract
       */
      initStorage(params: CallParams<StakingPoolArgs['obj']['initStorage(pay)void'] | StakingPoolArgs['tuple']['initStorage(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initStorage(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addStake(pay,address)uint64 method call against the StakingPool contract
       */
      addStake(params: CallParams<StakingPoolArgs['obj']['addStake(pay,address)uint64'] | StakingPoolArgs['tuple']['addStake(pay,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addStake(params)))
        resultMappers.push((v) => client.decodeReturnValue('addStake(pay,address)uint64', v))
        return this
      },
      /**
       * Add a removeStake(address,uint64)void method call against the StakingPool contract
       */
      removeStake(params: CallParams<StakingPoolArgs['obj']['removeStake(address,uint64)void'] | StakingPoolArgs['tuple']['removeStake(address,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeStake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claimTokens()void method call against the StakingPool contract
       */
      claimTokens(params: CallParams<StakingPoolArgs['obj']['claimTokens()void'] | StakingPoolArgs['tuple']['claimTokens()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimTokens(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getStakerInfo(address)(address,uint64,uint64,uint64,uint64) method call against the StakingPool contract
       */
      getStakerInfo(params: CallParams<StakingPoolArgs['obj']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getStakerInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getStakerInfo(address)(address,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a payTokenReward(address,uint64,uint64)void method call against the StakingPool contract
       */
      payTokenReward(params: CallParams<StakingPoolArgs['obj']['payTokenReward(address,uint64,uint64)void'] | StakingPoolArgs['tuple']['payTokenReward(address,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.payTokenReward(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateAlgodVer(string)void method call against the StakingPool contract
       */
      updateAlgodVer(params: CallParams<StakingPoolArgs['obj']['updateAlgodVer(string)void'] | StakingPoolArgs['tuple']['updateAlgodVer(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAlgodVer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a epochBalanceUpdate()void method call against the StakingPool contract
       */
      epochBalanceUpdate(params: CallParams<StakingPoolArgs['obj']['epochBalanceUpdate()void'] | StakingPoolArgs['tuple']['epochBalanceUpdate()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.epochBalanceUpdate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void method call against the StakingPool contract
       */
      goOnline(params: CallParams<StakingPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.goOnline(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a goOffline()void method call against the StakingPool contract
       */
      goOffline(params: CallParams<StakingPoolArgs['obj']['goOffline()void'] | StakingPoolArgs['tuple']['goOffline()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.goOffline(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a linkToNFD(uint64,string)void method call against the StakingPool contract
       */
      linkToNfd(params: CallParams<StakingPoolArgs['obj']['linkToNFD(uint64,string)void'] | StakingPoolArgs['tuple']['linkToNFD(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.linkToNfd(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64) method call against the StakingPool contract
       */
      proxiedSetTokenPayoutRatio(params: CallParams<StakingPoolArgs['obj']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)'] | StakingPoolArgs['tuple']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.proxiedSetTokenPayoutRatio(params)))
        resultMappers.push((v) => client.decodeReturnValue('proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)', v))
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<StakingPoolArgs['obj']['updateApplication()void'] | StakingPoolArgs['tuple']['updateApplication()void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the StakingPool contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as StakingPoolComposer
  }
}
export type StakingPoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the gas()void ABI method.
   *
   * gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  gas(params?: CallParams<StakingPoolArgs['obj']['gas()void'] | StakingPoolArgs['tuple']['gas()void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['gas()void'] | undefined]>

  /**
   * Calls the initStorage(pay)void ABI method.
   *
  * Called after we're created and then funded, so we can create our large stakers ledger storage
  Caller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost
  If this is pool 1 AND the validator has specified a reward token, opt-in to that token
  so that the validator can seed the pool with future rewards of that token.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initStorage(params?: CallParams<StakingPoolArgs['obj']['initStorage(pay)void'] | StakingPoolArgs['tuple']['initStorage(pay)void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['initStorage(pay)void'] | undefined]>

  /**
   * Calls the addStake(pay,address)uint64 ABI method.
   *
  * Adds stake to the given account.
  Can ONLY be called by the validator contract that created us
  Must receive payment from the validator contract for amount being staked.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addStake(params?: CallParams<StakingPoolArgs['obj']['addStake(pay,address)uint64'] | StakingPoolArgs['tuple']['addStake(pay,address)uint64']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['addStake(pay,address)uint64'] | undefined]>

  /**
   * Calls the removeStake(address,uint64)void ABI method.
   *
  * Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in
  full. Also notifies the validator contract for this pools validator of the staker / balance changes.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeStake(params?: CallParams<StakingPoolArgs['obj']['removeStake(address,uint64)void'] | StakingPoolArgs['tuple']['removeStake(address,uint64)void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['removeStake(address,uint64)void'] | undefined]>

  /**
   * Calls the claimTokens()void ABI method.
   *
  * Claims all the available reward tokens a staker has available, sending their entire balance to the staker from
  pool 1 (either directly, or via validator->pool1 to pay it out)
  Also notifies the validator contract for this pools validator of the staker / balance changes.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimTokens(params?: CallParams<StakingPoolArgs['obj']['claimTokens()void'] | StakingPoolArgs['tuple']['claimTokens()void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['claimTokens()void'] | undefined]>

  /**
   * Calls the getStakerInfo(address)(address,uint64,uint64,uint64,uint64) ABI method.
   *
   * Retrieves the staked information for a given staker.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStakerInfo(params?: CallParams<StakingPoolArgs['obj']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['getStakerInfo(address)(address,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the payTokenReward(address,uint64,uint64)void ABI method.
   *
  * [Internal protocol method] Remove a specified amount of 'community token' rewards for a staker.
  This can ONLY be called by our validator and only if we're pool 1 - with the token.
  Note: this can also be called by validator as part of OWNER wanting to send the reward tokens
  somewhere else (ie if they're sunsetting their validator and need the reward tokens back).
  It's up to the validator to ensure that the balance in rewardTokenHeldBack is honored.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payTokenReward(params?: CallParams<StakingPoolArgs['obj']['payTokenReward(address,uint64,uint64)void'] | StakingPoolArgs['tuple']['payTokenReward(address,uint64,uint64)void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['payTokenReward(address,uint64,uint64)void'] | undefined]>

  /**
   * Calls the updateAlgodVer(string)void ABI method.
   *
  * Update the (honor system) algod version for the node associated to this pool.  The node management daemon
  should compare its current nodes version to the version stored in global state, updating when different.
  The reti node daemon composes its own version string using format:
  {major}.{minor}.{build} {branch} [{commit hash}],
  ie: 3.22.0 rel/stable [6b508975]
  [ ONLY OWNER OR MANAGER CAN CALL ]

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAlgodVer(params?: CallParams<StakingPoolArgs['obj']['updateAlgodVer(string)void'] | StakingPoolArgs['tuple']['updateAlgodVer(string)void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['updateAlgodVer(string)void'] | undefined]>

  /**
   * Calls the epochBalanceUpdate()void ABI method.
   *
  * Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)
  stakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance
  compounds over time and staker can remove that amount at will.
  The validator is paid their percentage each epoch payout.
  
  Note: ANYONE can call this.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  epochBalanceUpdate(params?: CallParams<StakingPoolArgs['obj']['epochBalanceUpdate()void'] | StakingPoolArgs['tuple']['epochBalanceUpdate()void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['epochBalanceUpdate()void'] | undefined]>

  /**
   * Calls the goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void ABI method.
   *
  * Registers a staking pool key online against a participation key.
  [ ONLY OWNER OR MANAGER CAN CALL ]

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOnline(params?: CallParams<StakingPoolArgs['obj']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the goOffline()void ABI method.
   *
  * Marks a staking pool key OFFLINE.
  [ ONLY OWNER OR MANAGER CAN CALL ]

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  goOffline(params?: CallParams<StakingPoolArgs['obj']['goOffline()void'] | StakingPoolArgs['tuple']['goOffline()void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['goOffline()void'] | undefined]>

  /**
   * Calls the linkToNFD(uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  linkToNfd(params?: CallParams<StakingPoolArgs['obj']['linkToNFD(uint64,string)void'] | StakingPoolArgs['tuple']['linkToNFD(uint64,string)void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['linkToNFD(uint64,string)void'] | undefined]>

  /**
   * Calls the proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64) ABI method.
   *
  * proxiedSetTokenPayoutRatio is meant to be called by pools != 1 - calling US, pool #1
  We need to verify that we are in fact being called by another of OUR pools (not us)
  and then we'll call the validator on their behalf to update the token payouts

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  proxiedSetTokenPayoutRatio(params?: CallParams<StakingPoolArgs['obj']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)'] | StakingPoolArgs['tuple']['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the StakingPool smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(params?: CallParams<StakingPoolArgs['obj']['updateApplication()void'] | StakingPoolArgs['tuple']['updateApplication()void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['updateApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the StakingPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): StakingPoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): StakingPoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<StakingPoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<StakingPoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<StakingPoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<StakingPoolComposerResults<TReturns>>
}
export type StakingPoolComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


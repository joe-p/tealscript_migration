{
    "hints": {
        "updateApplication()void": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "createApplication()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "initStakingContract(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "loadStakingContractData(uint64,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "finalizeStakingContract()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "gas()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getMbrAmounts()(uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "MbrAmounts",
                    "elements": [
                        [
                            "addValidatorMbr",
                            "uint64"
                        ],
                        [
                            "addPoolMbr",
                            "uint64"
                        ],
                        [
                            "poolInitMbr",
                            "uint64"
                        ],
                        [
                            "addStakerMbr",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Constraints",
                    "elements": [
                        [
                            "epochPayoutRoundsMin",
                            "uint64"
                        ],
                        [
                            "epochPayoutRoundsMax",
                            "uint64"
                        ],
                        [
                            "minPctToValidatorWFourDecimals",
                            "uint64"
                        ],
                        [
                            "maxPctToValidatorWFourDecimals",
                            "uint64"
                        ],
                        [
                            "minEntryStake",
                            "uint64"
                        ],
                        [
                            "maxAlgoPerPool",
                            "uint64"
                        ],
                        [
                            "maxAlgoPerValidator",
                            "uint64"
                        ],
                        [
                            "amtConsideredSaturated",
                            "uint64"
                        ],
                        [
                            "maxNodes",
                            "uint64"
                        ],
                        [
                            "maxPoolsPerNode",
                            "uint64"
                        ],
                        [
                            "maxStakersPerPool",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getNumValidators()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ValidatorConfig",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "manager",
                            "address"
                        ],
                        [
                            "nfdForInfo",
                            "uint64"
                        ],
                        [
                            "entryGatingType",
                            "uint8"
                        ],
                        [
                            "entryGatingAddress",
                            "address"
                        ],
                        [
                            "entryGatingAssets",
                            "uint64[4]"
                        ],
                        [
                            "gatingAssetMinBalance",
                            "uint64"
                        ],
                        [
                            "rewardTokenId",
                            "uint64"
                        ],
                        [
                            "rewardPerPayout",
                            "uint64"
                        ],
                        [
                            "epochRoundLength",
                            "uint32"
                        ],
                        [
                            "percentToValidator",
                            "uint32"
                        ],
                        [
                            "validatorCommissionAddress",
                            "address"
                        ],
                        [
                            "minEntryStake",
                            "uint64"
                        ],
                        [
                            "maxAlgoPerPool",
                            "uint64"
                        ],
                        [
                            "poolsPerNode",
                            "uint8"
                        ],
                        [
                            "sunsettingOn",
                            "uint64"
                        ],
                        [
                            "sunsettingTo",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getValidatorState(uint64)(uint16,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ValidatorCurState",
                    "elements": [
                        [
                            "numPools",
                            "uint16"
                        ],
                        [
                            "totalStakers",
                            "uint64"
                        ],
                        [
                            "totalAlgoStaked",
                            "uint64"
                        ],
                        [
                            "rewardTokenHeldBack",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getValidatorOwnerAndManager(uint64)(address,address)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPools(uint64)(uint64,uint16,uint64)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoolAppId(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "poolKey": {
                    "name": "ValidatorPoolKey",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "poolId",
                            "uint64"
                        ],
                        [
                            "poolAppId",
                            "uint64"
                        ]
                    ]
                },
                "output": {
                    "name": "PoolInfo",
                    "elements": [
                        [
                            "poolAppId",
                            "uint64"
                        ],
                        [
                            "totalStakers",
                            "uint16"
                        ],
                        [
                            "totalAlgoStaked",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getCurMaxStakePerPool(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "doesStakerNeedToPayMBR(address)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTokenPayoutRatio(uint64)(uint64[24],uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PoolTokenPayoutRatio",
                    "elements": [
                        [
                            "poolPctOfWhole",
                            "uint64[24]"
                        ],
                        [
                            "updatedForPayout",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getNodePoolAssignments(uint64)((uint64[3])[8])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "NodePoolAssignmentConfig",
                    "elements": [
                        [
                            "nodes",
                            "(uint64[3])[8]"
                        ]
                    ]
                }
            }
        },
        "getNFDRegistryID()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "config": {
                    "name": "ValidatorConfig",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "manager",
                            "address"
                        ],
                        [
                            "nfdForInfo",
                            "uint64"
                        ],
                        [
                            "entryGatingType",
                            "uint8"
                        ],
                        [
                            "entryGatingAddress",
                            "address"
                        ],
                        [
                            "entryGatingAssets",
                            "uint64[4]"
                        ],
                        [
                            "gatingAssetMinBalance",
                            "uint64"
                        ],
                        [
                            "rewardTokenId",
                            "uint64"
                        ],
                        [
                            "rewardPerPayout",
                            "uint64"
                        ],
                        [
                            "epochRoundLength",
                            "uint32"
                        ],
                        [
                            "percentToValidator",
                            "uint32"
                        ],
                        [
                            "validatorCommissionAddress",
                            "address"
                        ],
                        [
                            "minEntryStake",
                            "uint64"
                        ],
                        [
                            "maxAlgoPerPool",
                            "uint64"
                        ],
                        [
                            "poolsPerNode",
                            "uint8"
                        ],
                        [
                            "sunsettingOn",
                            "uint64"
                        ],
                        [
                            "sunsettingTo",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "changeValidatorManager(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "changeValidatorSunsetInfo(uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "changeValidatorNFD(uint64,uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "changeValidatorCommissionAddress(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addPool(pay,uint64,uint64)(uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ValidatorPoolKey",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "poolId",
                            "uint64"
                        ],
                        [
                            "poolAppId",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "addStake(pay,uint64,uint64)(uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ValidatorPoolKey",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "poolId",
                            "uint64"
                        ],
                        [
                            "poolAppId",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "setTokenPayoutRatio(uint64)(uint64[24],uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PoolTokenPayoutRatio",
                    "elements": [
                        [
                            "poolPctOfWhole",
                            "uint64[24]"
                        ],
                        [
                            "updatedForPayout",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "poolKey": {
                    "name": "ValidatorPoolKey",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "poolId",
                            "uint64"
                        ],
                        [
                            "poolAppId",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "poolKey": {
                    "name": "ValidatorPoolKey",
                    "elements": [
                        [
                            "id",
                            "uint64"
                        ],
                        [
                            "poolId",
                            "uint64"
                        ],
                        [
                            "poolAppId",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "movePoolToNode(uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "emptyTokenRewards(uint64,address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 5
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "numStakers": {
                    "type": "uint64",
                    "key": "numStakers"
                },
                "numValidators": {
                    "type": "uint64",
                    "key": "numV"
                },
                "programVersion": {
                    "type": "uint64",
                    "key": "programVersion"
                },
                "stakingPoolInitialized": {
                    "type": "uint64",
                    "key": "init"
                },
                "totalAlgoStaked": {
                    "type": "uint64",
                    "key": "staked"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ValidatorRegistry",
        "desc": "ValidatorRegistry is the 'master contract' for the reti pooling protocol.\nA single immutable instance of this is deployed.  All state for all validators including information about their\npools and nodes is stored via this contract in global state and box storage.  Data in the pools themselves is stored\nwithin the StakingPool contract instance, also in global state and box storage.\nSee the StakingPool contract comments for details on how this contract creates new instances of them.",
        "methods": [
            {
                "name": "updateApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "initStakingContract",
                "args": [
                    {
                        "type": "uint64",
                        "name": "approvalProgramSize"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "loadStakingContractData",
                "args": [
                    {
                        "type": "uint64",
                        "name": "offset"
                    },
                    {
                        "type": "byte[]",
                        "name": "data"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "finalizeStakingContract",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "gas",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost"
            },
            {
                "name": "getMbrAmounts",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64)"
                },
                "desc": "Returns the MBR amounts needed for various actions:\n[\n addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contract\n addPoolMbr: uint64 - mbr needed to add a new pool - paid to validator\n poolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itself\n addStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)\n]"
            },
            {
                "name": "getProtocolConstraints",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
                },
                "desc": "Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters."
            },
            {
                "name": "getNumValidators",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Returns the current number of validators"
            },
            {
                "name": "getValidatorConfig",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)"
                }
            },
            {
                "name": "getValidatorState",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint16,uint64,uint64,uint64)"
                }
            },
            {
                "name": "getValidatorOwnerAndManager",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(address,address)"
                }
            },
            {
                "name": "getPools",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId",
                        "desc": ""
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint16,uint64)[]",
                    "desc": "- array of pools\nNot callable from other contracts because >1K return but can be called w/ simulate which bumps log returns"
                },
                "desc": "Return list of all pools for this validator."
            },
            {
                "name": "getPoolAppId",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "uint64",
                        "name": "poolId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getPoolInfo",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64)",
                        "name": "poolKey"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint16,uint64)"
                }
            },
            {
                "name": "getCurMaxStakePerPool",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId",
                        "desc": "- The id of the validator."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Calculate the maximum stake per pool for a given validator.\nNormally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools so\nas pools are added the max allowed per pool can reduce."
            },
            {
                "name": "doesStakerNeedToPayMBR",
                "args": [
                    {
                        "type": "address",
                        "name": "staker",
                        "desc": ""
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                },
                "desc": "Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount"
            },
            {
                "name": "getStakedPoolsForAccount",
                "args": [
                    {
                        "type": "address",
                        "name": "staker",
                        "desc": "- The account to retrieve staked pools for."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)[]",
                    "desc": "- The array of staked pools for the account."
                },
                "desc": "Retrieves the staked pools for an account."
            },
            {
                "name": "getTokenPayoutRatio",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId",
                        "desc": "- The id of the validator."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64[24],uint64)",
                    "desc": "- The token payout ratio for the validator."
                },
                "desc": "Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that token\npayouts across pools can be based on a stable snaphost of stake."
            },
            {
                "name": "getNodePoolAssignments",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "((uint64[3])[8])"
                }
            },
            {
                "name": "getNFDRegistryID",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "addValidator",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbrPayment",
                        "desc": "payment from caller which covers mbr increase of new validator storage"
                    },
                    {
                        "type": "string",
                        "name": "nfdName",
                        "desc": "(Optional) Name of nfd (used as double-check against id specified in config)"
                    },
                    {
                        "type": "(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)",
                        "name": "config",
                        "desc": "ValidatorConfig struct"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "validator id"
                },
                "desc": "Adds a new validator\nRequires at least 10 ALGO as the 'fee' for the transaction to help dissuade spammed validator adds."
            },
            {
                "name": "changeValidatorManager",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId",
                        "desc": "- The id of the validator to change the manager for."
                    },
                    {
                        "type": "address",
                        "name": "manager",
                        "desc": "- The new manager address."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Changes the Validator manager for a specific Validator id.\n[ ONLY OWNER CAN CHANGE ]"
            },
            {
                "name": "changeValidatorSunsetInfo",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId",
                        "desc": "- The id of the validator to update."
                    },
                    {
                        "type": "uint64",
                        "name": "sunsettingOn",
                        "desc": "- The new sunset timestamp."
                    },
                    {
                        "type": "uint64",
                        "name": "sunsettingTo",
                        "desc": "- The new sunset to validator id."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Updates the sunset information for a given validator.\n[ ONLY OWNER CAN CHANGE ]"
            },
            {
                "name": "changeValidatorNFD",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId",
                        "desc": "- The id of the validator to update."
                    },
                    {
                        "type": "uint64",
                        "name": "nfdAppID",
                        "desc": "- The application id of the NFD to assign to the validator."
                    },
                    {
                        "type": "string",
                        "name": "nfdName",
                        "desc": "- The name of the NFD (which must match)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Changes the NFD for a validator in the validatorList contract.\n[ ONLY OWNER CAN CHANGE ]"
            },
            {
                "name": "changeValidatorCommissionAddress",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "address",
                        "name": "commissionAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Change the commission address that validator rewards are sent to.\n[ ONLY OWNER CAN CHANGE ]"
            },
            {
                "name": "changeValidatorRewardInfo",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId"
                    },
                    {
                        "type": "uint8",
                        "name": "EntryGatingType"
                    },
                    {
                        "type": "address",
                        "name": "EntryGatingAddress"
                    },
                    {
                        "type": "uint64[4]",
                        "name": "EntryGatingAssets"
                    },
                    {
                        "type": "uint64",
                        "name": "GatingAssetMinBalance"
                    },
                    {
                        "type": "uint64",
                        "name": "RewardPerPayout"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Allow the additional rewards (gating entry, additional token rewards) information be changed at will.\n[ ONLY OWNER CAN CHANGE ]"
            },
            {
                "name": "addPool",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbrPayment",
                        "desc": "payment from caller which covers mbr increase of adding a new pool"
                    },
                    {
                        "type": "uint64",
                        "name": "validatorId",
                        "desc": "is id of validator to pool to (must be owner or manager)"
                    },
                    {
                        "type": "uint64",
                        "name": "nodeNum",
                        "desc": "is node number to add to"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)",
                    "desc": "pool key to created pool"
                },
                "desc": "Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.\nThe caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.\n\n[ ONLY OWNER OR MANAGER CAN call ]"
            },
            {
                "name": "addStake",
                "args": [
                    {
                        "type": "pay",
                        "name": "stakedAmountPayment",
                        "desc": "- payment coming from staker to place into a pool"
                    },
                    {
                        "type": "uint64",
                        "name": "validatorId",
                        "desc": "- The id of the validator."
                    },
                    {
                        "type": "uint64",
                        "name": "valueToVerify",
                        "desc": "- only if validator has gating to enter - this is asset id or nfd id that corresponds to gating.\nTxn sender is factored in as well if that is part of gating.\n*"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)",
                    "desc": "- The key of the validator pool."
                },
                "desc": "Adds stake to a validator pool."
            },
            {
                "name": "setTokenPayoutRatio",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId",
                        "desc": "- validator id (and thus pool) calling us.  Verified so that sender MUST be pool 1 of this validator."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64[24],uint64)",
                    "desc": "PoolTokenPayoutRatio - the finished ratio data"
                },
                "desc": "setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratios\nof stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40\nin pool 2)  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered by\npool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.\nIt would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead of\ntheir 'current' stake which changes as part of the payouts themselves (and people could be changing stake\nduring the epoch updates across pools)\n\nMultiple pools will call us via pool 1 (pool2->pool1->validator, etc.) so don't assert on pool1 calling multiple\ntimes in same epoch.  Just return."
            },
            {
                "name": "stakeUpdatedViaRewards",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64)",
                        "name": "poolKey",
                        "desc": "- ValidatorPoolKey type"
                    },
                    {
                        "type": "uint64",
                        "name": "algoToAdd",
                        "desc": "- amount this validator's total stake increased via rewards"
                    },
                    {
                        "type": "uint64",
                        "name": "rewardTokenAmountReserved",
                        "desc": "- amount this validator's total stake increased via rewards (that should be"
                    },
                    {
                        "type": "uint64",
                        "name": "validatorCommission",
                        "desc": "- the commission amount the validator was paid, if any"
                    },
                    {
                        "type": "uint64",
                        "name": "saturatedBurnToFeeSink",
                        "desc": "- if the pool was in saturated state, the amount sent back to the fee sink.\nseen as 'accounted for/pending spent')"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of total\nstake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.\nThe calling App id is validated against our pool list as well."
            },
            {
                "name": "stakeRemoved",
                "args": [
                    {
                        "type": "(uint64,uint64,uint64)",
                        "name": "poolKey",
                        "desc": "calling us from which stake was removed"
                    },
                    {
                        "type": "address",
                        "name": "staker",
                        "desc": ""
                    },
                    {
                        "type": "uint64",
                        "name": "amountRemoved",
                        "desc": "- algo amount removed"
                    },
                    {
                        "type": "uint64",
                        "name": "rewardRemoved",
                        "desc": "- if applicable, amount of token reward removed (by pool 1 caller) or TO remove and pay out (via pool 1 from different pool caller)"
                    },
                    {
                        "type": "bool",
                        "name": "stakerRemoved",
                        "desc": ""
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removed\nfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.\nIf any amount of rewardRemoved is specified, then that amount of reward is sent to the use\nThe calling App id is validated against our pool list as well."
            },
            {
                "name": "findPoolForStaker",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId",
                        "desc": "- The id of the validator."
                    },
                    {
                        "type": "address",
                        "name": "staker",
                        "desc": "- The address of the staker."
                    },
                    {
                        "type": "uint64",
                        "name": "amountToStake",
                        "desc": "- The amount to stake."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "((uint64,uint64,uint64),bool,bool)",
                    "desc": ", boolean, boolean} - The pool for the staker, true/false on whether the staker is 'new'\nto this VALIDATOR, and true/false if staker is new to the protocol."
                },
                "desc": "Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.\nFirst checks the stakers 'already staked list' for the validator preferring those (adding if possible) then adds\nto new pool if necessary."
            },
            {
                "name": "movePoolToNode",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId",
                        "desc": "- The id of the validator."
                    },
                    {
                        "type": "uint64",
                        "name": "poolAppId",
                        "desc": ""
                    },
                    {
                        "type": "uint64",
                        "name": "nodeNum",
                        "desc": ""
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Find the specified pool (in any node number) and move it to the specified node.\nThe pool account is forced offline if moved so prior node will still run for 320 rounds but\nnew key goes online on new node soon after (320 rounds after it goes online)\nNo-op if success, asserts if not found or can't move  (no space in target)\n[ ONLY OWNER OR MANAGER CAN CHANGE ]"
            },
            {
                "name": "emptyTokenRewards",
                "args": [
                    {
                        "type": "uint64",
                        "name": "validatorId",
                        "desc": "- The id of the validator."
                    },
                    {
                        "type": "address",
                        "name": "receiver",
                        "desc": "- the account to send the tokens to (must already be opted-in to the reward token)"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "the amount of reward token sent"
                },
                "desc": "Sends the reward tokens held in pool 1 to specified receiver.\nThis is intended to be used by the owner when they want to get reward tokens 'back' which they sent to\nthe first pool (likely because validator is sunsetting.  Any tokens currently 'reserved' for stakers to claim will\nNOT be sent as they must be held back for stakers to later claim.\n[ ONLY OWNER CAN CALL]"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}
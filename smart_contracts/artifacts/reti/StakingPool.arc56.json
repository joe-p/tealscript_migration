{
    "name": "StakingPool",
    "structs": {
        "StakedInfo": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "balance",
                "type": "uint64"
            },
            {
                "name": "totalRewarded",
                "type": "uint64"
            },
            {
                "name": "rewardTokenBalance",
                "type": "uint64"
            },
            {
                "name": "entryRound",
                "type": "uint64"
            }
        ],
        "PoolTokenPayoutRatio": [
            {
                "name": "poolPctOfWhole",
                "type": "uint64[24]"
            },
            {
                "name": "updatedForPayout",
                "type": "uint64"
            }
        ],
        "ValidatorPoolKey": [
            {
                "name": "id",
                "type": "uint64"
            },
            {
                "name": "poolId",
                "type": "uint64"
            },
            {
                "name": "poolAppId",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "updateApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "uint64",
                    "name": "creatingContractId",
                    "desc": "- id of contract that constructed us - the validator application (single global instance)"
                },
                {
                    "type": "uint64",
                    "name": "validatorId",
                    "desc": "- id of validator we're a staking pool of"
                },
                {
                    "type": "uint64",
                    "name": "poolId",
                    "desc": "- which pool id are we"
                },
                {
                    "type": "uint64",
                    "name": "minEntryStake",
                    "desc": "- minimum amount to be in pool, but also minimum amount balance can't go below (without removing all!)"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "gas",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "initStorage",
            "args": [
                {
                    "type": "pay",
                    "name": "mbrPayment",
                    "desc": "payment from caller which covers mbr increase of new staking pools' storage"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Called after we're created and then funded, so we can create our large stakers ledger storage\nCaller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost\nIf this is pool 1 AND the validator has specified a reward token, opt-in to that token\nso that the validator can seed the pool with future rewards of that token.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addStake",
            "args": [
                {
                    "type": "pay",
                    "name": "stakedAmountPayment",
                    "desc": "prior payment coming from validator contract to us on behalf of staker."
                },
                {
                    "type": "address",
                    "name": "staker",
                    "desc": "- The account adding new stake"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "new 'entry round' round number of stake add"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Adds stake to the given account.\nCan ONLY be called by the validator contract that created us\nMust receive payment from the validator contract for amount being staked.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "removeStake",
            "args": [
                {
                    "type": "address",
                    "name": "staker",
                    "desc": "- account to remove.  normally same as sender, but the validator owner or manager can also call\nthis to remove the specified staker explicitly. The removed stake MUST only go to the staker of course.  This is\nso a validator can shut down a poool and refund the stakers.  It can also be used to kick out stakers who no longer\nmeet the gating requirements (determined by the node daemon)."
                },
                {
                    "type": "uint64",
                    "name": "amountToUnstake",
                    "desc": "- The amount of stake to be removed.  Specify 0 to remove all stake."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in\nfull. Also notifies the validator contract for this pools validator of the staker / balance changes.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claimTokens",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Claims all the available reward tokens a staker has available, sending their entire balance to the staker from\npool 1 (either directly, or via validator->pool1 to pay it out)\nAlso notifies the validator contract for this pools validator of the staker / balance changes.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getStakerInfo",
            "args": [
                {
                    "type": "address",
                    "name": "staker",
                    "desc": "- The address of the staker."
                }
            ],
            "returns": {
                "type": "(address,uint64,uint64,uint64,uint64)",
                "struct": "StakedInfo",
                "desc": "- The staked information for the given staker."
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Retrieves the staked information for a given staker.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "payTokenReward",
            "args": [
                {
                    "type": "address",
                    "name": "staker",
                    "desc": "- the staker account to send rewards to"
                },
                {
                    "type": "uint64",
                    "name": "rewardToken",
                    "desc": "- id of reward token (to avoid re-entrancy in calling validator back to get id)"
                },
                {
                    "type": "uint64",
                    "name": "amountToSend",
                    "desc": "- amount to send the staker (there is significant trust here(!) - also why only validator can call us"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "[Internal protocol method] Remove a specified amount of 'community token' rewards for a staker.\nThis can ONLY be called by our validator and only if we're pool 1 - with the token.\nNote: this can also be called by validator as part of OWNER wanting to send the reward tokens\nsomewhere else (ie if they're sunsetting their validator and need the reward tokens back).\nIt's up to the validator to ensure that the balance in rewardTokenHeldBack is honored.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateAlgodVer",
            "args": [
                {
                    "type": "string",
                    "name": "algodVer",
                    "desc": "- string representing the algorand node daemon version (reti node daemon composes its own meta version)"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update the (honor system) algod version for the node associated to this pool.  The node management daemon\nshould compare its current nodes version to the version stored in global state, updating when different.\nThe reti node daemon composes its own version string using format:\n{major}.{minor}.{build} {branch} [{commit hash}],\nie: 3.22.0 rel/stable [6b508975]\n[ ONLY OWNER OR MANAGER CAN CALL ]",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "epochBalanceUpdate",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)\nstakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance\ncompounds over time and staker can remove that amount at will.\nThe validator is paid their percentage each epoch payout.\n\nNote: ANYONE can call this.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "goOnline",
            "args": [
                {
                    "type": "pay",
                    "name": "feePayment",
                    "desc": "- payment to cover extra fee of going online if offline - or 0 if not renewal"
                },
                {
                    "type": "byte[32]",
                    "name": "votePK",
                    "desc": "- The vote public key."
                },
                {
                    "type": "byte[32]",
                    "name": "selectionPK",
                    "desc": "- The selection public key."
                },
                {
                    "type": "byte[64]",
                    "name": "stateProofPK",
                    "desc": "- The state proof public key."
                },
                {
                    "type": "uint64",
                    "name": "voteFirst",
                    "desc": "- The first vote index."
                },
                {
                    "type": "uint64",
                    "name": "voteLast",
                    "desc": "- The last vote index."
                },
                {
                    "type": "uint64",
                    "name": "voteKeyDilution",
                    "desc": "- The vote key dilution value."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Registers a staking pool key online against a participation key.\n[ ONLY OWNER OR MANAGER CAN CALL ]",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "goOffline",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Marks a staking pool key OFFLINE.\n[ ONLY OWNER OR MANAGER CAN CALL ]",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "linkToNFD",
            "args": [
                {
                    "type": "uint64",
                    "name": "nfdAppId"
                },
                {
                    "type": "string",
                    "name": "nfdName"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "proxiedSetTokenPayoutRatio",
            "args": [
                {
                    "type": "(uint64,uint64,uint64)",
                    "struct": "ValidatorPoolKey",
                    "name": "poolKey",
                    "desc": "- ValidatorPoolKey tuple"
                }
            ],
            "returns": {
                "type": "(uint64[24],uint64)",
                "struct": "PoolTokenPayoutRatio"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "proxiedSetTokenPayoutRatio is meant to be called by pools != 1 - calling US, pool #1\nWe need to verify that we are in fact being called by another of OUR pools (not us)\nand then we'll call the validator on their behalf to update the token payouts",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "StakingPool contract has a new instance deployed per staking pool added by any validator.  A single instance\nis initially immutably deployed, and the id of that instance is used as a construction parameter in the immutable\ninstance of the master ValidatorRegistry contract.  It then uses that StakingPool instance as a 'factory template'\nfor subsequent pool creations - using the on-chain bytecode of that deployed instance to create a new identical\ninstance.\n\nEach instance is explicitly 'linked' to the validator master via its creation parameters.  The validator master\ncontract only allows calls from staking pool contract instances that match data that only the validator master\nauthoritatively has (validator id X, pool Y - has to come from contract address of that pool).  Calls the pools\nvalidate coming from the validator are only allowed if it matches the validator id it was created with.",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 11,
                "bytes": 3
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "creatingValidatorContractAppId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3JlYXRvckFwcA=="
                },
                "validatorId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dmFsaWRhdG9ySWQ="
                },
                "poolId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cG9vbElk"
                },
                "numStakers": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bnVtU3Rha2Vycw=="
                },
                "totalAlgoStaked": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c3Rha2Vk"
                },
                "minEntryStake": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWluRW50cnlTdGFrZQ=="
                },
                "lastPayout": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdFBheW91dA=="
                },
                "epochNumber": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZXBvY2hOdW1iZXI="
                },
                "algodVer": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YWxnb2RWZXI="
                },
                "roundsPerDay": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cm91bmRzUGVyRGF5"
                },
                "binRoundStart": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YmluUm91bmRTdGFydA=="
                },
                "stakeAccumulator": {
                    "keyType": "AVMString",
                    "valueType": "uint128",
                    "key": "c3Rha2VBY2N1bXVsYXRvcg=="
                },
                "rewardAccumulator": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmV3YXJkQWNjdW11bGF0b3I="
                },
                "weightedMovingAverage": {
                    "keyType": "AVMString",
                    "valueType": "uint128",
                    "key": "ZXdtYQ=="
                }
            },
            "local": {},
            "box": {
                "stakers": {
                    "keyType": "AVMString",
                    "valueType": "(address,uint64,uint64,uint64,uint64)[200]",
                    "key": "c3Rha2Vycw=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1030,
                        1249,
                        1703,
                        1931,
                        2677,
                        3145
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        799,
                        1407,
                        1802,
                        2093,
                        2229,
                        2288,
                        2342,
                        3858,
                        4083,
                        4133,
                        4176
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        1238
                    ],
                    "errorMessage": "If staker is not sender in removeStake call, then sender MUST be owner or manager of validator"
                },
                {
                    "pc": [
                        1323
                    ],
                    "errorMessage": "Insufficient balance"
                },
                {
                    "pc": [
                        119,
                        138,
                        160,
                        172,
                        215,
                        227,
                        245,
                        268,
                        287,
                        299,
                        318,
                        348,
                        370,
                        379
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        410
                    ],
                    "errorMessage": "OnCompletion is not UpdateApplication"
                },
                {
                    "pc": [
                        1152
                    ],
                    "errorMessage": "Staking pool full"
                },
                {
                    "pc": [
                        658
                    ],
                    "errorMessage": "Temporary: contract is upgradeable but only during testing and only from a development account"
                },
                {
                    "pc": [
                        2353,
                        2364,
                        3653,
                        3657
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        1256,
                        1710,
                        1938
                    ],
                    "errorMessage": "account not found"
                },
                {
                    "pc": [
                        837,
                        874,
                        918,
                        940,
                        1991,
                        2239,
                        3928,
                        4100
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        847,
                        959,
                        3884
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        4031
                    ],
                    "errorMessage": "callee must be pool 1"
                },
                {
                    "pc": [
                        4044
                    ],
                    "errorMessage": "caller must NOT be pool 1"
                },
                {
                    "pc": [
                        4023
                    ],
                    "errorMessage": "caller must be part of same validator set!"
                },
                {
                    "pc": [
                        2033,
                        3868,
                        3936,
                        3953
                    ],
                    "errorMessage": "can only be called by owner or manager of validator"
                },
                {
                    "pc": [
                        383
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        122,
                        141,
                        163,
                        175,
                        218,
                        230,
                        248,
                        271,
                        290,
                        302,
                        321,
                        351,
                        373,
                        413
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        2004
                    ],
                    "errorMessage": "can only claim token rewards from validator that has them"
                },
                {
                    "pc": [
                        2131
                    ],
                    "errorMessage": "can't call epochBalanceUpdate in same epoch as prior call"
                },
                {
                    "pc": [
                        1473
                    ],
                    "errorMessage": "cannot reduce balance below minimum allowed stake unless all is removed"
                },
                {
                    "pc": [
                        770,
                        774,
                        811,
                        863,
                        915,
                        937,
                        973,
                        985,
                        990,
                        999,
                        1157,
                        1208,
                        1340,
                        1368,
                        1378,
                        1382,
                        1465,
                        1518,
                        1558,
                        1563,
                        1576,
                        1597,
                        1601,
                        1606,
                        1763,
                        1773,
                        1777,
                        1844,
                        1848,
                        1853,
                        1988,
                        1998,
                        2063,
                        2067,
                        2122,
                        2144,
                        2181,
                        2191,
                        2195,
                        2244,
                        2254,
                        2258,
                        2309,
                        2313,
                        2358,
                        2478,
                        2914,
                        3015,
                        3120,
                        3438,
                        3443,
                        3452,
                        3464,
                        3495,
                        3507,
                        3511,
                        3516,
                        3816,
                        3821,
                        3925,
                        4010,
                        4028,
                        4049,
                        4142,
                        4146,
                        4214,
                        4224,
                        4252,
                        4268,
                        4314,
                        4359,
                        4383
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        2001
                    ],
                    "errorMessage": "must be pool 1 in order to be called to pay out token rewards"
                },
                {
                    "pc": [
                        1161
                    ],
                    "errorMessage": "must stake at least the minimum for this pool"
                },
                {
                    "pc": [
                        522,
                        580,
                        604,
                        1016,
                        1584,
                        3482,
                        4341
                    ],
                    "errorMessage": "overflow"
                },
                {
                    "pc": [
                        920
                    ],
                    "errorMessage": "stake can only be added via the validator contract"
                },
                {
                    "pc": [
                        765
                    ],
                    "errorMessage": "staking pool already initialized"
                },
                {
                    "pc": [
                        909
                    ],
                    "errorMessage": "staking pool must be initialized first"
                },
                {
                    "pc": [
                        681
                    ],
                    "errorMessage": "staking pool must have minimum entry of 1 algo"
                },
                {
                    "pc": [
                        1993
                    ],
                    "errorMessage": "this can only be called via the validator contract"
                },
                {
                    "pc": [
                        185,
                        331,
                        361
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {
        "NFD_REGISTRY_APP_ID": {
            "type": "AVMUint64"
        },
        "FEE_SINK_ADDR": {
            "type": "address"
        }
    }
}
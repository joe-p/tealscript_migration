{
    "hints": {
        "deleteApplication()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "createApplication()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "verify(byte[],byte[33][3])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "appendLeaf(byte[],byte[33][3])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateLeaf(byte[],byte[],byte[33][3])void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "root": {
                    "type": "bytes",
                    "key": "root"
                },
                "size": {
                    "type": "uint64",
                    "key": "size"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "MerkleTree",
        "methods": [
            {
                "name": "deleteApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "verify",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "data"
                    },
                    {
                        "type": "byte[33][3]",
                        "name": "path"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "appendLeaf",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "data"
                    },
                    {
                        "type": "byte[33][3]",
                        "name": "path"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateLeaf",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "oldData"
                    },
                    {
                        "type": "byte[]",
                        "name": "newData"
                    },
                    {
                        "type": "byte[33][3]",
                        "name": "path"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}